// Copyright (C) 2009 Technische Universitaet Muenchen
// This file is part of the Peano project. For conditions of distribution and
// use, please see the copyright notice at www5.in.tum.de/peano
#ifndef PEANO_APPLICATIONS_LATTICEBOLTZMANN_BLOCKLATTICEBOLTZMANN_RUNNERS_BlockLatticeBoltzmannBatchJobRunner__FOR_SPACETREE_GRID_H_
#define PEANO_APPLICATIONS_LATTICEBOLTZMANN_BLOCKLATTICEBOLTZMANN_RUNNERS_BlockLatticeBoltzmannBatchJobRunner__FOR_SPACETREE_GRID_H_


#include "peano/applications/latticeboltzmann/blocklatticeboltzmann/configurations/BlockLatticeBoltzmannBatchJobConfigurationForSpacetreeGrid.h"


#include "peano/utils/Dimensions.h"
#include "peano/applications/latticeboltzmann/blocklatticeboltzmann/services/PerformanceMeasurementService.h"
#include "peano/applications/latticeboltzmann/blocklatticeboltzmann/services/RefinementService.h"

#include "peano/geometry/extensions/GeometryEnlargement.h"
#include "peano/geometry/services/FunctionalGeometryService.h"
#include "peano/integration/partitioncoupling/services/CouplingService.h"
#include "peano/integration/partitioncoupling/services/ReceiveDataService.h"
#include "peano/integration/partitioncoupling/services/SendDataService.h"
#include "scenario/latticeboltzmann/blocklatticeboltzmann/services/ReceiveBoundaryDataService.h"
#include "peano/applications/latticeboltzmann/blocklatticeboltzmann/services/GridManagementService.h"
#include "tarch/logging/Log.h"
#include "peano/kernel/datatraversal/autotuning/Oracle.h"

namespace peano {
  namespace applications {
    namespace latticeboltzmann {
      namespace blocklatticeboltzmann {
    namespace runners {
      class BlockLatticeBoltzmannBatchJobRunnerForSpacetreeGrid;
    }
    namespace configurations {
      class BlockLatticeBoltzmannBatchJobConfigurationForSpacetreeGrid;
    }
    namespace repositories {
      class BlockLatticeBoltzmannBatchJobRepositoryForSpacetreeGrid;
    }
}
}
}
}



/**
 * Runner for the regular grid.
 *
 * @author Generated by the PeProt (Peano Rapid Prototyping) tool.
 */
class peano::applications::latticeboltzmann::blocklatticeboltzmann::runners::BlockLatticeBoltzmannBatchJobRunnerForSpacetreeGrid {
  private:
    int runAsMaster(peano::applications::latticeboltzmann::blocklatticeboltzmann::repositories::BlockLatticeBoltzmannBatchJobRepositoryForSpacetreeGrid& repository);

    #ifdef Parallel
    int runAsClient(peano::applications::latticeboltzmann::blocklatticeboltzmann::repositories::BlockLatticeBoltzmannBatchJobRepositoryForSpacetreeGrid& repository);
    #endif


    /** initialises all services */
    void initServices(const peano::applications::latticeboltzmann::blocklatticeboltzmann::configurations::BlockLatticeBoltzmannBatchJobConfigurationForSpacetreeGrid& configuration);

    /** shuts down all services */
    void shutdownServices(const peano::applications::latticeboltzmann::blocklatticeboltzmann::configurations::BlockLatticeBoltzmannBatchJobConfigurationForSpacetreeGrid& configuration);

    int* setupCoarsestLevelsOfIntermediateTimesteps(const int referenceLevel, const int finestLevel) const;

    void solveOneTimestep(
      const int& t,
      int *coarsestLevelOfIntermediateTimesteps,
      peano::applications::latticeboltzmann::blocklatticeboltzmann::repositories::BlockLatticeBoltzmannBatchJobRepositoryForSpacetreeGrid& repository
    );

    /** does the dynamic geometry refinement */
    void handleDynamicGeometry(
      peano::applications::latticeboltzmann::blocklatticeboltzmann::repositories::BlockLatticeBoltzmannBatchJobRepositoryForSpacetreeGrid& repository
    );

    void initialiseGrid(
      peano::applications::latticeboltzmann::blocklatticeboltzmann::repositories::BlockLatticeBoltzmannBatchJobRepositoryForSpacetreeGrid& repository
    );

  public:
    BlockLatticeBoltzmannBatchJobRunnerForSpacetreeGrid();
    virtual ~BlockLatticeBoltzmannBatchJobRunnerForSpacetreeGrid();

    /**
     * Executes the run for one configuration.
     *
     * Whenever the configuration file parser encounters a tag corresponding to
     * a regular grid runner, it tells the corresponding configuration class
     * configurations::peano::applications::latticeboltzmann::blocklatticeboltzmann::configurations::BlockLatticeBoltzmannBatchJobConfigurationForRegularGrid
     * to create an instance of this class and to parse the configuration file.
     * If the latter is valid, Peano afterwards calls the runner's run() routine
     * and passes it the configuration instance.
     *
     * @param configuration Valid configuration for this experiment run.
     */
    int run(const peano::applications::latticeboltzmann::blocklatticeboltzmann::configurations::BlockLatticeBoltzmannBatchJobConfigurationForSpacetreeGrid& configuration);

  private:
    static tarch::logging::Log _log;
};

#endif
