#ifndef _PEANO_APPLICATIONS_FAXEN_LBF_RECORDS_REGULARGRIDBLOCKCELL_H
#define _PEANO_APPLICATIONS_FAXEN_LBF_RECORDS_REGULARGRIDBLOCKCELL_H

#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>
#include "peano/utils/Globals.h"

namespace peano {
   namespace applications {
      namespace faxen {
         namespace lbf {
            namespace records {
               class RegularGridBlockCell;
               class RegularGridBlockCellPacked;
            }
         }
      }
   }
}

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 09-12-2010 17:47
 *
 * @date   23/07/2011 08:27
 */
class peano::applications::faxen::lbf::records::RegularGridBlockCell { 
   
   public:
      
      typedef peano::applications::faxen::lbf::records::RegularGridBlockCellPacked Packed;
      
      struct PersistentRecords {
         double _P;
         double _U;
         double _V;
         double _F;
         double _G;
         double _rhs;
         double _res;
         bool _isInside;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const double& P, const double& U, const double& V, const double& F, const double& G, const double& rhs, const double& res, const bool& isInside);
         
         /**
          * Generated
          */
         double getP() const;
         
         /**
          * Generated
          */
         void setP(const double& P);
         
         /**
          * Generated
          */
         double getU() const;
         
         /**
          * Generated
          */
         void setU(const double& U);
         
         /**
          * Generated
          */
         double getV() const;
         
         /**
          * Generated
          */
         void setV(const double& V);
         
         /**
          * Generated
          */
         double getF() const;
         
         /**
          * Generated
          */
         void setF(const double& F);
         
         /**
          * Generated
          */
         double getG() const;
         
         /**
          * Generated
          */
         void setG(const double& G);
         
         /**
          * Generated
          */
         double getRhs() const;
         
         /**
          * Generated
          */
         void setRhs(const double& rhs);
         
         /**
          * Generated
          */
         double getRes() const;
         
         /**
          * Generated
          */
         void setRes(const double& res);
         
         /**
          * Generated
          */
         bool getIsInside() const;
         
         /**
          * Generated
          */
         void setIsInside(const bool& isInside);
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      RegularGridBlockCell();
      
      /**
       * Generated
       */
      RegularGridBlockCell(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      RegularGridBlockCell(const double& P, const double& U, const double& V, const double& F, const double& G, const double& rhs, const double& res, const bool& isInside);
      
      /**
       * Generated
       */
      virtual ~RegularGridBlockCell();
      
      /**
       * Generated
       */
      double getP() const;
      
      /**
       * Generated
       */
      void setP(const double& P);
      
      /**
       * Generated
       */
      double getU() const;
      
      /**
       * Generated
       */
      void setU(const double& U);
      
      /**
       * Generated
       */
      double getV() const;
      
      /**
       * Generated
       */
      void setV(const double& V);
      
      /**
       * Generated
       */
      double getF() const;
      
      /**
       * Generated
       */
      void setF(const double& F);
      
      /**
       * Generated
       */
      double getG() const;
      
      /**
       * Generated
       */
      void setG(const double& G);
      
      /**
       * Generated
       */
      double getRhs() const;
      
      /**
       * Generated
       */
      void setRhs(const double& rhs);
      
      /**
       * Generated
       */
      double getRes() const;
      
      /**
       * Generated
       */
      void setRes(const double& res);
      
      /**
       * Generated
       */
      bool getIsInside() const;
      
      /**
       * Generated
       */
      void setIsInside(const bool& isInside);
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      RegularGridBlockCellPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          */
         static MPI_Datatype Datatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag);
         
         void receive(int source, int tag);
         
         static bool isMessageInQueue(int tag);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 09-12-2010 17:47
    *
    * @date   23/07/2011 08:27
    */
   class peano::applications::faxen::lbf::records::RegularGridBlockCellPacked { 
      
      public:
         
         struct PersistentRecords {
            double _P;
            double _U;
            double _V;
            double _F;
            double _G;
            double _rhs;
            double _res;
            
            /** mapping of records:
            || Member 	|| startbit 	|| length
             |  isInside	| startbit 0	| #bits 1
             */
            long int _packedRecords0;
            
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const double& P, const double& U, const double& V, const double& F, const double& G, const double& rhs, const double& res, const bool& isInside);
            
            /**
             * Generated
             */
            double getP() const;
            
            /**
             * Generated
             */
            void setP(const double& P);
            
            /**
             * Generated
             */
            double getU() const;
            
            /**
             * Generated
             */
            void setU(const double& U);
            
            /**
             * Generated
             */
            double getV() const;
            
            /**
             * Generated
             */
            void setV(const double& V);
            
            /**
             * Generated
             */
            double getF() const;
            
            /**
             * Generated
             */
            void setF(const double& F);
            
            /**
             * Generated
             */
            double getG() const;
            
            /**
             * Generated
             */
            void setG(const double& G);
            
            /**
             * Generated
             */
            double getRhs() const;
            
            /**
             * Generated
             */
            void setRhs(const double& rhs);
            
            /**
             * Generated
             */
            double getRes() const;
            
            /**
             * Generated
             */
            void setRes(const double& res);
            
            /**
             * Generated
             */
            bool getIsInside() const;
            
            /**
             * Generated
             */
            void setIsInside(const bool& isInside);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         RegularGridBlockCellPacked();
         
         /**
          * Generated
          */
         RegularGridBlockCellPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         RegularGridBlockCellPacked(const double& P, const double& U, const double& V, const double& F, const double& G, const double& rhs, const double& res, const bool& isInside);
         
         /**
          * Generated
          */
         virtual ~RegularGridBlockCellPacked();
         
         /**
          * Generated
          */
         double getP() const;
         
         /**
          * Generated
          */
         void setP(const double& P);
         
         /**
          * Generated
          */
         double getU() const;
         
         /**
          * Generated
          */
         void setU(const double& U);
         
         /**
          * Generated
          */
         double getV() const;
         
         /**
          * Generated
          */
         void setV(const double& V);
         
         /**
          * Generated
          */
         double getF() const;
         
         /**
          * Generated
          */
         void setF(const double& F);
         
         /**
          * Generated
          */
         double getG() const;
         
         /**
          * Generated
          */
         void setG(const double& G);
         
         /**
          * Generated
          */
         double getRhs() const;
         
         /**
          * Generated
          */
         void setRhs(const double& rhs);
         
         /**
          * Generated
          */
         double getRes() const;
         
         /**
          * Generated
          */
         void setRes(const double& res);
         
         /**
          * Generated
          */
         bool getIsInside() const;
         
         /**
          * Generated
          */
         void setIsInside(const bool& isInside);
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         RegularGridBlockCell convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
