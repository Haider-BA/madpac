#ifndef _PEANO_APPLICATIONS_FAXEN_RECORDS_SPACETREEGRIDVERTEX_H
#define _PEANO_APPLICATIONS_FAXEN_RECORDS_SPACETREEGRIDVERTEX_H

#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>
#include "peano/utils/Globals.h"

namespace peano {
   namespace applications {
      namespace faxen {
         namespace records {
            class SpacetreeGridVertex;
            class SpacetreeGridVertexPacked;
         }
      }
   }
}

#if !defined(Debug) && !defined(Parallel) && !defined(Asserts)
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 09-12-2010 17:47
    *
    * @date   06/05/2011 22:32
    */
   class peano::applications::faxen::records::SpacetreeGridVertex { 
      
      public:
         
         typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
         
         enum InsideOutsideDomain {
            Inside = 0, Boundary = 1, Outside = 2
         };
         
         enum RefinementControl {
            Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
         };
         
         struct PersistentRecords {
            double _P0;
            double _P1;
            double _F0;
            double _F1;
            double _G0;
            double _G1;
            double _U0;
            double _U1;
            double _U2;
            double _V0;
            double _V1;
            double _V2;
            int _flag;
            bool _isHangingNode;
            RefinementControl _refinementControl;
            int _maximumSubtreeHeight;
            InsideOutsideDomain _insideOutsideDomain;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
            
            /**
             * Generated
             */
            double getP0() const;
            
            /**
             * Generated
             */
            void setP0(const double& P0);
            
            /**
             * Generated
             */
            double getP1() const;
            
            /**
             * Generated
             */
            void setP1(const double& P1);
            
            /**
             * Generated
             */
            double getF0() const;
            
            /**
             * Generated
             */
            void setF0(const double& F0);
            
            /**
             * Generated
             */
            double getF1() const;
            
            /**
             * Generated
             */
            void setF1(const double& F1);
            
            /**
             * Generated
             */
            double getG0() const;
            
            /**
             * Generated
             */
            void setG0(const double& G0);
            
            /**
             * Generated
             */
            double getG1() const;
            
            /**
             * Generated
             */
            void setG1(const double& G1);
            
            /**
             * Generated
             */
            double getU0() const;
            
            /**
             * Generated
             */
            void setU0(const double& U0);
            
            /**
             * Generated
             */
            double getU1() const;
            
            /**
             * Generated
             */
            void setU1(const double& U1);
            
            /**
             * Generated
             */
            double getU2() const;
            
            /**
             * Generated
             */
            void setU2(const double& U2);
            
            /**
             * Generated
             */
            double getV0() const;
            
            /**
             * Generated
             */
            void setV0(const double& V0);
            
            /**
             * Generated
             */
            double getV1() const;
            
            /**
             * Generated
             */
            void setV1(const double& V1);
            
            /**
             * Generated
             */
            double getV2() const;
            
            /**
             * Generated
             */
            void setV2(const double& V2);
            
            /**
             * Generated
             */
            int getFlag() const;
            
            /**
             * Generated
             */
            void setFlag(const int& flag);
            
            /**
             * Generated
             */
            bool getIsHangingNode() const;
            
            /**
             * Generated
             */
            void setIsHangingNode(const bool& isHangingNode);
            
            /**
             * Generated
             */
            RefinementControl getRefinementControl() const;
            
            /**
             * Generated
             */
            void setRefinementControl(const RefinementControl& refinementControl);
            
            /**
             * Generated
             */
            int getMaximumSubtreeHeight() const;
            
            /**
             * Generated
             */
            void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
            
            /**
             * Generated
             */
            InsideOutsideDomain getInsideOutsideDomain() const;
            
            /**
             * Generated
             */
            void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         int _numberOfAdjacentRefinedCells;
         
      public:
         /**
          * Generated
          */
         SpacetreeGridVertex();
         
         /**
          * Generated
          */
         SpacetreeGridVertex(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
         
         /**
          * Generated
          */
         SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain);
         
         /**
          * Generated
          */
         virtual ~SpacetreeGridVertex();
         
         /**
          * Generated
          */
         double getP0() const;
         
         /**
          * Generated
          */
         void setP0(const double& P0);
         
         /**
          * Generated
          */
         double getP1() const;
         
         /**
          * Generated
          */
         void setP1(const double& P1);
         
         /**
          * Generated
          */
         double getF0() const;
         
         /**
          * Generated
          */
         void setF0(const double& F0);
         
         /**
          * Generated
          */
         double getF1() const;
         
         /**
          * Generated
          */
         void setF1(const double& F1);
         
         /**
          * Generated
          */
         double getG0() const;
         
         /**
          * Generated
          */
         void setG0(const double& G0);
         
         /**
          * Generated
          */
         double getG1() const;
         
         /**
          * Generated
          */
         void setG1(const double& G1);
         
         /**
          * Generated
          */
         double getU0() const;
         
         /**
          * Generated
          */
         void setU0(const double& U0);
         
         /**
          * Generated
          */
         double getU1() const;
         
         /**
          * Generated
          */
         void setU1(const double& U1);
         
         /**
          * Generated
          */
         double getU2() const;
         
         /**
          * Generated
          */
         void setU2(const double& U2);
         
         /**
          * Generated
          */
         double getV0() const;
         
         /**
          * Generated
          */
         void setV0(const double& V0);
         
         /**
          * Generated
          */
         double getV1() const;
         
         /**
          * Generated
          */
         void setV1(const double& V1);
         
         /**
          * Generated
          */
         double getV2() const;
         
         /**
          * Generated
          */
         void setV2(const double& V2);
         
         /**
          * Generated
          */
         int getFlag() const;
         
         /**
          * Generated
          */
         void setFlag(const int& flag);
         
         /**
          * Generated
          */
         bool getIsHangingNode() const;
         
         /**
          * Generated
          */
         void setIsHangingNode(const bool& isHangingNode);
         
         /**
          * Generated
          */
         RefinementControl getRefinementControl() const;
         
         /**
          * Generated
          */
         void setRefinementControl(const RefinementControl& refinementControl);
         
         /**
          * Generated
          */
         int getMaximumSubtreeHeight() const;
         
         /**
          * Generated
          */
         void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
         
         /**
          * Generated
          */
         int getNumberOfAdjacentRefinedCells() const;
         
         /**
          * Generated
          */
         void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
         
         /**
          * Generated
          */
         InsideOutsideDomain getInsideOutsideDomain() const;
         
         /**
          * Generated
          */
         void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
         
         /**
          * Generated
          */
         static std::string toString(const InsideOutsideDomain& param);
         
         /**
          * Generated
          */
         static std::string getInsideOutsideDomainMapping();
         
         /**
          * Generated
          */
         static std::string toString(const RefinementControl& param);
         
         /**
          * Generated
          */
         static std::string getRefinementControlMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         SpacetreeGridVertexPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      /**
       * @author This class was autogenerated by DaStGen
       * 		   DataStructureGenerator (DaStGen), 2007-2009,
       * 		   by Wolfgang Eckhardt
       *
       * 		   build date: 09-12-2010 17:47
       *
       * @date   06/05/2011 22:32
       */
      class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
         
         public:
            
            typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
            
            typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
            
            struct PersistentRecords {
               double _P0;
               double _P1;
               double _F0;
               double _F1;
               double _G0;
               double _G1;
               double _U0;
               double _U1;
               double _U2;
               double _V0;
               double _V1;
               double _V2;
               int _flag;
               int _maximumSubtreeHeight;
               
               /** mapping of records:
               || Member 	|| startbit 	|| length
                |  isHangingNode	| startbit 0	| #bits 1
                |  refinementControl	| startbit 1	| #bits 3
                |  insideOutsideDomain	| startbit 4	| #bits 2
                */
               long int _packedRecords0;
               
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
               
               /**
                * Generated
                */
               double getP0() const;
               
               /**
                * Generated
                */
               void setP0(const double& P0);
               
               /**
                * Generated
                */
               double getP1() const;
               
               /**
                * Generated
                */
               void setP1(const double& P1);
               
               /**
                * Generated
                */
               double getF0() const;
               
               /**
                * Generated
                */
               void setF0(const double& F0);
               
               /**
                * Generated
                */
               double getF1() const;
               
               /**
                * Generated
                */
               void setF1(const double& F1);
               
               /**
                * Generated
                */
               double getG0() const;
               
               /**
                * Generated
                */
               void setG0(const double& G0);
               
               /**
                * Generated
                */
               double getG1() const;
               
               /**
                * Generated
                */
               void setG1(const double& G1);
               
               /**
                * Generated
                */
               double getU0() const;
               
               /**
                * Generated
                */
               void setU0(const double& U0);
               
               /**
                * Generated
                */
               double getU1() const;
               
               /**
                * Generated
                */
               void setU1(const double& U1);
               
               /**
                * Generated
                */
               double getU2() const;
               
               /**
                * Generated
                */
               void setU2(const double& U2);
               
               /**
                * Generated
                */
               double getV0() const;
               
               /**
                * Generated
                */
               void setV0(const double& V0);
               
               /**
                * Generated
                */
               double getV1() const;
               
               /**
                * Generated
                */
               void setV1(const double& V1);
               
               /**
                * Generated
                */
               double getV2() const;
               
               /**
                * Generated
                */
               void setV2(const double& V2);
               
               /**
                * Generated
                */
               int getFlag() const;
               
               /**
                * Generated
                */
               void setFlag(const int& flag);
               
               /**
                * Generated
                */
               bool getIsHangingNode() const;
               
               /**
                * Generated
                */
               void setIsHangingNode(const bool& isHangingNode);
               
               /**
                * Generated
                */
               RefinementControl getRefinementControl() const;
               
               /**
                * Generated
                */
               void setRefinementControl(const RefinementControl& refinementControl);
               
               /**
                * Generated
                */
               int getMaximumSubtreeHeight() const;
               
               /**
                * Generated
                */
               void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
               
               /**
                * Generated
                */
               InsideOutsideDomain getInsideOutsideDomain() const;
               
               /**
                * Generated
                */
               void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
               
               
            };
            
         private: 
            PersistentRecords _persistentRecords;
            int _numberOfAdjacentRefinedCells;
            
         public:
            /**
             * Generated
             */
            SpacetreeGridVertexPacked();
            
            /**
             * Generated
             */
            SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
            
            /**
             * Generated
             */
            SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain);
            
            /**
             * Generated
             */
            virtual ~SpacetreeGridVertexPacked();
            
            /**
             * Generated
             */
            double getP0() const;
            
            /**
             * Generated
             */
            void setP0(const double& P0);
            
            /**
             * Generated
             */
            double getP1() const;
            
            /**
             * Generated
             */
            void setP1(const double& P1);
            
            /**
             * Generated
             */
            double getF0() const;
            
            /**
             * Generated
             */
            void setF0(const double& F0);
            
            /**
             * Generated
             */
            double getF1() const;
            
            /**
             * Generated
             */
            void setF1(const double& F1);
            
            /**
             * Generated
             */
            double getG0() const;
            
            /**
             * Generated
             */
            void setG0(const double& G0);
            
            /**
             * Generated
             */
            double getG1() const;
            
            /**
             * Generated
             */
            void setG1(const double& G1);
            
            /**
             * Generated
             */
            double getU0() const;
            
            /**
             * Generated
             */
            void setU0(const double& U0);
            
            /**
             * Generated
             */
            double getU1() const;
            
            /**
             * Generated
             */
            void setU1(const double& U1);
            
            /**
             * Generated
             */
            double getU2() const;
            
            /**
             * Generated
             */
            void setU2(const double& U2);
            
            /**
             * Generated
             */
            double getV0() const;
            
            /**
             * Generated
             */
            void setV0(const double& V0);
            
            /**
             * Generated
             */
            double getV1() const;
            
            /**
             * Generated
             */
            void setV1(const double& V1);
            
            /**
             * Generated
             */
            double getV2() const;
            
            /**
             * Generated
             */
            void setV2(const double& V2);
            
            /**
             * Generated
             */
            int getFlag() const;
            
            /**
             * Generated
             */
            void setFlag(const int& flag);
            
            /**
             * Generated
             */
            bool getIsHangingNode() const;
            
            /**
             * Generated
             */
            void setIsHangingNode(const bool& isHangingNode);
            
            /**
             * Generated
             */
            RefinementControl getRefinementControl() const;
            
            /**
             * Generated
             */
            void setRefinementControl(const RefinementControl& refinementControl);
            
            /**
             * Generated
             */
            int getMaximumSubtreeHeight() const;
            
            /**
             * Generated
             */
            void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
            
            /**
             * Generated
             */
            int getNumberOfAdjacentRefinedCells() const;
            
            /**
             * Generated
             */
            void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
            
            /**
             * Generated
             */
            InsideOutsideDomain getInsideOutsideDomain() const;
            
            /**
             * Generated
             */
            void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
            
            /**
             * Generated
             */
            static std::string toString(const InsideOutsideDomain& param);
            
            /**
             * Generated
             */
            static std::string getInsideOutsideDomainMapping();
            
            /**
             * Generated
             */
            static std::string toString(const RefinementControl& param);
            
            /**
             * Generated
             */
            static std::string getRefinementControlMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            SpacetreeGridVertex convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                */
               static MPI_Datatype Datatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               void send(int destination, int tag);
               
               void receive(int source, int tag);
               
               static bool isMessageInQueue(int tag);
               
               int getSenderRank() const;
               
         #endif
            
         };
         
         
      #elif defined(Parallel) && defined(Asserts) && defined(Debug)
         /**
          * @author This class was autogenerated by DaStGen
          * 		   DataStructureGenerator (DaStGen), 2007-2009,
          * 		   by Wolfgang Eckhardt
          *
          * 		   build date: 09-12-2010 17:47
          *
          * @date   06/05/2011 22:32
          */
         class peano::applications::faxen::records::SpacetreeGridVertex { 
            
            public:
               
               typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
               
               enum InsideOutsideDomain {
                  Inside = 0, Boundary = 1, Outside = 2
               };
               
               enum RefinementControl {
                  Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
               };
               
               struct PersistentRecords {
                  double _P0;
                  double _P1;
                  double _F0;
                  double _F1;
                  double _G0;
                  double _G1;
                  double _U0;
                  double _U1;
                  double _U2;
                  double _V0;
                  double _V1;
                  double _V2;
                  int _flag;
                  bool _isHangingNode;
                  RefinementControl _refinementControl;
                  int _maximumSubtreeHeight;
                  InsideOutsideDomain _insideOutsideDomain;
                  tarch::la::Vector<DIMENSIONS,double> _x;
                  int _level;
                  bool _belongsToSubdomainBoundary;
                  tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                  tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                  /**
                   * Generated
                   */
                  PersistentRecords();
                  
                  /**
                   * Generated
                   */
                  PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  double getP0() const;
                  
                  /**
                   * Generated
                   */
                  void setP0(const double& P0);
                  
                  /**
                   * Generated
                   */
                  double getP1() const;
                  
                  /**
                   * Generated
                   */
                  void setP1(const double& P1);
                  
                  /**
                   * Generated
                   */
                  double getF0() const;
                  
                  /**
                   * Generated
                   */
                  void setF0(const double& F0);
                  
                  /**
                   * Generated
                   */
                  double getF1() const;
                  
                  /**
                   * Generated
                   */
                  void setF1(const double& F1);
                  
                  /**
                   * Generated
                   */
                  double getG0() const;
                  
                  /**
                   * Generated
                   */
                  void setG0(const double& G0);
                  
                  /**
                   * Generated
                   */
                  double getG1() const;
                  
                  /**
                   * Generated
                   */
                  void setG1(const double& G1);
                  
                  /**
                   * Generated
                   */
                  double getU0() const;
                  
                  /**
                   * Generated
                   */
                  void setU0(const double& U0);
                  
                  /**
                   * Generated
                   */
                  double getU1() const;
                  
                  /**
                   * Generated
                   */
                  void setU1(const double& U1);
                  
                  /**
                   * Generated
                   */
                  double getU2() const;
                  
                  /**
                   * Generated
                   */
                  void setU2(const double& U2);
                  
                  /**
                   * Generated
                   */
                  double getV0() const;
                  
                  /**
                   * Generated
                   */
                  void setV0(const double& V0);
                  
                  /**
                   * Generated
                   */
                  double getV1() const;
                  
                  /**
                   * Generated
                   */
                  void setV1(const double& V1);
                  
                  /**
                   * Generated
                   */
                  double getV2() const;
                  
                  /**
                   * Generated
                   */
                  void setV2(const double& V2);
                  
                  /**
                   * Generated
                   */
                  int getFlag() const;
                  
                  /**
                   * Generated
                   */
                  void setFlag(const int& flag);
                  
                  /**
                   * Generated
                   */
                  bool getIsHangingNode() const;
                  
                  /**
                   * Generated
                   */
                  void setIsHangingNode(const bool& isHangingNode);
                  
                  /**
                   * Generated
                   */
                  RefinementControl getRefinementControl() const;
                  
                  /**
                   * Generated
                   */
                  void setRefinementControl(const RefinementControl& refinementControl);
                  
                  /**
                   * Generated
                   */
                  int getMaximumSubtreeHeight() const;
                  
                  /**
                   * Generated
                   */
                  void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                  
                  /**
                   * Generated
                   */
                  InsideOutsideDomain getInsideOutsideDomain() const;
                  
                  /**
                   * Generated
                   */
                  void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getX() const;
                  
                  /**
                   * Generated
                   */
                  void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                  
                  /**
                   * Generated
                   */
                  int getLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setLevel(const int& level);
                  
                  /**
                   * Generated
                   */
                  bool getBelongsToSubdomainBoundary() const;
                  
                  /**
                   * Generated
                   */
                  void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  
               };
               
            private: 
               PersistentRecords _persistentRecords;
               int _numberOfAdjacentRefinedCells;
               
            public:
               /**
                * Generated
                */
               SpacetreeGridVertex();
               
               /**
                * Generated
                */
               SpacetreeGridVertex(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
               
               /**
                * Generated
                */
               SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
               
               /**
                * Generated
                */
               virtual ~SpacetreeGridVertex();
               
               /**
                * Generated
                */
               double getP0() const;
               
               /**
                * Generated
                */
               void setP0(const double& P0);
               
               /**
                * Generated
                */
               double getP1() const;
               
               /**
                * Generated
                */
               void setP1(const double& P1);
               
               /**
                * Generated
                */
               double getF0() const;
               
               /**
                * Generated
                */
               void setF0(const double& F0);
               
               /**
                * Generated
                */
               double getF1() const;
               
               /**
                * Generated
                */
               void setF1(const double& F1);
               
               /**
                * Generated
                */
               double getG0() const;
               
               /**
                * Generated
                */
               void setG0(const double& G0);
               
               /**
                * Generated
                */
               double getG1() const;
               
               /**
                * Generated
                */
               void setG1(const double& G1);
               
               /**
                * Generated
                */
               double getU0() const;
               
               /**
                * Generated
                */
               void setU0(const double& U0);
               
               /**
                * Generated
                */
               double getU1() const;
               
               /**
                * Generated
                */
               void setU1(const double& U1);
               
               /**
                * Generated
                */
               double getU2() const;
               
               /**
                * Generated
                */
               void setU2(const double& U2);
               
               /**
                * Generated
                */
               double getV0() const;
               
               /**
                * Generated
                */
               void setV0(const double& V0);
               
               /**
                * Generated
                */
               double getV1() const;
               
               /**
                * Generated
                */
               void setV1(const double& V1);
               
               /**
                * Generated
                */
               double getV2() const;
               
               /**
                * Generated
                */
               void setV2(const double& V2);
               
               /**
                * Generated
                */
               int getFlag() const;
               
               /**
                * Generated
                */
               void setFlag(const int& flag);
               
               /**
                * Generated
                */
               bool getIsHangingNode() const;
               
               /**
                * Generated
                */
               void setIsHangingNode(const bool& isHangingNode);
               
               /**
                * Generated
                */
               RefinementControl getRefinementControl() const;
               
               /**
                * Generated
                */
               void setRefinementControl(const RefinementControl& refinementControl);
               
               /**
                * Generated
                */
               int getMaximumSubtreeHeight() const;
               
               /**
                * Generated
                */
               void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
               
               /**
                * Generated
                */
               int getNumberOfAdjacentRefinedCells() const;
               
               /**
                * Generated
                */
               void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
               
               /**
                * Generated
                */
               InsideOutsideDomain getInsideOutsideDomain() const;
               
               /**
                * Generated
                */
               void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS,double> getX() const;
               
               /**
                * Generated
                */
               void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
               
               /**
                * Generated
                */
               double getX(int elementIndex) const;
               
               /**
                * Generated
                */
               void setX(int elementIndex, const double& x);
               
               /**
                * Generated
                */
               int getLevel() const;
               
               /**
                * Generated
                */
               void setLevel(const int& level);
               
               /**
                * Generated
                */
               bool getBelongsToSubdomainBoundary() const;
               
               /**
                * Generated
                */
               void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
               
               /**
                * Generated
                */
               tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
               
               /**
                * Generated
                */
               void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
               
               /**
                * Generated
                */
               int getAdjacentRanks(int elementIndex) const;
               
               /**
                * Generated
                */
               void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
               
               /**
                * Generated
                */
               tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
               
               /**
                * Generated
                */
               void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
               
               /**
                * Generated
                */
               int getAdjacentRanksOnSublevel(int elementIndex) const;
               
               /**
                * Generated
                */
               void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
               
               /**
                * Generated
                */
               static std::string toString(const InsideOutsideDomain& param);
               
               /**
                * Generated
                */
               static std::string getInsideOutsideDomainMapping();
               
               /**
                * Generated
                */
               static std::string toString(const RefinementControl& param);
               
               /**
                * Generated
                */
               static std::string getRefinementControlMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               SpacetreeGridVertexPacked convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   */
                  static MPI_Datatype Datatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  void send(int destination, int tag);
                  
                  void receive(int source, int tag);
                  
                  static bool isMessageInQueue(int tag);
                  
                  int getSenderRank() const;
                  
            #endif
               
            };
            
            /**
             * @author This class was autogenerated by DaStGen
             * 		   DataStructureGenerator (DaStGen), 2007-2009,
             * 		   by Wolfgang Eckhardt
             *
             * 		   build date: 09-12-2010 17:47
             *
             * @date   06/05/2011 22:32
             */
            class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
               
               public:
                  
                  typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                  
                  typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                  
                  struct PersistentRecords {
                     double _P0;
                     double _P1;
                     double _F0;
                     double _F1;
                     double _G0;
                     double _G1;
                     double _U0;
                     double _U1;
                     double _U2;
                     double _V0;
                     double _V1;
                     double _V2;
                     int _flag;
                     int _maximumSubtreeHeight;
                     tarch::la::Vector<DIMENSIONS,double> _x;
                     int _level;
                     bool _belongsToSubdomainBoundary;
                     tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                     tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                     
                     /** mapping of records:
                     || Member 	|| startbit 	|| length
                      |  isHangingNode	| startbit 0	| #bits 1
                      |  refinementControl	| startbit 1	| #bits 3
                      |  insideOutsideDomain	| startbit 4	| #bits 2
                      */
                     long int _packedRecords0;
                     
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     double getP0() const;
                     
                     /**
                      * Generated
                      */
                     void setP0(const double& P0);
                     
                     /**
                      * Generated
                      */
                     double getP1() const;
                     
                     /**
                      * Generated
                      */
                     void setP1(const double& P1);
                     
                     /**
                      * Generated
                      */
                     double getF0() const;
                     
                     /**
                      * Generated
                      */
                     void setF0(const double& F0);
                     
                     /**
                      * Generated
                      */
                     double getF1() const;
                     
                     /**
                      * Generated
                      */
                     void setF1(const double& F1);
                     
                     /**
                      * Generated
                      */
                     double getG0() const;
                     
                     /**
                      * Generated
                      */
                     void setG0(const double& G0);
                     
                     /**
                      * Generated
                      */
                     double getG1() const;
                     
                     /**
                      * Generated
                      */
                     void setG1(const double& G1);
                     
                     /**
                      * Generated
                      */
                     double getU0() const;
                     
                     /**
                      * Generated
                      */
                     void setU0(const double& U0);
                     
                     /**
                      * Generated
                      */
                     double getU1() const;
                     
                     /**
                      * Generated
                      */
                     void setU1(const double& U1);
                     
                     /**
                      * Generated
                      */
                     double getU2() const;
                     
                     /**
                      * Generated
                      */
                     void setU2(const double& U2);
                     
                     /**
                      * Generated
                      */
                     double getV0() const;
                     
                     /**
                      * Generated
                      */
                     void setV0(const double& V0);
                     
                     /**
                      * Generated
                      */
                     double getV1() const;
                     
                     /**
                      * Generated
                      */
                     void setV1(const double& V1);
                     
                     /**
                      * Generated
                      */
                     double getV2() const;
                     
                     /**
                      * Generated
                      */
                     void setV2(const double& V2);
                     
                     /**
                      * Generated
                      */
                     int getFlag() const;
                     
                     /**
                      * Generated
                      */
                     void setFlag(const int& flag);
                     
                     /**
                      * Generated
                      */
                     bool getIsHangingNode() const;
                     
                     /**
                      * Generated
                      */
                     void setIsHangingNode(const bool& isHangingNode);
                     
                     /**
                      * Generated
                      */
                     RefinementControl getRefinementControl() const;
                     
                     /**
                      * Generated
                      */
                     void setRefinementControl(const RefinementControl& refinementControl);
                     
                     /**
                      * Generated
                      */
                     int getMaximumSubtreeHeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                     
                     /**
                      * Generated
                      */
                     InsideOutsideDomain getInsideOutsideDomain() const;
                     
                     /**
                      * Generated
                      */
                     void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS,double> getX() const;
                     
                     /**
                      * Generated
                      */
                     void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                     
                     /**
                      * Generated
                      */
                     int getLevel() const;
                     
                     /**
                      * Generated
                      */
                     void setLevel(const int& level);
                     
                     /**
                      * Generated
                      */
                     bool getBelongsToSubdomainBoundary() const;
                     
                     /**
                      * Generated
                      */
                     void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  int _numberOfAdjacentRefinedCells;
                  
               public:
                  /**
                   * Generated
                   */
                  SpacetreeGridVertexPacked();
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  virtual ~SpacetreeGridVertexPacked();
                  
                  /**
                   * Generated
                   */
                  double getP0() const;
                  
                  /**
                   * Generated
                   */
                  void setP0(const double& P0);
                  
                  /**
                   * Generated
                   */
                  double getP1() const;
                  
                  /**
                   * Generated
                   */
                  void setP1(const double& P1);
                  
                  /**
                   * Generated
                   */
                  double getF0() const;
                  
                  /**
                   * Generated
                   */
                  void setF0(const double& F0);
                  
                  /**
                   * Generated
                   */
                  double getF1() const;
                  
                  /**
                   * Generated
                   */
                  void setF1(const double& F1);
                  
                  /**
                   * Generated
                   */
                  double getG0() const;
                  
                  /**
                   * Generated
                   */
                  void setG0(const double& G0);
                  
                  /**
                   * Generated
                   */
                  double getG1() const;
                  
                  /**
                   * Generated
                   */
                  void setG1(const double& G1);
                  
                  /**
                   * Generated
                   */
                  double getU0() const;
                  
                  /**
                   * Generated
                   */
                  void setU0(const double& U0);
                  
                  /**
                   * Generated
                   */
                  double getU1() const;
                  
                  /**
                   * Generated
                   */
                  void setU1(const double& U1);
                  
                  /**
                   * Generated
                   */
                  double getU2() const;
                  
                  /**
                   * Generated
                   */
                  void setU2(const double& U2);
                  
                  /**
                   * Generated
                   */
                  double getV0() const;
                  
                  /**
                   * Generated
                   */
                  void setV0(const double& V0);
                  
                  /**
                   * Generated
                   */
                  double getV1() const;
                  
                  /**
                   * Generated
                   */
                  void setV1(const double& V1);
                  
                  /**
                   * Generated
                   */
                  double getV2() const;
                  
                  /**
                   * Generated
                   */
                  void setV2(const double& V2);
                  
                  /**
                   * Generated
                   */
                  int getFlag() const;
                  
                  /**
                   * Generated
                   */
                  void setFlag(const int& flag);
                  
                  /**
                   * Generated
                   */
                  bool getIsHangingNode() const;
                  
                  /**
                   * Generated
                   */
                  void setIsHangingNode(const bool& isHangingNode);
                  
                  /**
                   * Generated
                   */
                  RefinementControl getRefinementControl() const;
                  
                  /**
                   * Generated
                   */
                  void setRefinementControl(const RefinementControl& refinementControl);
                  
                  /**
                   * Generated
                   */
                  int getMaximumSubtreeHeight() const;
                  
                  /**
                   * Generated
                   */
                  void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                  
                  /**
                   * Generated
                   */
                  int getNumberOfAdjacentRefinedCells() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                  
                  /**
                   * Generated
                   */
                  InsideOutsideDomain getInsideOutsideDomain() const;
                  
                  /**
                   * Generated
                   */
                  void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getX() const;
                  
                  /**
                   * Generated
                   */
                  void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                  
                  /**
                   * Generated
                   */
                  double getX(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setX(int elementIndex, const double& x);
                  
                  /**
                   * Generated
                   */
                  int getLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setLevel(const int& level);
                  
                  /**
                   * Generated
                   */
                  bool getBelongsToSubdomainBoundary() const;
                  
                  /**
                   * Generated
                   */
                  void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                  
                  /**
                   * Generated
                   */
                  int getAdjacentRanks(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  int getAdjacentRanksOnSublevel(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const InsideOutsideDomain& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getInsideOutsideDomainMapping();
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const RefinementControl& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getRefinementControlMapping();
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  SpacetreeGridVertex convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      */
                     static MPI_Datatype Datatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag);
                     
                     void receive(int source, int tag);
                     
                     static bool isMessageInQueue(int tag);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               
            
         #elif defined(Parallel) && defined(Debug) && !defined(Asserts)
            /**
             * @author This class was autogenerated by DaStGen
             * 		   DataStructureGenerator (DaStGen), 2007-2009,
             * 		   by Wolfgang Eckhardt
             *
             * 		   build date: 09-12-2010 17:47
             *
             * @date   06/05/2011 22:32
             */
            class peano::applications::faxen::records::SpacetreeGridVertex { 
               
               public:
                  
                  typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
                  
                  enum InsideOutsideDomain {
                     Inside = 0, Boundary = 1, Outside = 2
                  };
                  
                  enum RefinementControl {
                     Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
                  };
                  
                  struct PersistentRecords {
                     double _P0;
                     double _P1;
                     double _F0;
                     double _F1;
                     double _G0;
                     double _G1;
                     double _U0;
                     double _U1;
                     double _U2;
                     double _V0;
                     double _V1;
                     double _V2;
                     int _flag;
                     bool _isHangingNode;
                     RefinementControl _refinementControl;
                     int _maximumSubtreeHeight;
                     InsideOutsideDomain _insideOutsideDomain;
                     tarch::la::Vector<DIMENSIONS,double> _x;
                     int _level;
                     bool _belongsToSubdomainBoundary;
                     tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                     tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     double getP0() const;
                     
                     /**
                      * Generated
                      */
                     void setP0(const double& P0);
                     
                     /**
                      * Generated
                      */
                     double getP1() const;
                     
                     /**
                      * Generated
                      */
                     void setP1(const double& P1);
                     
                     /**
                      * Generated
                      */
                     double getF0() const;
                     
                     /**
                      * Generated
                      */
                     void setF0(const double& F0);
                     
                     /**
                      * Generated
                      */
                     double getF1() const;
                     
                     /**
                      * Generated
                      */
                     void setF1(const double& F1);
                     
                     /**
                      * Generated
                      */
                     double getG0() const;
                     
                     /**
                      * Generated
                      */
                     void setG0(const double& G0);
                     
                     /**
                      * Generated
                      */
                     double getG1() const;
                     
                     /**
                      * Generated
                      */
                     void setG1(const double& G1);
                     
                     /**
                      * Generated
                      */
                     double getU0() const;
                     
                     /**
                      * Generated
                      */
                     void setU0(const double& U0);
                     
                     /**
                      * Generated
                      */
                     double getU1() const;
                     
                     /**
                      * Generated
                      */
                     void setU1(const double& U1);
                     
                     /**
                      * Generated
                      */
                     double getU2() const;
                     
                     /**
                      * Generated
                      */
                     void setU2(const double& U2);
                     
                     /**
                      * Generated
                      */
                     double getV0() const;
                     
                     /**
                      * Generated
                      */
                     void setV0(const double& V0);
                     
                     /**
                      * Generated
                      */
                     double getV1() const;
                     
                     /**
                      * Generated
                      */
                     void setV1(const double& V1);
                     
                     /**
                      * Generated
                      */
                     double getV2() const;
                     
                     /**
                      * Generated
                      */
                     void setV2(const double& V2);
                     
                     /**
                      * Generated
                      */
                     int getFlag() const;
                     
                     /**
                      * Generated
                      */
                     void setFlag(const int& flag);
                     
                     /**
                      * Generated
                      */
                     bool getIsHangingNode() const;
                     
                     /**
                      * Generated
                      */
                     void setIsHangingNode(const bool& isHangingNode);
                     
                     /**
                      * Generated
                      */
                     RefinementControl getRefinementControl() const;
                     
                     /**
                      * Generated
                      */
                     void setRefinementControl(const RefinementControl& refinementControl);
                     
                     /**
                      * Generated
                      */
                     int getMaximumSubtreeHeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                     
                     /**
                      * Generated
                      */
                     InsideOutsideDomain getInsideOutsideDomain() const;
                     
                     /**
                      * Generated
                      */
                     void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS,double> getX() const;
                     
                     /**
                      * Generated
                      */
                     void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                     
                     /**
                      * Generated
                      */
                     int getLevel() const;
                     
                     /**
                      * Generated
                      */
                     void setLevel(const int& level);
                     
                     /**
                      * Generated
                      */
                     bool getBelongsToSubdomainBoundary() const;
                     
                     /**
                      * Generated
                      */
                     void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  int _numberOfAdjacentRefinedCells;
                  
               public:
                  /**
                   * Generated
                   */
                  SpacetreeGridVertex();
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridVertex(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  virtual ~SpacetreeGridVertex();
                  
                  /**
                   * Generated
                   */
                  double getP0() const;
                  
                  /**
                   * Generated
                   */
                  void setP0(const double& P0);
                  
                  /**
                   * Generated
                   */
                  double getP1() const;
                  
                  /**
                   * Generated
                   */
                  void setP1(const double& P1);
                  
                  /**
                   * Generated
                   */
                  double getF0() const;
                  
                  /**
                   * Generated
                   */
                  void setF0(const double& F0);
                  
                  /**
                   * Generated
                   */
                  double getF1() const;
                  
                  /**
                   * Generated
                   */
                  void setF1(const double& F1);
                  
                  /**
                   * Generated
                   */
                  double getG0() const;
                  
                  /**
                   * Generated
                   */
                  void setG0(const double& G0);
                  
                  /**
                   * Generated
                   */
                  double getG1() const;
                  
                  /**
                   * Generated
                   */
                  void setG1(const double& G1);
                  
                  /**
                   * Generated
                   */
                  double getU0() const;
                  
                  /**
                   * Generated
                   */
                  void setU0(const double& U0);
                  
                  /**
                   * Generated
                   */
                  double getU1() const;
                  
                  /**
                   * Generated
                   */
                  void setU1(const double& U1);
                  
                  /**
                   * Generated
                   */
                  double getU2() const;
                  
                  /**
                   * Generated
                   */
                  void setU2(const double& U2);
                  
                  /**
                   * Generated
                   */
                  double getV0() const;
                  
                  /**
                   * Generated
                   */
                  void setV0(const double& V0);
                  
                  /**
                   * Generated
                   */
                  double getV1() const;
                  
                  /**
                   * Generated
                   */
                  void setV1(const double& V1);
                  
                  /**
                   * Generated
                   */
                  double getV2() const;
                  
                  /**
                   * Generated
                   */
                  void setV2(const double& V2);
                  
                  /**
                   * Generated
                   */
                  int getFlag() const;
                  
                  /**
                   * Generated
                   */
                  void setFlag(const int& flag);
                  
                  /**
                   * Generated
                   */
                  bool getIsHangingNode() const;
                  
                  /**
                   * Generated
                   */
                  void setIsHangingNode(const bool& isHangingNode);
                  
                  /**
                   * Generated
                   */
                  RefinementControl getRefinementControl() const;
                  
                  /**
                   * Generated
                   */
                  void setRefinementControl(const RefinementControl& refinementControl);
                  
                  /**
                   * Generated
                   */
                  int getMaximumSubtreeHeight() const;
                  
                  /**
                   * Generated
                   */
                  void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                  
                  /**
                   * Generated
                   */
                  int getNumberOfAdjacentRefinedCells() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                  
                  /**
                   * Generated
                   */
                  InsideOutsideDomain getInsideOutsideDomain() const;
                  
                  /**
                   * Generated
                   */
                  void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getX() const;
                  
                  /**
                   * Generated
                   */
                  void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                  
                  /**
                   * Generated
                   */
                  double getX(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setX(int elementIndex, const double& x);
                  
                  /**
                   * Generated
                   */
                  int getLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setLevel(const int& level);
                  
                  /**
                   * Generated
                   */
                  bool getBelongsToSubdomainBoundary() const;
                  
                  /**
                   * Generated
                   */
                  void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                  
                  /**
                   * Generated
                   */
                  int getAdjacentRanks(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  int getAdjacentRanksOnSublevel(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const InsideOutsideDomain& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getInsideOutsideDomainMapping();
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const RefinementControl& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getRefinementControlMapping();
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  SpacetreeGridVertexPacked convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      */
                     static MPI_Datatype Datatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag);
                     
                     void receive(int source, int tag);
                     
                     static bool isMessageInQueue(int tag);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               /**
                * @author This class was autogenerated by DaStGen
                * 		   DataStructureGenerator (DaStGen), 2007-2009,
                * 		   by Wolfgang Eckhardt
                *
                * 		   build date: 09-12-2010 17:47
                *
                * @date   06/05/2011 22:32
                */
               class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
                  
                  public:
                     
                     typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                     
                     typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                     
                     struct PersistentRecords {
                        double _P0;
                        double _P1;
                        double _F0;
                        double _F1;
                        double _G0;
                        double _G1;
                        double _U0;
                        double _U1;
                        double _U2;
                        double _V0;
                        double _V1;
                        double _V2;
                        int _flag;
                        int _maximumSubtreeHeight;
                        tarch::la::Vector<DIMENSIONS,double> _x;
                        int _level;
                        bool _belongsToSubdomainBoundary;
                        tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                        tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                        
                        /** mapping of records:
                        || Member 	|| startbit 	|| length
                         |  isHangingNode	| startbit 0	| #bits 1
                         |  refinementControl	| startbit 1	| #bits 3
                         |  insideOutsideDomain	| startbit 4	| #bits 2
                         */
                        long int _packedRecords0;
                        
                        /**
                         * Generated
                         */
                        PersistentRecords();
                        
                        /**
                         * Generated
                         */
                        PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        /**
                         * Generated
                         */
                        double getP0() const;
                        
                        /**
                         * Generated
                         */
                        void setP0(const double& P0);
                        
                        /**
                         * Generated
                         */
                        double getP1() const;
                        
                        /**
                         * Generated
                         */
                        void setP1(const double& P1);
                        
                        /**
                         * Generated
                         */
                        double getF0() const;
                        
                        /**
                         * Generated
                         */
                        void setF0(const double& F0);
                        
                        /**
                         * Generated
                         */
                        double getF1() const;
                        
                        /**
                         * Generated
                         */
                        void setF1(const double& F1);
                        
                        /**
                         * Generated
                         */
                        double getG0() const;
                        
                        /**
                         * Generated
                         */
                        void setG0(const double& G0);
                        
                        /**
                         * Generated
                         */
                        double getG1() const;
                        
                        /**
                         * Generated
                         */
                        void setG1(const double& G1);
                        
                        /**
                         * Generated
                         */
                        double getU0() const;
                        
                        /**
                         * Generated
                         */
                        void setU0(const double& U0);
                        
                        /**
                         * Generated
                         */
                        double getU1() const;
                        
                        /**
                         * Generated
                         */
                        void setU1(const double& U1);
                        
                        /**
                         * Generated
                         */
                        double getU2() const;
                        
                        /**
                         * Generated
                         */
                        void setU2(const double& U2);
                        
                        /**
                         * Generated
                         */
                        double getV0() const;
                        
                        /**
                         * Generated
                         */
                        void setV0(const double& V0);
                        
                        /**
                         * Generated
                         */
                        double getV1() const;
                        
                        /**
                         * Generated
                         */
                        void setV1(const double& V1);
                        
                        /**
                         * Generated
                         */
                        double getV2() const;
                        
                        /**
                         * Generated
                         */
                        void setV2(const double& V2);
                        
                        /**
                         * Generated
                         */
                        int getFlag() const;
                        
                        /**
                         * Generated
                         */
                        void setFlag(const int& flag);
                        
                        /**
                         * Generated
                         */
                        bool getIsHangingNode() const;
                        
                        /**
                         * Generated
                         */
                        void setIsHangingNode(const bool& isHangingNode);
                        
                        /**
                         * Generated
                         */
                        RefinementControl getRefinementControl() const;
                        
                        /**
                         * Generated
                         */
                        void setRefinementControl(const RefinementControl& refinementControl);
                        
                        /**
                         * Generated
                         */
                        int getMaximumSubtreeHeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                        
                        /**
                         * Generated
                         */
                        InsideOutsideDomain getInsideOutsideDomain() const;
                        
                        /**
                         * Generated
                         */
                        void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<DIMENSIONS,double> getX() const;
                        
                        /**
                         * Generated
                         */
                        void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                        
                        /**
                         * Generated
                         */
                        int getLevel() const;
                        
                        /**
                         * Generated
                         */
                        void setLevel(const int& level);
                        
                        /**
                         * Generated
                         */
                        bool getBelongsToSubdomainBoundary() const;
                        
                        /**
                         * Generated
                         */
                        void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        
                     };
                     
                  private: 
                     PersistentRecords _persistentRecords;
                     int _numberOfAdjacentRefinedCells;
                     
                  public:
                     /**
                      * Generated
                      */
                     SpacetreeGridVertexPacked();
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     virtual ~SpacetreeGridVertexPacked();
                     
                     /**
                      * Generated
                      */
                     double getP0() const;
                     
                     /**
                      * Generated
                      */
                     void setP0(const double& P0);
                     
                     /**
                      * Generated
                      */
                     double getP1() const;
                     
                     /**
                      * Generated
                      */
                     void setP1(const double& P1);
                     
                     /**
                      * Generated
                      */
                     double getF0() const;
                     
                     /**
                      * Generated
                      */
                     void setF0(const double& F0);
                     
                     /**
                      * Generated
                      */
                     double getF1() const;
                     
                     /**
                      * Generated
                      */
                     void setF1(const double& F1);
                     
                     /**
                      * Generated
                      */
                     double getG0() const;
                     
                     /**
                      * Generated
                      */
                     void setG0(const double& G0);
                     
                     /**
                      * Generated
                      */
                     double getG1() const;
                     
                     /**
                      * Generated
                      */
                     void setG1(const double& G1);
                     
                     /**
                      * Generated
                      */
                     double getU0() const;
                     
                     /**
                      * Generated
                      */
                     void setU0(const double& U0);
                     
                     /**
                      * Generated
                      */
                     double getU1() const;
                     
                     /**
                      * Generated
                      */
                     void setU1(const double& U1);
                     
                     /**
                      * Generated
                      */
                     double getU2() const;
                     
                     /**
                      * Generated
                      */
                     void setU2(const double& U2);
                     
                     /**
                      * Generated
                      */
                     double getV0() const;
                     
                     /**
                      * Generated
                      */
                     void setV0(const double& V0);
                     
                     /**
                      * Generated
                      */
                     double getV1() const;
                     
                     /**
                      * Generated
                      */
                     void setV1(const double& V1);
                     
                     /**
                      * Generated
                      */
                     double getV2() const;
                     
                     /**
                      * Generated
                      */
                     void setV2(const double& V2);
                     
                     /**
                      * Generated
                      */
                     int getFlag() const;
                     
                     /**
                      * Generated
                      */
                     void setFlag(const int& flag);
                     
                     /**
                      * Generated
                      */
                     bool getIsHangingNode() const;
                     
                     /**
                      * Generated
                      */
                     void setIsHangingNode(const bool& isHangingNode);
                     
                     /**
                      * Generated
                      */
                     RefinementControl getRefinementControl() const;
                     
                     /**
                      * Generated
                      */
                     void setRefinementControl(const RefinementControl& refinementControl);
                     
                     /**
                      * Generated
                      */
                     int getMaximumSubtreeHeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                     
                     /**
                      * Generated
                      */
                     int getNumberOfAdjacentRefinedCells() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                     
                     /**
                      * Generated
                      */
                     InsideOutsideDomain getInsideOutsideDomain() const;
                     
                     /**
                      * Generated
                      */
                     void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS,double> getX() const;
                     
                     /**
                      * Generated
                      */
                     void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                     
                     /**
                      * Generated
                      */
                     double getX(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setX(int elementIndex, const double& x);
                     
                     /**
                      * Generated
                      */
                     int getLevel() const;
                     
                     /**
                      * Generated
                      */
                     void setLevel(const int& level);
                     
                     /**
                      * Generated
                      */
                     bool getBelongsToSubdomainBoundary() const;
                     
                     /**
                      * Generated
                      */
                     void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                     
                     /**
                      * Generated
                      */
                     int getAdjacentRanks(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     int getAdjacentRanksOnSublevel(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const InsideOutsideDomain& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getInsideOutsideDomainMapping();
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const RefinementControl& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getRefinementControlMapping();
                     
                     /**
                      * Generated
                      */
                     std::string toString() const;
                     
                     /**
                      * Generated
                      */
                     void toString(std::ostream& out) const;
                     
                     
                     PersistentRecords getPersistentRecords() const;
                     /**
                      * Generated
                      */
                     SpacetreeGridVertex convert() const;
                     
                     
                  #ifdef Parallel
                     protected:
                        static tarch::logging::Log _log;
                        
                        int _senderRank;
                        
                     public:
                        
                        /**
                         * Global that represents the mpi datatype.
                         */
                        static MPI_Datatype Datatype;
                        
                        /**
                         * Initializes the data type for the mpi operations. Has to be called
                         * before the very first send or receive operation is called.
                         */
                        static void initDatatype();
                        
                        static void shutdownDatatype();
                        
                        void send(int destination, int tag);
                        
                        void receive(int source, int tag);
                        
                        static bool isMessageInQueue(int tag);
                        
                        int getSenderRank() const;
                        
                  #endif
                     
                  };
                  
                  
               
            #elif defined(Parallel) && !defined(Debug) && defined(Asserts)
               /**
                * @author This class was autogenerated by DaStGen
                * 		   DataStructureGenerator (DaStGen), 2007-2009,
                * 		   by Wolfgang Eckhardt
                *
                * 		   build date: 09-12-2010 17:47
                *
                * @date   06/05/2011 22:32
                */
               class peano::applications::faxen::records::SpacetreeGridVertex { 
                  
                  public:
                     
                     typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
                     
                     enum InsideOutsideDomain {
                        Inside = 0, Boundary = 1, Outside = 2
                     };
                     
                     enum RefinementControl {
                        Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
                     };
                     
                     struct PersistentRecords {
                        double _P0;
                        double _P1;
                        double _F0;
                        double _F1;
                        double _G0;
                        double _G1;
                        double _U0;
                        double _U1;
                        double _U2;
                        double _V0;
                        double _V1;
                        double _V2;
                        int _flag;
                        bool _isHangingNode;
                        RefinementControl _refinementControl;
                        int _maximumSubtreeHeight;
                        InsideOutsideDomain _insideOutsideDomain;
                        bool _belongsToSubdomainBoundary;
                        tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                        tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                        /**
                         * Generated
                         */
                        PersistentRecords();
                        
                        /**
                         * Generated
                         */
                        PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        /**
                         * Generated
                         */
                        double getP0() const;
                        
                        /**
                         * Generated
                         */
                        void setP0(const double& P0);
                        
                        /**
                         * Generated
                         */
                        double getP1() const;
                        
                        /**
                         * Generated
                         */
                        void setP1(const double& P1);
                        
                        /**
                         * Generated
                         */
                        double getF0() const;
                        
                        /**
                         * Generated
                         */
                        void setF0(const double& F0);
                        
                        /**
                         * Generated
                         */
                        double getF1() const;
                        
                        /**
                         * Generated
                         */
                        void setF1(const double& F1);
                        
                        /**
                         * Generated
                         */
                        double getG0() const;
                        
                        /**
                         * Generated
                         */
                        void setG0(const double& G0);
                        
                        /**
                         * Generated
                         */
                        double getG1() const;
                        
                        /**
                         * Generated
                         */
                        void setG1(const double& G1);
                        
                        /**
                         * Generated
                         */
                        double getU0() const;
                        
                        /**
                         * Generated
                         */
                        void setU0(const double& U0);
                        
                        /**
                         * Generated
                         */
                        double getU1() const;
                        
                        /**
                         * Generated
                         */
                        void setU1(const double& U1);
                        
                        /**
                         * Generated
                         */
                        double getU2() const;
                        
                        /**
                         * Generated
                         */
                        void setU2(const double& U2);
                        
                        /**
                         * Generated
                         */
                        double getV0() const;
                        
                        /**
                         * Generated
                         */
                        void setV0(const double& V0);
                        
                        /**
                         * Generated
                         */
                        double getV1() const;
                        
                        /**
                         * Generated
                         */
                        void setV1(const double& V1);
                        
                        /**
                         * Generated
                         */
                        double getV2() const;
                        
                        /**
                         * Generated
                         */
                        void setV2(const double& V2);
                        
                        /**
                         * Generated
                         */
                        int getFlag() const;
                        
                        /**
                         * Generated
                         */
                        void setFlag(const int& flag);
                        
                        /**
                         * Generated
                         */
                        bool getIsHangingNode() const;
                        
                        /**
                         * Generated
                         */
                        void setIsHangingNode(const bool& isHangingNode);
                        
                        /**
                         * Generated
                         */
                        RefinementControl getRefinementControl() const;
                        
                        /**
                         * Generated
                         */
                        void setRefinementControl(const RefinementControl& refinementControl);
                        
                        /**
                         * Generated
                         */
                        int getMaximumSubtreeHeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                        
                        /**
                         * Generated
                         */
                        InsideOutsideDomain getInsideOutsideDomain() const;
                        
                        /**
                         * Generated
                         */
                        void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                        
                        /**
                         * Generated
                         */
                        bool getBelongsToSubdomainBoundary() const;
                        
                        /**
                         * Generated
                         */
                        void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        
                     };
                     
                  private: 
                     PersistentRecords _persistentRecords;
                     int _numberOfAdjacentRefinedCells;
                     
                  public:
                     /**
                      * Generated
                      */
                     SpacetreeGridVertex();
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridVertex(const PersistentRecords& persistentRecords);
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     virtual ~SpacetreeGridVertex();
                     
                     /**
                      * Generated
                      */
                     double getP0() const;
                     
                     /**
                      * Generated
                      */
                     void setP0(const double& P0);
                     
                     /**
                      * Generated
                      */
                     double getP1() const;
                     
                     /**
                      * Generated
                      */
                     void setP1(const double& P1);
                     
                     /**
                      * Generated
                      */
                     double getF0() const;
                     
                     /**
                      * Generated
                      */
                     void setF0(const double& F0);
                     
                     /**
                      * Generated
                      */
                     double getF1() const;
                     
                     /**
                      * Generated
                      */
                     void setF1(const double& F1);
                     
                     /**
                      * Generated
                      */
                     double getG0() const;
                     
                     /**
                      * Generated
                      */
                     void setG0(const double& G0);
                     
                     /**
                      * Generated
                      */
                     double getG1() const;
                     
                     /**
                      * Generated
                      */
                     void setG1(const double& G1);
                     
                     /**
                      * Generated
                      */
                     double getU0() const;
                     
                     /**
                      * Generated
                      */
                     void setU0(const double& U0);
                     
                     /**
                      * Generated
                      */
                     double getU1() const;
                     
                     /**
                      * Generated
                      */
                     void setU1(const double& U1);
                     
                     /**
                      * Generated
                      */
                     double getU2() const;
                     
                     /**
                      * Generated
                      */
                     void setU2(const double& U2);
                     
                     /**
                      * Generated
                      */
                     double getV0() const;
                     
                     /**
                      * Generated
                      */
                     void setV0(const double& V0);
                     
                     /**
                      * Generated
                      */
                     double getV1() const;
                     
                     /**
                      * Generated
                      */
                     void setV1(const double& V1);
                     
                     /**
                      * Generated
                      */
                     double getV2() const;
                     
                     /**
                      * Generated
                      */
                     void setV2(const double& V2);
                     
                     /**
                      * Generated
                      */
                     int getFlag() const;
                     
                     /**
                      * Generated
                      */
                     void setFlag(const int& flag);
                     
                     /**
                      * Generated
                      */
                     bool getIsHangingNode() const;
                     
                     /**
                      * Generated
                      */
                     void setIsHangingNode(const bool& isHangingNode);
                     
                     /**
                      * Generated
                      */
                     RefinementControl getRefinementControl() const;
                     
                     /**
                      * Generated
                      */
                     void setRefinementControl(const RefinementControl& refinementControl);
                     
                     /**
                      * Generated
                      */
                     int getMaximumSubtreeHeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                     
                     /**
                      * Generated
                      */
                     int getNumberOfAdjacentRefinedCells() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                     
                     /**
                      * Generated
                      */
                     InsideOutsideDomain getInsideOutsideDomain() const;
                     
                     /**
                      * Generated
                      */
                     void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                     
                     /**
                      * Generated
                      */
                     bool getBelongsToSubdomainBoundary() const;
                     
                     /**
                      * Generated
                      */
                     void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                     
                     /**
                      * Generated
                      */
                     int getAdjacentRanks(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     int getAdjacentRanksOnSublevel(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const InsideOutsideDomain& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getInsideOutsideDomainMapping();
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const RefinementControl& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getRefinementControlMapping();
                     
                     /**
                      * Generated
                      */
                     std::string toString() const;
                     
                     /**
                      * Generated
                      */
                     void toString(std::ostream& out) const;
                     
                     
                     PersistentRecords getPersistentRecords() const;
                     /**
                      * Generated
                      */
                     SpacetreeGridVertexPacked convert() const;
                     
                     
                  #ifdef Parallel
                     protected:
                        static tarch::logging::Log _log;
                        
                        int _senderRank;
                        
                     public:
                        
                        /**
                         * Global that represents the mpi datatype.
                         */
                        static MPI_Datatype Datatype;
                        
                        /**
                         * Initializes the data type for the mpi operations. Has to be called
                         * before the very first send or receive operation is called.
                         */
                        static void initDatatype();
                        
                        static void shutdownDatatype();
                        
                        void send(int destination, int tag);
                        
                        void receive(int source, int tag);
                        
                        static bool isMessageInQueue(int tag);
                        
                        int getSenderRank() const;
                        
                  #endif
                     
                  };
                  
                  /**
                   * @author This class was autogenerated by DaStGen
                   * 		   DataStructureGenerator (DaStGen), 2007-2009,
                   * 		   by Wolfgang Eckhardt
                   *
                   * 		   build date: 09-12-2010 17:47
                   *
                   * @date   06/05/2011 22:32
                   */
                  class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
                     
                     public:
                        
                        typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                        
                        typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                        
                        struct PersistentRecords {
                           double _P0;
                           double _P1;
                           double _F0;
                           double _F1;
                           double _G0;
                           double _G1;
                           double _U0;
                           double _U1;
                           double _U2;
                           double _V0;
                           double _V1;
                           double _V2;
                           int _flag;
                           int _maximumSubtreeHeight;
                           bool _belongsToSubdomainBoundary;
                           tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                           tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                           
                           /** mapping of records:
                           || Member 	|| startbit 	|| length
                            |  isHangingNode	| startbit 0	| #bits 1
                            |  refinementControl	| startbit 1	| #bits 3
                            |  insideOutsideDomain	| startbit 4	| #bits 2
                            */
                           long int _packedRecords0;
                           
                           /**
                            * Generated
                            */
                           PersistentRecords();
                           
                           /**
                            * Generated
                            */
                           PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                           
                           /**
                            * Generated
                            */
                           double getP0() const;
                           
                           /**
                            * Generated
                            */
                           void setP0(const double& P0);
                           
                           /**
                            * Generated
                            */
                           double getP1() const;
                           
                           /**
                            * Generated
                            */
                           void setP1(const double& P1);
                           
                           /**
                            * Generated
                            */
                           double getF0() const;
                           
                           /**
                            * Generated
                            */
                           void setF0(const double& F0);
                           
                           /**
                            * Generated
                            */
                           double getF1() const;
                           
                           /**
                            * Generated
                            */
                           void setF1(const double& F1);
                           
                           /**
                            * Generated
                            */
                           double getG0() const;
                           
                           /**
                            * Generated
                            */
                           void setG0(const double& G0);
                           
                           /**
                            * Generated
                            */
                           double getG1() const;
                           
                           /**
                            * Generated
                            */
                           void setG1(const double& G1);
                           
                           /**
                            * Generated
                            */
                           double getU0() const;
                           
                           /**
                            * Generated
                            */
                           void setU0(const double& U0);
                           
                           /**
                            * Generated
                            */
                           double getU1() const;
                           
                           /**
                            * Generated
                            */
                           void setU1(const double& U1);
                           
                           /**
                            * Generated
                            */
                           double getU2() const;
                           
                           /**
                            * Generated
                            */
                           void setU2(const double& U2);
                           
                           /**
                            * Generated
                            */
                           double getV0() const;
                           
                           /**
                            * Generated
                            */
                           void setV0(const double& V0);
                           
                           /**
                            * Generated
                            */
                           double getV1() const;
                           
                           /**
                            * Generated
                            */
                           void setV1(const double& V1);
                           
                           /**
                            * Generated
                            */
                           double getV2() const;
                           
                           /**
                            * Generated
                            */
                           void setV2(const double& V2);
                           
                           /**
                            * Generated
                            */
                           int getFlag() const;
                           
                           /**
                            * Generated
                            */
                           void setFlag(const int& flag);
                           
                           /**
                            * Generated
                            */
                           bool getIsHangingNode() const;
                           
                           /**
                            * Generated
                            */
                           void setIsHangingNode(const bool& isHangingNode);
                           
                           /**
                            * Generated
                            */
                           RefinementControl getRefinementControl() const;
                           
                           /**
                            * Generated
                            */
                           void setRefinementControl(const RefinementControl& refinementControl);
                           
                           /**
                            * Generated
                            */
                           int getMaximumSubtreeHeight() const;
                           
                           /**
                            * Generated
                            */
                           void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                           
                           /**
                            * Generated
                            */
                           InsideOutsideDomain getInsideOutsideDomain() const;
                           
                           /**
                            * Generated
                            */
                           void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                           
                           /**
                            * Generated
                            */
                           bool getBelongsToSubdomainBoundary() const;
                           
                           /**
                            * Generated
                            */
                           void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                           
                           /**
                            * Generated
                            */
                           tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                           
                           /**
                            * Generated
                            */
                           void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                           
                           /**
                            * Generated
                            */
                           tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                           
                           /**
                            * Generated
                            */
                           void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                           
                           
                        };
                        
                     private: 
                        PersistentRecords _persistentRecords;
                        int _numberOfAdjacentRefinedCells;
                        
                     public:
                        /**
                         * Generated
                         */
                        SpacetreeGridVertexPacked();
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        /**
                         * Generated
                         */
                        virtual ~SpacetreeGridVertexPacked();
                        
                        /**
                         * Generated
                         */
                        double getP0() const;
                        
                        /**
                         * Generated
                         */
                        void setP0(const double& P0);
                        
                        /**
                         * Generated
                         */
                        double getP1() const;
                        
                        /**
                         * Generated
                         */
                        void setP1(const double& P1);
                        
                        /**
                         * Generated
                         */
                        double getF0() const;
                        
                        /**
                         * Generated
                         */
                        void setF0(const double& F0);
                        
                        /**
                         * Generated
                         */
                        double getF1() const;
                        
                        /**
                         * Generated
                         */
                        void setF1(const double& F1);
                        
                        /**
                         * Generated
                         */
                        double getG0() const;
                        
                        /**
                         * Generated
                         */
                        void setG0(const double& G0);
                        
                        /**
                         * Generated
                         */
                        double getG1() const;
                        
                        /**
                         * Generated
                         */
                        void setG1(const double& G1);
                        
                        /**
                         * Generated
                         */
                        double getU0() const;
                        
                        /**
                         * Generated
                         */
                        void setU0(const double& U0);
                        
                        /**
                         * Generated
                         */
                        double getU1() const;
                        
                        /**
                         * Generated
                         */
                        void setU1(const double& U1);
                        
                        /**
                         * Generated
                         */
                        double getU2() const;
                        
                        /**
                         * Generated
                         */
                        void setU2(const double& U2);
                        
                        /**
                         * Generated
                         */
                        double getV0() const;
                        
                        /**
                         * Generated
                         */
                        void setV0(const double& V0);
                        
                        /**
                         * Generated
                         */
                        double getV1() const;
                        
                        /**
                         * Generated
                         */
                        void setV1(const double& V1);
                        
                        /**
                         * Generated
                         */
                        double getV2() const;
                        
                        /**
                         * Generated
                         */
                        void setV2(const double& V2);
                        
                        /**
                         * Generated
                         */
                        int getFlag() const;
                        
                        /**
                         * Generated
                         */
                        void setFlag(const int& flag);
                        
                        /**
                         * Generated
                         */
                        bool getIsHangingNode() const;
                        
                        /**
                         * Generated
                         */
                        void setIsHangingNode(const bool& isHangingNode);
                        
                        /**
                         * Generated
                         */
                        RefinementControl getRefinementControl() const;
                        
                        /**
                         * Generated
                         */
                        void setRefinementControl(const RefinementControl& refinementControl);
                        
                        /**
                         * Generated
                         */
                        int getMaximumSubtreeHeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                        
                        /**
                         * Generated
                         */
                        int getNumberOfAdjacentRefinedCells() const;
                        
                        /**
                         * Generated
                         */
                        void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                        
                        /**
                         * Generated
                         */
                        InsideOutsideDomain getInsideOutsideDomain() const;
                        
                        /**
                         * Generated
                         */
                        void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                        
                        /**
                         * Generated
                         */
                        bool getBelongsToSubdomainBoundary() const;
                        
                        /**
                         * Generated
                         */
                        void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                        
                        /**
                         * Generated
                         */
                        int getAdjacentRanks(int elementIndex) const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                        
                        /**
                         * Generated
                         */
                        int getAdjacentRanksOnSublevel(int elementIndex) const;
                        
                        /**
                         * Generated
                         */
                        void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const InsideOutsideDomain& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getInsideOutsideDomainMapping();
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const RefinementControl& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getRefinementControlMapping();
                        
                        /**
                         * Generated
                         */
                        std::string toString() const;
                        
                        /**
                         * Generated
                         */
                        void toString(std::ostream& out) const;
                        
                        
                        PersistentRecords getPersistentRecords() const;
                        /**
                         * Generated
                         */
                        SpacetreeGridVertex convert() const;
                        
                        
                     #ifdef Parallel
                        protected:
                           static tarch::logging::Log _log;
                           
                           int _senderRank;
                           
                        public:
                           
                           /**
                            * Global that represents the mpi datatype.
                            */
                           static MPI_Datatype Datatype;
                           
                           /**
                            * Initializes the data type for the mpi operations. Has to be called
                            * before the very first send or receive operation is called.
                            */
                           static void initDatatype();
                           
                           static void shutdownDatatype();
                           
                           void send(int destination, int tag);
                           
                           void receive(int source, int tag);
                           
                           static bool isMessageInQueue(int tag);
                           
                           int getSenderRank() const;
                           
                     #endif
                        
                     };
                     
                     
                  
               #elif !defined(Parallel) && defined(Asserts) && defined(Debug)
                  /**
                   * @author This class was autogenerated by DaStGen
                   * 		   DataStructureGenerator (DaStGen), 2007-2009,
                   * 		   by Wolfgang Eckhardt
                   *
                   * 		   build date: 09-12-2010 17:47
                   *
                   * @date   06/05/2011 22:32
                   */
                  class peano::applications::faxen::records::SpacetreeGridVertex { 
                     
                     public:
                        
                        typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
                        
                        enum InsideOutsideDomain {
                           Inside = 0, Boundary = 1, Outside = 2
                        };
                        
                        enum RefinementControl {
                           Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
                        };
                        
                        struct PersistentRecords {
                           double _P0;
                           double _P1;
                           double _F0;
                           double _F1;
                           double _G0;
                           double _G1;
                           double _U0;
                           double _U1;
                           double _U2;
                           double _V0;
                           double _V1;
                           double _V2;
                           int _flag;
                           bool _isHangingNode;
                           RefinementControl _refinementControl;
                           int _maximumSubtreeHeight;
                           InsideOutsideDomain _insideOutsideDomain;
                           tarch::la::Vector<DIMENSIONS,double> _x;
                           int _level;
                           /**
                            * Generated
                            */
                           PersistentRecords();
                           
                           /**
                            * Generated
                            */
                           PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                           
                           /**
                            * Generated
                            */
                           double getP0() const;
                           
                           /**
                            * Generated
                            */
                           void setP0(const double& P0);
                           
                           /**
                            * Generated
                            */
                           double getP1() const;
                           
                           /**
                            * Generated
                            */
                           void setP1(const double& P1);
                           
                           /**
                            * Generated
                            */
                           double getF0() const;
                           
                           /**
                            * Generated
                            */
                           void setF0(const double& F0);
                           
                           /**
                            * Generated
                            */
                           double getF1() const;
                           
                           /**
                            * Generated
                            */
                           void setF1(const double& F1);
                           
                           /**
                            * Generated
                            */
                           double getG0() const;
                           
                           /**
                            * Generated
                            */
                           void setG0(const double& G0);
                           
                           /**
                            * Generated
                            */
                           double getG1() const;
                           
                           /**
                            * Generated
                            */
                           void setG1(const double& G1);
                           
                           /**
                            * Generated
                            */
                           double getU0() const;
                           
                           /**
                            * Generated
                            */
                           void setU0(const double& U0);
                           
                           /**
                            * Generated
                            */
                           double getU1() const;
                           
                           /**
                            * Generated
                            */
                           void setU1(const double& U1);
                           
                           /**
                            * Generated
                            */
                           double getU2() const;
                           
                           /**
                            * Generated
                            */
                           void setU2(const double& U2);
                           
                           /**
                            * Generated
                            */
                           double getV0() const;
                           
                           /**
                            * Generated
                            */
                           void setV0(const double& V0);
                           
                           /**
                            * Generated
                            */
                           double getV1() const;
                           
                           /**
                            * Generated
                            */
                           void setV1(const double& V1);
                           
                           /**
                            * Generated
                            */
                           double getV2() const;
                           
                           /**
                            * Generated
                            */
                           void setV2(const double& V2);
                           
                           /**
                            * Generated
                            */
                           int getFlag() const;
                           
                           /**
                            * Generated
                            */
                           void setFlag(const int& flag);
                           
                           /**
                            * Generated
                            */
                           bool getIsHangingNode() const;
                           
                           /**
                            * Generated
                            */
                           void setIsHangingNode(const bool& isHangingNode);
                           
                           /**
                            * Generated
                            */
                           RefinementControl getRefinementControl() const;
                           
                           /**
                            * Generated
                            */
                           void setRefinementControl(const RefinementControl& refinementControl);
                           
                           /**
                            * Generated
                            */
                           int getMaximumSubtreeHeight() const;
                           
                           /**
                            * Generated
                            */
                           void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                           
                           /**
                            * Generated
                            */
                           InsideOutsideDomain getInsideOutsideDomain() const;
                           
                           /**
                            * Generated
                            */
                           void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                           
                           /**
                            * Generated
                            */
                           tarch::la::Vector<DIMENSIONS,double> getX() const;
                           
                           /**
                            * Generated
                            */
                           void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                           
                           /**
                            * Generated
                            */
                           int getLevel() const;
                           
                           /**
                            * Generated
                            */
                           void setLevel(const int& level);
                           
                           
                        };
                        
                     private: 
                        PersistentRecords _persistentRecords;
                        int _numberOfAdjacentRefinedCells;
                        
                     public:
                        /**
                         * Generated
                         */
                        SpacetreeGridVertex();
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridVertex(const PersistentRecords& persistentRecords);
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                        
                        /**
                         * Generated
                         */
                        virtual ~SpacetreeGridVertex();
                        
                        /**
                         * Generated
                         */
                        double getP0() const;
                        
                        /**
                         * Generated
                         */
                        void setP0(const double& P0);
                        
                        /**
                         * Generated
                         */
                        double getP1() const;
                        
                        /**
                         * Generated
                         */
                        void setP1(const double& P1);
                        
                        /**
                         * Generated
                         */
                        double getF0() const;
                        
                        /**
                         * Generated
                         */
                        void setF0(const double& F0);
                        
                        /**
                         * Generated
                         */
                        double getF1() const;
                        
                        /**
                         * Generated
                         */
                        void setF1(const double& F1);
                        
                        /**
                         * Generated
                         */
                        double getG0() const;
                        
                        /**
                         * Generated
                         */
                        void setG0(const double& G0);
                        
                        /**
                         * Generated
                         */
                        double getG1() const;
                        
                        /**
                         * Generated
                         */
                        void setG1(const double& G1);
                        
                        /**
                         * Generated
                         */
                        double getU0() const;
                        
                        /**
                         * Generated
                         */
                        void setU0(const double& U0);
                        
                        /**
                         * Generated
                         */
                        double getU1() const;
                        
                        /**
                         * Generated
                         */
                        void setU1(const double& U1);
                        
                        /**
                         * Generated
                         */
                        double getU2() const;
                        
                        /**
                         * Generated
                         */
                        void setU2(const double& U2);
                        
                        /**
                         * Generated
                         */
                        double getV0() const;
                        
                        /**
                         * Generated
                         */
                        void setV0(const double& V0);
                        
                        /**
                         * Generated
                         */
                        double getV1() const;
                        
                        /**
                         * Generated
                         */
                        void setV1(const double& V1);
                        
                        /**
                         * Generated
                         */
                        double getV2() const;
                        
                        /**
                         * Generated
                         */
                        void setV2(const double& V2);
                        
                        /**
                         * Generated
                         */
                        int getFlag() const;
                        
                        /**
                         * Generated
                         */
                        void setFlag(const int& flag);
                        
                        /**
                         * Generated
                         */
                        bool getIsHangingNode() const;
                        
                        /**
                         * Generated
                         */
                        void setIsHangingNode(const bool& isHangingNode);
                        
                        /**
                         * Generated
                         */
                        RefinementControl getRefinementControl() const;
                        
                        /**
                         * Generated
                         */
                        void setRefinementControl(const RefinementControl& refinementControl);
                        
                        /**
                         * Generated
                         */
                        int getMaximumSubtreeHeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                        
                        /**
                         * Generated
                         */
                        int getNumberOfAdjacentRefinedCells() const;
                        
                        /**
                         * Generated
                         */
                        void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                        
                        /**
                         * Generated
                         */
                        InsideOutsideDomain getInsideOutsideDomain() const;
                        
                        /**
                         * Generated
                         */
                        void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<DIMENSIONS,double> getX() const;
                        
                        /**
                         * Generated
                         */
                        void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                        
                        /**
                         * Generated
                         */
                        double getX(int elementIndex) const;
                        
                        /**
                         * Generated
                         */
                        void setX(int elementIndex, const double& x);
                        
                        /**
                         * Generated
                         */
                        int getLevel() const;
                        
                        /**
                         * Generated
                         */
                        void setLevel(const int& level);
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const InsideOutsideDomain& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getInsideOutsideDomainMapping();
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const RefinementControl& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getRefinementControlMapping();
                        
                        /**
                         * Generated
                         */
                        std::string toString() const;
                        
                        /**
                         * Generated
                         */
                        void toString(std::ostream& out) const;
                        
                        
                        PersistentRecords getPersistentRecords() const;
                        /**
                         * Generated
                         */
                        SpacetreeGridVertexPacked convert() const;
                        
                        
                     #ifdef Parallel
                        protected:
                           static tarch::logging::Log _log;
                           
                           int _senderRank;
                           
                        public:
                           
                           /**
                            * Global that represents the mpi datatype.
                            */
                           static MPI_Datatype Datatype;
                           
                           /**
                            * Initializes the data type for the mpi operations. Has to be called
                            * before the very first send or receive operation is called.
                            */
                           static void initDatatype();
                           
                           static void shutdownDatatype();
                           
                           void send(int destination, int tag);
                           
                           void receive(int source, int tag);
                           
                           static bool isMessageInQueue(int tag);
                           
                           int getSenderRank() const;
                           
                     #endif
                        
                     };
                     
                     /**
                      * @author This class was autogenerated by DaStGen
                      * 		   DataStructureGenerator (DaStGen), 2007-2009,
                      * 		   by Wolfgang Eckhardt
                      *
                      * 		   build date: 09-12-2010 17:47
                      *
                      * @date   06/05/2011 22:32
                      */
                     class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
                        
                        public:
                           
                           typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                           
                           typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                           
                           struct PersistentRecords {
                              double _P0;
                              double _P1;
                              double _F0;
                              double _F1;
                              double _G0;
                              double _G1;
                              double _U0;
                              double _U1;
                              double _U2;
                              double _V0;
                              double _V1;
                              double _V2;
                              int _flag;
                              int _maximumSubtreeHeight;
                              tarch::la::Vector<DIMENSIONS,double> _x;
                              int _level;
                              
                              /** mapping of records:
                              || Member 	|| startbit 	|| length
                               |  isHangingNode	| startbit 0	| #bits 1
                               |  refinementControl	| startbit 1	| #bits 3
                               |  insideOutsideDomain	| startbit 4	| #bits 2
                               */
                              long int _packedRecords0;
                              
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                              
                              /**
                               * Generated
                               */
                              double getP0() const;
                              
                              /**
                               * Generated
                               */
                              void setP0(const double& P0);
                              
                              /**
                               * Generated
                               */
                              double getP1() const;
                              
                              /**
                               * Generated
                               */
                              void setP1(const double& P1);
                              
                              /**
                               * Generated
                               */
                              double getF0() const;
                              
                              /**
                               * Generated
                               */
                              void setF0(const double& F0);
                              
                              /**
                               * Generated
                               */
                              double getF1() const;
                              
                              /**
                               * Generated
                               */
                              void setF1(const double& F1);
                              
                              /**
                               * Generated
                               */
                              double getG0() const;
                              
                              /**
                               * Generated
                               */
                              void setG0(const double& G0);
                              
                              /**
                               * Generated
                               */
                              double getG1() const;
                              
                              /**
                               * Generated
                               */
                              void setG1(const double& G1);
                              
                              /**
                               * Generated
                               */
                              double getU0() const;
                              
                              /**
                               * Generated
                               */
                              void setU0(const double& U0);
                              
                              /**
                               * Generated
                               */
                              double getU1() const;
                              
                              /**
                               * Generated
                               */
                              void setU1(const double& U1);
                              
                              /**
                               * Generated
                               */
                              double getU2() const;
                              
                              /**
                               * Generated
                               */
                              void setU2(const double& U2);
                              
                              /**
                               * Generated
                               */
                              double getV0() const;
                              
                              /**
                               * Generated
                               */
                              void setV0(const double& V0);
                              
                              /**
                               * Generated
                               */
                              double getV1() const;
                              
                              /**
                               * Generated
                               */
                              void setV1(const double& V1);
                              
                              /**
                               * Generated
                               */
                              double getV2() const;
                              
                              /**
                               * Generated
                               */
                              void setV2(const double& V2);
                              
                              /**
                               * Generated
                               */
                              int getFlag() const;
                              
                              /**
                               * Generated
                               */
                              void setFlag(const int& flag);
                              
                              /**
                               * Generated
                               */
                              bool getIsHangingNode() const;
                              
                              /**
                               * Generated
                               */
                              void setIsHangingNode(const bool& isHangingNode);
                              
                              /**
                               * Generated
                               */
                              RefinementControl getRefinementControl() const;
                              
                              /**
                               * Generated
                               */
                              void setRefinementControl(const RefinementControl& refinementControl);
                              
                              /**
                               * Generated
                               */
                              int getMaximumSubtreeHeight() const;
                              
                              /**
                               * Generated
                               */
                              void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                              
                              /**
                               * Generated
                               */
                              InsideOutsideDomain getInsideOutsideDomain() const;
                              
                              /**
                               * Generated
                               */
                              void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                              
                              /**
                               * Generated
                               */
                              tarch::la::Vector<DIMENSIONS,double> getX() const;
                              
                              /**
                               * Generated
                               */
                              void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                              
                              /**
                               * Generated
                               */
                              int getLevel() const;
                              
                              /**
                               * Generated
                               */
                              void setLevel(const int& level);
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           int _numberOfAdjacentRefinedCells;
                           
                        public:
                           /**
                            * Generated
                            */
                           SpacetreeGridVertexPacked();
                           
                           /**
                            * Generated
                            */
                           SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                           
                           /**
                            * Generated
                            */
                           SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                           
                           /**
                            * Generated
                            */
                           virtual ~SpacetreeGridVertexPacked();
                           
                           /**
                            * Generated
                            */
                           double getP0() const;
                           
                           /**
                            * Generated
                            */
                           void setP0(const double& P0);
                           
                           /**
                            * Generated
                            */
                           double getP1() const;
                           
                           /**
                            * Generated
                            */
                           void setP1(const double& P1);
                           
                           /**
                            * Generated
                            */
                           double getF0() const;
                           
                           /**
                            * Generated
                            */
                           void setF0(const double& F0);
                           
                           /**
                            * Generated
                            */
                           double getF1() const;
                           
                           /**
                            * Generated
                            */
                           void setF1(const double& F1);
                           
                           /**
                            * Generated
                            */
                           double getG0() const;
                           
                           /**
                            * Generated
                            */
                           void setG0(const double& G0);
                           
                           /**
                            * Generated
                            */
                           double getG1() const;
                           
                           /**
                            * Generated
                            */
                           void setG1(const double& G1);
                           
                           /**
                            * Generated
                            */
                           double getU0() const;
                           
                           /**
                            * Generated
                            */
                           void setU0(const double& U0);
                           
                           /**
                            * Generated
                            */
                           double getU1() const;
                           
                           /**
                            * Generated
                            */
                           void setU1(const double& U1);
                           
                           /**
                            * Generated
                            */
                           double getU2() const;
                           
                           /**
                            * Generated
                            */
                           void setU2(const double& U2);
                           
                           /**
                            * Generated
                            */
                           double getV0() const;
                           
                           /**
                            * Generated
                            */
                           void setV0(const double& V0);
                           
                           /**
                            * Generated
                            */
                           double getV1() const;
                           
                           /**
                            * Generated
                            */
                           void setV1(const double& V1);
                           
                           /**
                            * Generated
                            */
                           double getV2() const;
                           
                           /**
                            * Generated
                            */
                           void setV2(const double& V2);
                           
                           /**
                            * Generated
                            */
                           int getFlag() const;
                           
                           /**
                            * Generated
                            */
                           void setFlag(const int& flag);
                           
                           /**
                            * Generated
                            */
                           bool getIsHangingNode() const;
                           
                           /**
                            * Generated
                            */
                           void setIsHangingNode(const bool& isHangingNode);
                           
                           /**
                            * Generated
                            */
                           RefinementControl getRefinementControl() const;
                           
                           /**
                            * Generated
                            */
                           void setRefinementControl(const RefinementControl& refinementControl);
                           
                           /**
                            * Generated
                            */
                           int getMaximumSubtreeHeight() const;
                           
                           /**
                            * Generated
                            */
                           void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                           
                           /**
                            * Generated
                            */
                           int getNumberOfAdjacentRefinedCells() const;
                           
                           /**
                            * Generated
                            */
                           void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                           
                           /**
                            * Generated
                            */
                           InsideOutsideDomain getInsideOutsideDomain() const;
                           
                           /**
                            * Generated
                            */
                           void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                           
                           /**
                            * Generated
                            */
                           tarch::la::Vector<DIMENSIONS,double> getX() const;
                           
                           /**
                            * Generated
                            */
                           void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                           
                           /**
                            * Generated
                            */
                           double getX(int elementIndex) const;
                           
                           /**
                            * Generated
                            */
                           void setX(int elementIndex, const double& x);
                           
                           /**
                            * Generated
                            */
                           int getLevel() const;
                           
                           /**
                            * Generated
                            */
                           void setLevel(const int& level);
                           
                           /**
                            * Generated
                            */
                           static std::string toString(const InsideOutsideDomain& param);
                           
                           /**
                            * Generated
                            */
                           static std::string getInsideOutsideDomainMapping();
                           
                           /**
                            * Generated
                            */
                           static std::string toString(const RefinementControl& param);
                           
                           /**
                            * Generated
                            */
                           static std::string getRefinementControlMapping();
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           SpacetreeGridVertex convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                              int _senderRank;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               */
                              static MPI_Datatype Datatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              void send(int destination, int tag);
                              
                              void receive(int source, int tag);
                              
                              static bool isMessageInQueue(int tag);
                              
                              int getSenderRank() const;
                              
                        #endif
                           
                        };
                        
                        
                     
                  #elif !defined(Debug) && !defined(Parallel) && defined(Asserts)
                     /**
                      * @author This class was autogenerated by DaStGen
                      * 		   DataStructureGenerator (DaStGen), 2007-2009,
                      * 		   by Wolfgang Eckhardt
                      *
                      * 		   build date: 09-12-2010 17:47
                      *
                      * @date   06/05/2011 22:32
                      */
                     class peano::applications::faxen::records::SpacetreeGridVertex { 
                        
                        public:
                           
                           typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
                           
                           enum InsideOutsideDomain {
                              Inside = 0, Boundary = 1, Outside = 2
                           };
                           
                           enum RefinementControl {
                              Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
                           };
                           
                           struct PersistentRecords {
                              double _P0;
                              double _P1;
                              double _F0;
                              double _F1;
                              double _G0;
                              double _G1;
                              double _U0;
                              double _U1;
                              double _U2;
                              double _V0;
                              double _V1;
                              double _V2;
                              int _flag;
                              bool _isHangingNode;
                              RefinementControl _refinementControl;
                              int _maximumSubtreeHeight;
                              InsideOutsideDomain _insideOutsideDomain;
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
                              
                              /**
                               * Generated
                               */
                              double getP0() const;
                              
                              /**
                               * Generated
                               */
                              void setP0(const double& P0);
                              
                              /**
                               * Generated
                               */
                              double getP1() const;
                              
                              /**
                               * Generated
                               */
                              void setP1(const double& P1);
                              
                              /**
                               * Generated
                               */
                              double getF0() const;
                              
                              /**
                               * Generated
                               */
                              void setF0(const double& F0);
                              
                              /**
                               * Generated
                               */
                              double getF1() const;
                              
                              /**
                               * Generated
                               */
                              void setF1(const double& F1);
                              
                              /**
                               * Generated
                               */
                              double getG0() const;
                              
                              /**
                               * Generated
                               */
                              void setG0(const double& G0);
                              
                              /**
                               * Generated
                               */
                              double getG1() const;
                              
                              /**
                               * Generated
                               */
                              void setG1(const double& G1);
                              
                              /**
                               * Generated
                               */
                              double getU0() const;
                              
                              /**
                               * Generated
                               */
                              void setU0(const double& U0);
                              
                              /**
                               * Generated
                               */
                              double getU1() const;
                              
                              /**
                               * Generated
                               */
                              void setU1(const double& U1);
                              
                              /**
                               * Generated
                               */
                              double getU2() const;
                              
                              /**
                               * Generated
                               */
                              void setU2(const double& U2);
                              
                              /**
                               * Generated
                               */
                              double getV0() const;
                              
                              /**
                               * Generated
                               */
                              void setV0(const double& V0);
                              
                              /**
                               * Generated
                               */
                              double getV1() const;
                              
                              /**
                               * Generated
                               */
                              void setV1(const double& V1);
                              
                              /**
                               * Generated
                               */
                              double getV2() const;
                              
                              /**
                               * Generated
                               */
                              void setV2(const double& V2);
                              
                              /**
                               * Generated
                               */
                              int getFlag() const;
                              
                              /**
                               * Generated
                               */
                              void setFlag(const int& flag);
                              
                              /**
                               * Generated
                               */
                              bool getIsHangingNode() const;
                              
                              /**
                               * Generated
                               */
                              void setIsHangingNode(const bool& isHangingNode);
                              
                              /**
                               * Generated
                               */
                              RefinementControl getRefinementControl() const;
                              
                              /**
                               * Generated
                               */
                              void setRefinementControl(const RefinementControl& refinementControl);
                              
                              /**
                               * Generated
                               */
                              int getMaximumSubtreeHeight() const;
                              
                              /**
                               * Generated
                               */
                              void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                              
                              /**
                               * Generated
                               */
                              InsideOutsideDomain getInsideOutsideDomain() const;
                              
                              /**
                               * Generated
                               */
                              void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           int _numberOfAdjacentRefinedCells;
                           
                        public:
                           /**
                            * Generated
                            */
                           SpacetreeGridVertex();
                           
                           /**
                            * Generated
                            */
                           SpacetreeGridVertex(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
                           
                           /**
                            * Generated
                            */
                           SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain);
                           
                           /**
                            * Generated
                            */
                           virtual ~SpacetreeGridVertex();
                           
                           /**
                            * Generated
                            */
                           double getP0() const;
                           
                           /**
                            * Generated
                            */
                           void setP0(const double& P0);
                           
                           /**
                            * Generated
                            */
                           double getP1() const;
                           
                           /**
                            * Generated
                            */
                           void setP1(const double& P1);
                           
                           /**
                            * Generated
                            */
                           double getF0() const;
                           
                           /**
                            * Generated
                            */
                           void setF0(const double& F0);
                           
                           /**
                            * Generated
                            */
                           double getF1() const;
                           
                           /**
                            * Generated
                            */
                           void setF1(const double& F1);
                           
                           /**
                            * Generated
                            */
                           double getG0() const;
                           
                           /**
                            * Generated
                            */
                           void setG0(const double& G0);
                           
                           /**
                            * Generated
                            */
                           double getG1() const;
                           
                           /**
                            * Generated
                            */
                           void setG1(const double& G1);
                           
                           /**
                            * Generated
                            */
                           double getU0() const;
                           
                           /**
                            * Generated
                            */
                           void setU0(const double& U0);
                           
                           /**
                            * Generated
                            */
                           double getU1() const;
                           
                           /**
                            * Generated
                            */
                           void setU1(const double& U1);
                           
                           /**
                            * Generated
                            */
                           double getU2() const;
                           
                           /**
                            * Generated
                            */
                           void setU2(const double& U2);
                           
                           /**
                            * Generated
                            */
                           double getV0() const;
                           
                           /**
                            * Generated
                            */
                           void setV0(const double& V0);
                           
                           /**
                            * Generated
                            */
                           double getV1() const;
                           
                           /**
                            * Generated
                            */
                           void setV1(const double& V1);
                           
                           /**
                            * Generated
                            */
                           double getV2() const;
                           
                           /**
                            * Generated
                            */
                           void setV2(const double& V2);
                           
                           /**
                            * Generated
                            */
                           int getFlag() const;
                           
                           /**
                            * Generated
                            */
                           void setFlag(const int& flag);
                           
                           /**
                            * Generated
                            */
                           bool getIsHangingNode() const;
                           
                           /**
                            * Generated
                            */
                           void setIsHangingNode(const bool& isHangingNode);
                           
                           /**
                            * Generated
                            */
                           RefinementControl getRefinementControl() const;
                           
                           /**
                            * Generated
                            */
                           void setRefinementControl(const RefinementControl& refinementControl);
                           
                           /**
                            * Generated
                            */
                           int getMaximumSubtreeHeight() const;
                           
                           /**
                            * Generated
                            */
                           void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                           
                           /**
                            * Generated
                            */
                           int getNumberOfAdjacentRefinedCells() const;
                           
                           /**
                            * Generated
                            */
                           void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                           
                           /**
                            * Generated
                            */
                           InsideOutsideDomain getInsideOutsideDomain() const;
                           
                           /**
                            * Generated
                            */
                           void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                           
                           /**
                            * Generated
                            */
                           static std::string toString(const InsideOutsideDomain& param);
                           
                           /**
                            * Generated
                            */
                           static std::string getInsideOutsideDomainMapping();
                           
                           /**
                            * Generated
                            */
                           static std::string toString(const RefinementControl& param);
                           
                           /**
                            * Generated
                            */
                           static std::string getRefinementControlMapping();
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           SpacetreeGridVertexPacked convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                              int _senderRank;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               */
                              static MPI_Datatype Datatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              void send(int destination, int tag);
                              
                              void receive(int source, int tag);
                              
                              static bool isMessageInQueue(int tag);
                              
                              int getSenderRank() const;
                              
                        #endif
                           
                        };
                        
                        /**
                         * @author This class was autogenerated by DaStGen
                         * 		   DataStructureGenerator (DaStGen), 2007-2009,
                         * 		   by Wolfgang Eckhardt
                         *
                         * 		   build date: 09-12-2010 17:47
                         *
                         * @date   06/05/2011 22:32
                         */
                        class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
                           
                           public:
                              
                              typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                              
                              typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                              
                              struct PersistentRecords {
                                 double _P0;
                                 double _P1;
                                 double _F0;
                                 double _F1;
                                 double _G0;
                                 double _G1;
                                 double _U0;
                                 double _U1;
                                 double _U2;
                                 double _V0;
                                 double _V1;
                                 double _V2;
                                 int _flag;
                                 int _maximumSubtreeHeight;
                                 
                                 /** mapping of records:
                                 || Member 	|| startbit 	|| length
                                  |  isHangingNode	| startbit 0	| #bits 1
                                  |  refinementControl	| startbit 1	| #bits 3
                                  |  insideOutsideDomain	| startbit 4	| #bits 2
                                  */
                                 long int _packedRecords0;
                                 
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords();
                                 
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP0(const double& P0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP1(const double& P1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF0(const double& F0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF1(const double& F1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG0(const double& G0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG1(const double& G1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU0(const double& U0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU1(const double& U1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU2(const double& U2);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV0(const double& V0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV1(const double& V1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV2(const double& V2);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getFlag() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setFlag(const int& flag);
                                 
                                 /**
                                  * Generated
                                  */
                                 bool getIsHangingNode() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setIsHangingNode(const bool& isHangingNode);
                                 
                                 /**
                                  * Generated
                                  */
                                 RefinementControl getRefinementControl() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setRefinementControl(const RefinementControl& refinementControl);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getMaximumSubtreeHeight() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                 
                                 /**
                                  * Generated
                                  */
                                 InsideOutsideDomain getInsideOutsideDomain() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                 
                                 
                              };
                              
                           private: 
                              PersistentRecords _persistentRecords;
                              int _numberOfAdjacentRefinedCells;
                              
                           public:
                              /**
                               * Generated
                               */
                              SpacetreeGridVertexPacked();
                              
                              /**
                               * Generated
                               */
                              SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                              
                              /**
                               * Generated
                               */
                              SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain);
                              
                              /**
                               * Generated
                               */
                              SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain);
                              
                              /**
                               * Generated
                               */
                              virtual ~SpacetreeGridVertexPacked();
                              
                              /**
                               * Generated
                               */
                              double getP0() const;
                              
                              /**
                               * Generated
                               */
                              void setP0(const double& P0);
                              
                              /**
                               * Generated
                               */
                              double getP1() const;
                              
                              /**
                               * Generated
                               */
                              void setP1(const double& P1);
                              
                              /**
                               * Generated
                               */
                              double getF0() const;
                              
                              /**
                               * Generated
                               */
                              void setF0(const double& F0);
                              
                              /**
                               * Generated
                               */
                              double getF1() const;
                              
                              /**
                               * Generated
                               */
                              void setF1(const double& F1);
                              
                              /**
                               * Generated
                               */
                              double getG0() const;
                              
                              /**
                               * Generated
                               */
                              void setG0(const double& G0);
                              
                              /**
                               * Generated
                               */
                              double getG1() const;
                              
                              /**
                               * Generated
                               */
                              void setG1(const double& G1);
                              
                              /**
                               * Generated
                               */
                              double getU0() const;
                              
                              /**
                               * Generated
                               */
                              void setU0(const double& U0);
                              
                              /**
                               * Generated
                               */
                              double getU1() const;
                              
                              /**
                               * Generated
                               */
                              void setU1(const double& U1);
                              
                              /**
                               * Generated
                               */
                              double getU2() const;
                              
                              /**
                               * Generated
                               */
                              void setU2(const double& U2);
                              
                              /**
                               * Generated
                               */
                              double getV0() const;
                              
                              /**
                               * Generated
                               */
                              void setV0(const double& V0);
                              
                              /**
                               * Generated
                               */
                              double getV1() const;
                              
                              /**
                               * Generated
                               */
                              void setV1(const double& V1);
                              
                              /**
                               * Generated
                               */
                              double getV2() const;
                              
                              /**
                               * Generated
                               */
                              void setV2(const double& V2);
                              
                              /**
                               * Generated
                               */
                              int getFlag() const;
                              
                              /**
                               * Generated
                               */
                              void setFlag(const int& flag);
                              
                              /**
                               * Generated
                               */
                              bool getIsHangingNode() const;
                              
                              /**
                               * Generated
                               */
                              void setIsHangingNode(const bool& isHangingNode);
                              
                              /**
                               * Generated
                               */
                              RefinementControl getRefinementControl() const;
                              
                              /**
                               * Generated
                               */
                              void setRefinementControl(const RefinementControl& refinementControl);
                              
                              /**
                               * Generated
                               */
                              int getMaximumSubtreeHeight() const;
                              
                              /**
                               * Generated
                               */
                              void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                              
                              /**
                               * Generated
                               */
                              int getNumberOfAdjacentRefinedCells() const;
                              
                              /**
                               * Generated
                               */
                              void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                              
                              /**
                               * Generated
                               */
                              InsideOutsideDomain getInsideOutsideDomain() const;
                              
                              /**
                               * Generated
                               */
                              void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                              
                              /**
                               * Generated
                               */
                              static std::string toString(const InsideOutsideDomain& param);
                              
                              /**
                               * Generated
                               */
                              static std::string getInsideOutsideDomainMapping();
                              
                              /**
                               * Generated
                               */
                              static std::string toString(const RefinementControl& param);
                              
                              /**
                               * Generated
                               */
                              static std::string getRefinementControlMapping();
                              
                              /**
                               * Generated
                               */
                              std::string toString() const;
                              
                              /**
                               * Generated
                               */
                              void toString(std::ostream& out) const;
                              
                              
                              PersistentRecords getPersistentRecords() const;
                              /**
                               * Generated
                               */
                              SpacetreeGridVertex convert() const;
                              
                              
                           #ifdef Parallel
                              protected:
                                 static tarch::logging::Log _log;
                                 
                                 int _senderRank;
                                 
                              public:
                                 
                                 /**
                                  * Global that represents the mpi datatype.
                                  */
                                 static MPI_Datatype Datatype;
                                 
                                 /**
                                  * Initializes the data type for the mpi operations. Has to be called
                                  * before the very first send or receive operation is called.
                                  */
                                 static void initDatatype();
                                 
                                 static void shutdownDatatype();
                                 
                                 void send(int destination, int tag);
                                 
                                 void receive(int source, int tag);
                                 
                                 static bool isMessageInQueue(int tag);
                                 
                                 int getSenderRank() const;
                                 
                           #endif
                              
                           };
                           
                           
                        
                     #elif !defined(Parallel) && defined(Debug) && !defined(Asserts)
                        /**
                         * @author This class was autogenerated by DaStGen
                         * 		   DataStructureGenerator (DaStGen), 2007-2009,
                         * 		   by Wolfgang Eckhardt
                         *
                         * 		   build date: 09-12-2010 17:47
                         *
                         * @date   06/05/2011 22:32
                         */
                        class peano::applications::faxen::records::SpacetreeGridVertex { 
                           
                           public:
                              
                              typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
                              
                              enum InsideOutsideDomain {
                                 Inside = 0, Boundary = 1, Outside = 2
                              };
                              
                              enum RefinementControl {
                                 Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
                              };
                              
                              struct PersistentRecords {
                                 double _P0;
                                 double _P1;
                                 double _F0;
                                 double _F1;
                                 double _G0;
                                 double _G1;
                                 double _U0;
                                 double _U1;
                                 double _U2;
                                 double _V0;
                                 double _V1;
                                 double _V2;
                                 int _flag;
                                 bool _isHangingNode;
                                 RefinementControl _refinementControl;
                                 int _maximumSubtreeHeight;
                                 InsideOutsideDomain _insideOutsideDomain;
                                 tarch::la::Vector<DIMENSIONS,double> _x;
                                 int _level;
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords();
                                 
                                 /**
                                  * Generated
                                  */
                                 PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP0(const double& P0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP1(const double& P1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF0(const double& F0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF1(const double& F1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG0(const double& G0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG1(const double& G1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU0(const double& U0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU1(const double& U1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU2(const double& U2);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV0(const double& V0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV1(const double& V1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV2(const double& V2);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getFlag() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setFlag(const int& flag);
                                 
                                 /**
                                  * Generated
                                  */
                                 bool getIsHangingNode() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setIsHangingNode(const bool& isHangingNode);
                                 
                                 /**
                                  * Generated
                                  */
                                 RefinementControl getRefinementControl() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setRefinementControl(const RefinementControl& refinementControl);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getMaximumSubtreeHeight() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                 
                                 /**
                                  * Generated
                                  */
                                 InsideOutsideDomain getInsideOutsideDomain() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                 
                                 /**
                                  * Generated
                                  */
                                 tarch::la::Vector<DIMENSIONS,double> getX() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getLevel() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setLevel(const int& level);
                                 
                                 
                              };
                              
                           private: 
                              PersistentRecords _persistentRecords;
                              int _numberOfAdjacentRefinedCells;
                              
                           public:
                              /**
                               * Generated
                               */
                              SpacetreeGridVertex();
                              
                              /**
                               * Generated
                               */
                              SpacetreeGridVertex(const PersistentRecords& persistentRecords);
                              
                              /**
                               * Generated
                               */
                              SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                              
                              /**
                               * Generated
                               */
                              SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                              
                              /**
                               * Generated
                               */
                              virtual ~SpacetreeGridVertex();
                              
                              /**
                               * Generated
                               */
                              double getP0() const;
                              
                              /**
                               * Generated
                               */
                              void setP0(const double& P0);
                              
                              /**
                               * Generated
                               */
                              double getP1() const;
                              
                              /**
                               * Generated
                               */
                              void setP1(const double& P1);
                              
                              /**
                               * Generated
                               */
                              double getF0() const;
                              
                              /**
                               * Generated
                               */
                              void setF0(const double& F0);
                              
                              /**
                               * Generated
                               */
                              double getF1() const;
                              
                              /**
                               * Generated
                               */
                              void setF1(const double& F1);
                              
                              /**
                               * Generated
                               */
                              double getG0() const;
                              
                              /**
                               * Generated
                               */
                              void setG0(const double& G0);
                              
                              /**
                               * Generated
                               */
                              double getG1() const;
                              
                              /**
                               * Generated
                               */
                              void setG1(const double& G1);
                              
                              /**
                               * Generated
                               */
                              double getU0() const;
                              
                              /**
                               * Generated
                               */
                              void setU0(const double& U0);
                              
                              /**
                               * Generated
                               */
                              double getU1() const;
                              
                              /**
                               * Generated
                               */
                              void setU1(const double& U1);
                              
                              /**
                               * Generated
                               */
                              double getU2() const;
                              
                              /**
                               * Generated
                               */
                              void setU2(const double& U2);
                              
                              /**
                               * Generated
                               */
                              double getV0() const;
                              
                              /**
                               * Generated
                               */
                              void setV0(const double& V0);
                              
                              /**
                               * Generated
                               */
                              double getV1() const;
                              
                              /**
                               * Generated
                               */
                              void setV1(const double& V1);
                              
                              /**
                               * Generated
                               */
                              double getV2() const;
                              
                              /**
                               * Generated
                               */
                              void setV2(const double& V2);
                              
                              /**
                               * Generated
                               */
                              int getFlag() const;
                              
                              /**
                               * Generated
                               */
                              void setFlag(const int& flag);
                              
                              /**
                               * Generated
                               */
                              bool getIsHangingNode() const;
                              
                              /**
                               * Generated
                               */
                              void setIsHangingNode(const bool& isHangingNode);
                              
                              /**
                               * Generated
                               */
                              RefinementControl getRefinementControl() const;
                              
                              /**
                               * Generated
                               */
                              void setRefinementControl(const RefinementControl& refinementControl);
                              
                              /**
                               * Generated
                               */
                              int getMaximumSubtreeHeight() const;
                              
                              /**
                               * Generated
                               */
                              void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                              
                              /**
                               * Generated
                               */
                              int getNumberOfAdjacentRefinedCells() const;
                              
                              /**
                               * Generated
                               */
                              void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                              
                              /**
                               * Generated
                               */
                              InsideOutsideDomain getInsideOutsideDomain() const;
                              
                              /**
                               * Generated
                               */
                              void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                              
                              /**
                               * Generated
                               */
                              tarch::la::Vector<DIMENSIONS,double> getX() const;
                              
                              /**
                               * Generated
                               */
                              void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                              
                              /**
                               * Generated
                               */
                              double getX(int elementIndex) const;
                              
                              /**
                               * Generated
                               */
                              void setX(int elementIndex, const double& x);
                              
                              /**
                               * Generated
                               */
                              int getLevel() const;
                              
                              /**
                               * Generated
                               */
                              void setLevel(const int& level);
                              
                              /**
                               * Generated
                               */
                              static std::string toString(const InsideOutsideDomain& param);
                              
                              /**
                               * Generated
                               */
                              static std::string getInsideOutsideDomainMapping();
                              
                              /**
                               * Generated
                               */
                              static std::string toString(const RefinementControl& param);
                              
                              /**
                               * Generated
                               */
                              static std::string getRefinementControlMapping();
                              
                              /**
                               * Generated
                               */
                              std::string toString() const;
                              
                              /**
                               * Generated
                               */
                              void toString(std::ostream& out) const;
                              
                              
                              PersistentRecords getPersistentRecords() const;
                              /**
                               * Generated
                               */
                              SpacetreeGridVertexPacked convert() const;
                              
                              
                           #ifdef Parallel
                              protected:
                                 static tarch::logging::Log _log;
                                 
                                 int _senderRank;
                                 
                              public:
                                 
                                 /**
                                  * Global that represents the mpi datatype.
                                  */
                                 static MPI_Datatype Datatype;
                                 
                                 /**
                                  * Initializes the data type for the mpi operations. Has to be called
                                  * before the very first send or receive operation is called.
                                  */
                                 static void initDatatype();
                                 
                                 static void shutdownDatatype();
                                 
                                 void send(int destination, int tag);
                                 
                                 void receive(int source, int tag);
                                 
                                 static bool isMessageInQueue(int tag);
                                 
                                 int getSenderRank() const;
                                 
                           #endif
                              
                           };
                           
                           /**
                            * @author This class was autogenerated by DaStGen
                            * 		   DataStructureGenerator (DaStGen), 2007-2009,
                            * 		   by Wolfgang Eckhardt
                            *
                            * 		   build date: 09-12-2010 17:47
                            *
                            * @date   06/05/2011 22:32
                            */
                           class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
                              
                              public:
                                 
                                 typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                                 
                                 typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                                 
                                 struct PersistentRecords {
                                    double _P0;
                                    double _P1;
                                    double _F0;
                                    double _F1;
                                    double _G0;
                                    double _G1;
                                    double _U0;
                                    double _U1;
                                    double _U2;
                                    double _V0;
                                    double _V1;
                                    double _V2;
                                    int _flag;
                                    int _maximumSubtreeHeight;
                                    tarch::la::Vector<DIMENSIONS,double> _x;
                                    int _level;
                                    
                                    /** mapping of records:
                                    || Member 	|| startbit 	|| length
                                     |  isHangingNode	| startbit 0	| #bits 1
                                     |  refinementControl	| startbit 1	| #bits 3
                                     |  insideOutsideDomain	| startbit 4	| #bits 2
                                     */
                                    long int _packedRecords0;
                                    
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords();
                                    
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getP0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setP0(const double& P0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getP1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setP1(const double& P1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getF0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setF0(const double& F0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getF1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setF1(const double& F1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getG0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setG0(const double& G0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getG1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setG1(const double& G1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU0(const double& U0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU1(const double& U1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU2() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU2(const double& U2);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV0(const double& V0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV1(const double& V1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV2() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV2(const double& V2);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getFlag() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setFlag(const int& flag);
                                    
                                    /**
                                     * Generated
                                     */
                                    bool getIsHangingNode() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setIsHangingNode(const bool& isHangingNode);
                                    
                                    /**
                                     * Generated
                                     */
                                    RefinementControl getRefinementControl() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setRefinementControl(const RefinementControl& refinementControl);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getMaximumSubtreeHeight() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                    
                                    /**
                                     * Generated
                                     */
                                    InsideOutsideDomain getInsideOutsideDomain() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                    
                                    /**
                                     * Generated
                                     */
                                    tarch::la::Vector<DIMENSIONS,double> getX() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getLevel() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setLevel(const int& level);
                                    
                                    
                                 };
                                 
                              private: 
                                 PersistentRecords _persistentRecords;
                                 int _numberOfAdjacentRefinedCells;
                                 
                              public:
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertexPacked();
                                 
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                                 
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                                 
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const tarch::la::Vector<DIMENSIONS,double>& x, const int& level);
                                 
                                 /**
                                  * Generated
                                  */
                                 virtual ~SpacetreeGridVertexPacked();
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP0(const double& P0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP1(const double& P1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF0(const double& F0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF1(const double& F1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG0(const double& G0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG1(const double& G1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU0(const double& U0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU1(const double& U1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU2(const double& U2);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV0(const double& V0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV1(const double& V1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV2(const double& V2);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getFlag() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setFlag(const int& flag);
                                 
                                 /**
                                  * Generated
                                  */
                                 bool getIsHangingNode() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setIsHangingNode(const bool& isHangingNode);
                                 
                                 /**
                                  * Generated
                                  */
                                 RefinementControl getRefinementControl() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setRefinementControl(const RefinementControl& refinementControl);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getMaximumSubtreeHeight() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getNumberOfAdjacentRefinedCells() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                                 
                                 /**
                                  * Generated
                                  */
                                 InsideOutsideDomain getInsideOutsideDomain() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                 
                                 /**
                                  * Generated
                                  */
                                 tarch::la::Vector<DIMENSIONS,double> getX() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setX(const tarch::la::Vector<DIMENSIONS,double>& x);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getX(int elementIndex) const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setX(int elementIndex, const double& x);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getLevel() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setLevel(const int& level);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string toString(const InsideOutsideDomain& param);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string getInsideOutsideDomainMapping();
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string toString(const RefinementControl& param);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string getRefinementControlMapping();
                                 
                                 /**
                                  * Generated
                                  */
                                 std::string toString() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void toString(std::ostream& out) const;
                                 
                                 
                                 PersistentRecords getPersistentRecords() const;
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertex convert() const;
                                 
                                 
                              #ifdef Parallel
                                 protected:
                                    static tarch::logging::Log _log;
                                    
                                    int _senderRank;
                                    
                                 public:
                                    
                                    /**
                                     * Global that represents the mpi datatype.
                                     */
                                    static MPI_Datatype Datatype;
                                    
                                    /**
                                     * Initializes the data type for the mpi operations. Has to be called
                                     * before the very first send or receive operation is called.
                                     */
                                    static void initDatatype();
                                    
                                    static void shutdownDatatype();
                                    
                                    void send(int destination, int tag);
                                    
                                    void receive(int source, int tag);
                                    
                                    static bool isMessageInQueue(int tag);
                                    
                                    int getSenderRank() const;
                                    
                              #endif
                                 
                              };
                              
                              
                           
                        #elif defined(Parallel) && !defined(Debug) && !defined(Asserts)
                           /**
                            * @author This class was autogenerated by DaStGen
                            * 		   DataStructureGenerator (DaStGen), 2007-2009,
                            * 		   by Wolfgang Eckhardt
                            *
                            * 		   build date: 09-12-2010 17:47
                            *
                            * @date   06/05/2011 22:32
                            */
                           class peano::applications::faxen::records::SpacetreeGridVertex { 
                              
                              public:
                                 
                                 typedef peano::applications::faxen::records::SpacetreeGridVertexPacked Packed;
                                 
                                 enum InsideOutsideDomain {
                                    Inside = 0, Boundary = 1, Outside = 2
                                 };
                                 
                                 enum RefinementControl {
                                    Unrefined = 0, Refined = 1, RefinementTriggered = 2, Refining = 3, EraseTriggered = 4, Erasing = 5
                                 };
                                 
                                 struct PersistentRecords {
                                    double _P0;
                                    double _P1;
                                    double _F0;
                                    double _F1;
                                    double _G0;
                                    double _G1;
                                    double _U0;
                                    double _U1;
                                    double _U2;
                                    double _V0;
                                    double _V1;
                                    double _V2;
                                    int _flag;
                                    bool _isHangingNode;
                                    RefinementControl _refinementControl;
                                    int _maximumSubtreeHeight;
                                    InsideOutsideDomain _insideOutsideDomain;
                                    bool _belongsToSubdomainBoundary;
                                    tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                                    tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords();
                                    
                                    /**
                                     * Generated
                                     */
                                    PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getP0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setP0(const double& P0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getP1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setP1(const double& P1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getF0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setF0(const double& F0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getF1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setF1(const double& F1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getG0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setG0(const double& G0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getG1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setG1(const double& G1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU0(const double& U0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU1(const double& U1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU2() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU2(const double& U2);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV0(const double& V0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV1(const double& V1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV2() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV2(const double& V2);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getFlag() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setFlag(const int& flag);
                                    
                                    /**
                                     * Generated
                                     */
                                    bool getIsHangingNode() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setIsHangingNode(const bool& isHangingNode);
                                    
                                    /**
                                     * Generated
                                     */
                                    RefinementControl getRefinementControl() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setRefinementControl(const RefinementControl& refinementControl);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getMaximumSubtreeHeight() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                    
                                    /**
                                     * Generated
                                     */
                                    InsideOutsideDomain getInsideOutsideDomain() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                    
                                    /**
                                     * Generated
                                     */
                                    bool getBelongsToSubdomainBoundary() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                                    
                                    /**
                                     * Generated
                                     */
                                    tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                                    
                                    /**
                                     * Generated
                                     */
                                    tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                    
                                    
                                 };
                                 
                              private: 
                                 PersistentRecords _persistentRecords;
                                 int _numberOfAdjacentRefinedCells;
                                 
                              public:
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertex();
                                 
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertex(const PersistentRecords& persistentRecords);
                                 
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                 
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertex(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                 
                                 /**
                                  * Generated
                                  */
                                 virtual ~SpacetreeGridVertex();
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP0(const double& P0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getP1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setP1(const double& P1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF0(const double& F0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getF1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setF1(const double& F1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG0(const double& G0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getG1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setG1(const double& G1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU0(const double& U0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU1(const double& U1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getU2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setU2(const double& U2);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV0() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV0(const double& V0);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV1() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV1(const double& V1);
                                 
                                 /**
                                  * Generated
                                  */
                                 double getV2() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setV2(const double& V2);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getFlag() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setFlag(const int& flag);
                                 
                                 /**
                                  * Generated
                                  */
                                 bool getIsHangingNode() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setIsHangingNode(const bool& isHangingNode);
                                 
                                 /**
                                  * Generated
                                  */
                                 RefinementControl getRefinementControl() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setRefinementControl(const RefinementControl& refinementControl);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getMaximumSubtreeHeight() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getNumberOfAdjacentRefinedCells() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                                 
                                 /**
                                  * Generated
                                  */
                                 InsideOutsideDomain getInsideOutsideDomain() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                 
                                 /**
                                  * Generated
                                  */
                                 bool getBelongsToSubdomainBoundary() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                                 
                                 /**
                                  * Generated
                                  */
                                 tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getAdjacentRanks(int elementIndex) const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                                 
                                 /**
                                  * Generated
                                  */
                                 tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                 
                                 /**
                                  * Generated
                                  */
                                 int getAdjacentRanksOnSublevel(int elementIndex) const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string toString(const InsideOutsideDomain& param);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string getInsideOutsideDomainMapping();
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string toString(const RefinementControl& param);
                                 
                                 /**
                                  * Generated
                                  */
                                 static std::string getRefinementControlMapping();
                                 
                                 /**
                                  * Generated
                                  */
                                 std::string toString() const;
                                 
                                 /**
                                  * Generated
                                  */
                                 void toString(std::ostream& out) const;
                                 
                                 
                                 PersistentRecords getPersistentRecords() const;
                                 /**
                                  * Generated
                                  */
                                 SpacetreeGridVertexPacked convert() const;
                                 
                                 
                              #ifdef Parallel
                                 protected:
                                    static tarch::logging::Log _log;
                                    
                                    int _senderRank;
                                    
                                 public:
                                    
                                    /**
                                     * Global that represents the mpi datatype.
                                     */
                                    static MPI_Datatype Datatype;
                                    
                                    /**
                                     * Initializes the data type for the mpi operations. Has to be called
                                     * before the very first send or receive operation is called.
                                     */
                                    static void initDatatype();
                                    
                                    static void shutdownDatatype();
                                    
                                    void send(int destination, int tag);
                                    
                                    void receive(int source, int tag);
                                    
                                    static bool isMessageInQueue(int tag);
                                    
                                    int getSenderRank() const;
                                    
                              #endif
                                 
                              };
                              
                              /**
                               * @author This class was autogenerated by DaStGen
                               * 		   DataStructureGenerator (DaStGen), 2007-2009,
                               * 		   by Wolfgang Eckhardt
                               *
                               * 		   build date: 09-12-2010 17:47
                               *
                               * @date   06/05/2011 22:32
                               */
                              class peano::applications::faxen::records::SpacetreeGridVertexPacked { 
                                 
                                 public:
                                    
                                    typedef peano::applications::faxen::records::SpacetreeGridVertex::InsideOutsideDomain InsideOutsideDomain;
                                    
                                    typedef peano::applications::faxen::records::SpacetreeGridVertex::RefinementControl RefinementControl;
                                    
                                    struct PersistentRecords {
                                       double _P0;
                                       double _P1;
                                       double _F0;
                                       double _F1;
                                       double _G0;
                                       double _G1;
                                       double _U0;
                                       double _U1;
                                       double _U2;
                                       double _V0;
                                       double _V1;
                                       double _V2;
                                       int _flag;
                                       int _maximumSubtreeHeight;
                                       bool _belongsToSubdomainBoundary;
                                       tarch::la::Vector<TWO_POWER_D,int> _adjacentRanks;
                                       tarch::la::Vector<TWO_POWER_D,int> _adjacentRanksOnSublevel;
                                       
                                       /** mapping of records:
                                       || Member 	|| startbit 	|| length
                                        |  isHangingNode	| startbit 0	| #bits 1
                                        |  refinementControl	| startbit 1	| #bits 3
                                        |  insideOutsideDomain	| startbit 4	| #bits 2
                                        */
                                       long int _packedRecords0;
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords();
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getP0() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setP0(const double& P0);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getP1() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setP1(const double& P1);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getF0() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setF0(const double& F0);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getF1() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setF1(const double& F1);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getG0() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setG0(const double& G0);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getG1() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setG1(const double& G1);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getU0() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setU0(const double& U0);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getU1() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setU1(const double& U1);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getU2() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setU2(const double& U2);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getV0() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setV0(const double& V0);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getV1() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setV1(const double& V1);
                                       
                                       /**
                                        * Generated
                                        */
                                       double getV2() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setV2(const double& V2);
                                       
                                       /**
                                        * Generated
                                        */
                                       int getFlag() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setFlag(const int& flag);
                                       
                                       /**
                                        * Generated
                                        */
                                       bool getIsHangingNode() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setIsHangingNode(const bool& isHangingNode);
                                       
                                       /**
                                        * Generated
                                        */
                                       RefinementControl getRefinementControl() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setRefinementControl(const RefinementControl& refinementControl);
                                       
                                       /**
                                        * Generated
                                        */
                                       int getMaximumSubtreeHeight() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                       
                                       /**
                                        * Generated
                                        */
                                       InsideOutsideDomain getInsideOutsideDomain() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                       
                                       /**
                                        * Generated
                                        */
                                       bool getBelongsToSubdomainBoundary() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                                       
                                       /**
                                        * Generated
                                        */
                                       tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                                       
                                       /**
                                        * Generated
                                        */
                                       tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                                       
                                       /**
                                        * Generated
                                        */
                                       void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                       
                                       
                                    };
                                    
                                 private: 
                                    PersistentRecords _persistentRecords;
                                    int _numberOfAdjacentRefinedCells;
                                    
                                 public:
                                    /**
                                     * Generated
                                     */
                                    SpacetreeGridVertexPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                    SpacetreeGridVertexPacked(const PersistentRecords& persistentRecords);
                                    
                                    /**
                                     * Generated
                                     */
                                    SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                    
                                    /**
                                     * Generated
                                     */
                                    SpacetreeGridVertexPacked(const double& P0, const double& P1, const double& F0, const double& F1, const double& G0, const double& G1, const double& U0, const double& U1, const double& U2, const double& V0, const double& V1, const double& V2, const int& flag, const bool& isHangingNode, const RefinementControl& refinementControl, const int& maximumSubtreeHeight, const int& numberOfAdjacentRefinedCells, const InsideOutsideDomain& insideOutsideDomain, const bool& belongsToSubdomainBoundary, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks, const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                    
                                    /**
                                     * Generated
                                     */
                                    virtual ~SpacetreeGridVertexPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                    double getP0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setP0(const double& P0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getP1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setP1(const double& P1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getF0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setF0(const double& F0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getF1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setF1(const double& F1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getG0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setG0(const double& G0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getG1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setG1(const double& G1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU0(const double& U0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU1(const double& U1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getU2() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setU2(const double& U2);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV0() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV0(const double& V0);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV1() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV1(const double& V1);
                                    
                                    /**
                                     * Generated
                                     */
                                    double getV2() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setV2(const double& V2);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getFlag() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setFlag(const int& flag);
                                    
                                    /**
                                     * Generated
                                     */
                                    bool getIsHangingNode() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setIsHangingNode(const bool& isHangingNode);
                                    
                                    /**
                                     * Generated
                                     */
                                    RefinementControl getRefinementControl() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setRefinementControl(const RefinementControl& refinementControl);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getMaximumSubtreeHeight() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setMaximumSubtreeHeight(const int& maximumSubtreeHeight);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getNumberOfAdjacentRefinedCells() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setNumberOfAdjacentRefinedCells(const int& numberOfAdjacentRefinedCells);
                                    
                                    /**
                                     * Generated
                                     */
                                    InsideOutsideDomain getInsideOutsideDomain() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setInsideOutsideDomain(const InsideOutsideDomain& insideOutsideDomain);
                                    
                                    /**
                                     * Generated
                                     */
                                    bool getBelongsToSubdomainBoundary() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setBelongsToSubdomainBoundary(const bool& belongsToSubdomainBoundary);
                                    
                                    /**
                                     * Generated
                                     */
                                    tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanks() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setAdjacentRanks(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanks);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getAdjacentRanks(int elementIndex) const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setAdjacentRanks(int elementIndex, const int& adjacentRanks);
                                    
                                    /**
                                     * Generated
                                     */
                                    tarch::la::Vector<TWO_POWER_D,int> getAdjacentRanksOnSublevel() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setAdjacentRanksOnSublevel(const tarch::la::Vector<TWO_POWER_D,int>& adjacentRanksOnSublevel);
                                    
                                    /**
                                     * Generated
                                     */
                                    int getAdjacentRanksOnSublevel(int elementIndex) const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void setAdjacentRanksOnSublevel(int elementIndex, const int& adjacentRanksOnSublevel);
                                    
                                    /**
                                     * Generated
                                     */
                                    static std::string toString(const InsideOutsideDomain& param);
                                    
                                    /**
                                     * Generated
                                     */
                                    static std::string getInsideOutsideDomainMapping();
                                    
                                    /**
                                     * Generated
                                     */
                                    static std::string toString(const RefinementControl& param);
                                    
                                    /**
                                     * Generated
                                     */
                                    static std::string getRefinementControlMapping();
                                    
                                    /**
                                     * Generated
                                     */
                                    std::string toString() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void toString(std::ostream& out) const;
                                    
                                    
                                    PersistentRecords getPersistentRecords() const;
                                    /**
                                     * Generated
                                     */
                                    SpacetreeGridVertex convert() const;
                                    
                                    
                                 #ifdef Parallel
                                    protected:
                                       static tarch::logging::Log _log;
                                       
                                       int _senderRank;
                                       
                                    public:
                                       
                                       /**
                                        * Global that represents the mpi datatype.
                                        */
                                       static MPI_Datatype Datatype;
                                       
                                       /**
                                        * Initializes the data type for the mpi operations. Has to be called
                                        * before the very first send or receive operation is called.
                                        */
                                       static void initDatatype();
                                       
                                       static void shutdownDatatype();
                                       
                                       void send(int destination, int tag);
                                       
                                       void receive(int source, int tag);
                                       
                                       static bool isMessageInQueue(int tag);
                                       
                                       int getSenderRank() const;
                                       
                                 #endif
                                    
                                 };
                                 
                                 
                              
                           #endif
                           
                           #endif
                           
