#ifndef CSVREADER_H_
#define CSVREADER_H_

#include <string>
#include <vector>

#include "tarch/logging/Log.h"

#include "strtk.hpp"

namespace peano {
  namespace applications {
    namespace shallowwater {
      namespace utils {
        class CsvReader;
      }
    }
  }
}

class peano::applications::shallowwater::utils::CsvReader {
  private:
    /**
     * Logging device.
     */
    static tarch::logging::Log _log;

    /**
     * Bathymetry vector - format: lon0, lat0, value0, ... , lonN, latN, bathymetryCalueN
     */
    std::vector<double> _bathymetry_deg;

    /**
     * Displacement vector - format lon0, lat0, value0, ... , lonN, latN, displacementValueN
     */
    std::vector<double> _displacement_deg;

    /**
     * _grid_size*_grid_size Vector (Matrix) which holds a 2 valued vector in each field [bathymetryValue, displacementValue]
     * position[0][0] corresponds to _grid_zero_lon, _grid_zero_lat
     * position[i][j] corresponds to _grid_zero_lon + _grid_length/_grid_size * i, _grid_zero_lat + _grid_length/_grid_size * j
     * position[_grid_size-1][_grid_size-1] corresponds to _grid_zero_lon + _grid_length, _grid_zero_lat + grid_length
     */
    std::vector< std::vector<double> > _grid;

    /**
     * Zero longitude (see _grid)
     */
    double _grid_zero_lon;

    /**
     * Zero latitude (see _grid)
     */
    double _grid_zero_lat;

    /**
     * Grid length in degree (see _grid)
     */
    double _grid_legth;

    /**
     * Grid size (see _grid)
     */
    int _grid_size;

    /**
     * lon/lat -> row/colum
     */
    void getGridPosition(const int &r, const std::vector<double> &inputGrid, int &row, int &column);

    /**
     * bathymetryFile -> _grid
     */
    void readBathymetryFile(const std::string bathymetry_file_name);

    /**
     * displacementFile -> _grid
     */
    void readDisplacementFile(const std::string displacement_file_name, const double &displacement_zero_lon, const double &displacement_zero_lat, const double &displacement_conv_dx, const double &displacement_conv_dy);

    /**
     * _bathymetry_deg -> _grid
     */
    void setBathymetryValues();

    /**
     * _displacement_def -> _grid
     */
    void setDisplacementValues();

  public:
    CsvReader();
    virtual ~CsvReader();

    /**
     * Read bathymetry and displacement files. (Temporal results  in _bathymetry_deg and _displacement_deg)
     *
     * Possible bathymetry sources:
     * (1) General Bathymetric Chart of the Oceans (GEBCO)
     *     GEBCO_08 Grid â€” a global 30 arc-second grid
     *     http://www.gebco.net/
     *     https://www.bodc.ac.uk/data/online_delivery/gebco/
     *
     * (2) Global Multi-Resolution Topography (GMRT)
     *     http://www.marine-geo.org/portals/gmrt/
     *     generated by:
     *     GeoMapApp - http://www.geomapapp.org/
     *
     * (3)GEODAS (GEOphysical DAta System)
     *    http://www.ngdc.noaa.gov/mgg/geodas/geodas.html
     *    http://www.ngdc.noaa.gov/mgg/gdas/gd_designagrid.html
     *
     * Possible displacement source:
     *   Coulomb 3.2 - Displacement
     *   http://earthquake.usgs.gov/research/modeling/coulomb/overview.php
     *
     * with corresponding data:
     *    http://earthquake.usgs.gov/earthquakes/eqinthenews/
     */
    void readCsvFiles(std::string bathymetry_file_name, std::string displacement_file_name, double displacement_zero_lon, double displacement_zero_lat);

    /**
     * Create the grid.
     */
    void createGrid(double zero_lon, double zero_lat, double length, int size);

    /**
     * Read a bathymetry value from the grid.
     */
    double getBathymetryValue(double lon, double lat);

    /**
     * Read a displacement value from the grid
     */
    double getDisplacementValue(double lon, double lat);
};

#endif
