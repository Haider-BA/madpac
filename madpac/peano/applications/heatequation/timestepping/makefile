# This is a makefile for Peano's heatequation component
# generated 2010 by the PeProt (Peano Prototyping) tool

# Include files
-include files.mk
-include compiler-variables.mk


# Set Dimension
# -------------
DIM=-DDim2
#DIM=-DDim3
#DIM=-DDim4


# Configure System
# ----------------
#INCLUDE_TBB=-I/work_fast/weinzier/tbb/include
INCLUDE_TBB=$(TBB_INC)
INCLUDE_MPI=-I/usr/include/mpi 
#INCLUDE_OMP=$(OMP_INC)
INCLUDE_OMP=-fopenmp
INCLUDE_SCICODE=-I/work_fast/weinzier/workspace/sciCoDE/third-party-libs/sciCoDE_Utils
INCLUDE_JAVA="-I/usr/lib/jvm/java-6-sun/include -I/usr/lib/jvm/java-6-sun/include/linux"


#LINK_TBB=-L/work_fast/weinzier/tbb/build/linux_intel64_gcc_cc4.4.3_libc2.11.1_kernel2.6.32_release -ltbb
#LINK_OMP=$(OMP_SHLIB)
LINK_OMP=-fopenmp
LINK_TBB=$(TBB_SHLIB)
LINK_MPI=-lpthread -lrt -lmpich


# Settings for the GNU Compiler (Debug Mode)
# ------------------------------------------
#CC=g++
#CFLAGS=-O0 -pedantic -pedantic-errors -Wall -Werror -Wstrict-aliasing -fstrict-aliasing -DDebug -DAsserts
#LFLAGS=
#EXECUTABLE=peano-heatequation-debug


# Settings for the GNU Compiler (Release Mode)
# --------------------------------------------
CC=g++
CFLAGS=-O3 -fstrict-aliasing -fno-rtti 
LFLAGS=
EXECUTABLE=peano-heatequation-release-d2


# Settings for the GNU Compiler (with sciCoDE)
# --------------------------------------------
#### CC=g++
# ## ## #CFLAGS=-I/usr/lib/jvm/java-6-sun/include -I/usr/lib/jvm/java-6-sun/include/linux  -fPIC -shared -Wl,-soname=$(EXECUTABLE_CCA)a
###### EXECUTABLE_CCA=libheatequation.so



# Settinsg for the Intel Compiler (Debug Mode)
# --------------------------------------------
#CC=icpc
#CFLAGS=-O0 -fstrict-aliasing -qpack_semantic=gnu -DDebug -DAsserts
#LFLAGS=


# Settinsg for the Intel Compiler (Release Mode)
# ----------------------------------------------
#CC=icpc
#CFLAGS=-fast -fstrict-aliasing -qpack_semantic=gnu 
#LFLAGS=-fast 


OBJECTS=$(SOURCES:.cpp=.o)


all: header


# @echo This is just a template. Please adopt your makefile before you invoke this target
#      exit
#       mkdir dist
#   cp $(EXECUTABLE) dist
#  cp src/peano/applications/heatequation/timestepping/cca/*.sidl dist
#        cp src/peano/applications/heatequation/timestepping/cca/*.xml dist
#        cd dist
#        zip heatequation.scicode-component $(EXECUTABLE) *.sidl *.xml


header:
	@echo  --- This is Peano 2 ---
	@echo \(C\) 2010 Technische Universitaet Muenchen
	@echo generated by the Peano Prototyping tool PeProt
	@echo author: Tobias Weinzierl
	@echo
	@echo Please call this makefile from the folder holding Peano\'s src directory. There,
	@echo type in
	@echo   make init
	@echo   make addtbb \(if you want TBB support\)
	@echo   make addomp \(if you want OpenMP support\)
	@echo   make addmpi \(if you want MPI support\)
	@echo   make addcca \(if you want to use Peano within sciCoDE\)
	@echo
	@echo Then, create your target with one of the following operations:
	@echo   make dist \(to create a tar with a basic version of your release\)
	@echo   make build \(or make build-cca\)
	@echo 
	@echo To speed up the build process, append an -j4 to your call with 4 being the 
	@echo number of your cores.

build: $(OBJECTS)
	$(CC) $(LFLAGS) $(LINKER_ARGUMENTS_FROM_FILE) $(OBJECTS) -o $(EXECUTABLE)
	@echo
	@echo build of Peano with component heatequation successful
	@echo visit Peano\'s homepage at http://www5.in.tum.de/peano

addfiles-preamble:
	rm -f files.mk
	rm -f compiler-variables.mk
	echo -n SOURCES= > files.mk
	echo -n "COMPILER_ARGUMENTS_FROM_FILE=\n" > compiler-variables.mk
	echo -n "LINKER_ARGUMENTS_FROM_FILE=\n" > compiler-variables.mk

addfiles-tarch:
	find src/tarch/compiler -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/configuration -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/irr -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/la -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/logging -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/utils -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/tests -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/plotter -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/multicore/*.cpp  -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/services -name '*.cpp' -printf '%p ' >> files.mk

addfiles-peano:
	find src/peano/utils -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/geometry/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/geometry/builtin -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/geometry/services -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/kernel/configurations -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/kernel/regulargrid  -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/kernel/spacetreegrid  -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/kernel/datatraversal  -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/kernel/stacks  -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/toolbox  -name '*.cpp' -printf '%p ' >> files.mk

addfiles-component:
	find src/*.cpp -printf '%p ' >> files.mk
	find src/peano/*.cpp -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/adapters/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/configurations/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/mappings/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/records/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/repositories/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/runners/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/applications/heatequation/timestepping/tests/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	find src/scenario/heatequation -name '*.cpp' -printf '%p ' >> files.mk


init: addfiles-preamble addfiles-tarch addfiles-peano addfiles-component

addtbb:
	find src/tarch/multicore/configurations -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/multicore/tbb -name '*.cpp' -printf '%p ' >> files.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=-DSharedTBB\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=$(INCLUDE_TBB)\n" >> compiler-variables.mk
	echo "LINKER_ARGUMENTS_FROM_FILE+=$(LINK_TBB)\n" >> compiler-variables.mk

addomp:
	find src/tarch/multicore/configurations -name '*.cpp' -printf '%p ' >> files.mk
	find src/tarch/multicore/openMP -name '*.cpp' -printf '%p ' >> files.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=-DSharedOMP\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=$(INCLUDE_OMP)\n" >> compiler-variables.mk
	echo "LINKER_ARGUMENTS_FROM_FILE+=$(LINK_OMP)\n" >> compiler-variables.mk


addmpi:
	find src/tarch/parallel -name '*.cpp' -printf '%p ' >> files.mk
	find src/peano/kernel/parallel -name '*.cpp' -printf '%p ' >> files.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=-DParallel\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=-Wno-long-long\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=$(INCLUDE_MPI)\n" >> compiler-variables.mk
	echo "LINKER_ARGUMENTS_FROM_FILE+=$(LINK_MPI)\n" >> compiler-variables.mk

addcca:
	find src/peano/applications/heatequation/timestepping/cca/scicode/*.cpp -name '*.cpp' -printf '%p ' >> files.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=-DCCA\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=-Wno-long-long\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=$(INCLUDE_SCICODE)\n" >> compiler-variables.mk
	echo "COMPILER_ARGUMENTS_FROM_FILE+=$(INCLUDE_JAVA)\n" >> compiler-variables.mk
	
dist: all
	tar -cf peano-heatequation.tar src/tarch src/peano/utils src/peano/geometry src/peano/kernel src/peano/applications/heatequation/timestepping src/*.cpp src/peano/*.cpp src/*.xml
	gzip peano-heatequation.tar

clean:
	rm -f $(EXECUTABLE)
	rm -f $(OBJECTS)


$(OBJECTS): %.o : %.cpp
	$(CC) $(DIM) $(CFLAGS) $(COMPILER_ARGUMENTS_FROM_FILE) -c -Isrc $< -o $@
