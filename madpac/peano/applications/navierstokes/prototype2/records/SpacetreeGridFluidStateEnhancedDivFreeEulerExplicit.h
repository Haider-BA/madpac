#ifndef _PEANO_APPLICATIONS_NAVIERSTOKES_PROTOTYPE2_RECORDS_SPACETREEGRIDFLUIDSTATEENHANCEDDIVFREEEULEREXPLICIT_H
#define _PEANO_APPLICATIONS_NAVIERSTOKES_PROTOTYPE2_RECORDS_SPACETREEGRIDFLUIDSTATEENHANCEDDIVFREEEULEREXPLICIT_H

#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>
#include "peano/utils/Globals.h"

namespace peano {
   namespace applications {
      namespace navierstokes {
         namespace prototype2 {
            namespace records {
               class SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit;
               class SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked;
            }
         }
      }
   }
}

#if defined(Parallel)
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 10-11-2010 16:05
    *
    * @date   31/01/2011 09:45
    */
   class peano::applications::navierstokes::prototype2::records::SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit { 
      
      public:
         
         typedef peano::applications::navierstokes::prototype2::records::SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked Packed;
         
         struct PersistentRecords {
            tarch::la::Vector<DIMENSIONS,double> _minMeshWidth;
            tarch::la::Vector<DIMENSIONS,double> _maxMeshWidth;
            double _numberOfInnerVertices;
            double _numberOfBoundaryVertices;
            double _numberOfOuterVertices;
            double _numberOfInnerCells;
            double _numberOfOuterCells;
            int _maxLevel;
            bool _hasRefined;
            bool _hasTriggeredRefinementForNextIteration;
            bool _hasCoarsened;
            bool _hasTriggeredCoarseningForNextIteration;
            bool _hasChangedVertexOrCellState;
            bool _isTraversalInverted;
            bool _deriveAdjacencyInformation;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted, const bool& deriveAdjacencyInformation);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
            
            /**
             * Generated
             */
            void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
            
            /**
             * Generated
             */
            void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
            
            /**
             * Generated
             */
            double getNumberOfInnerVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfInnerVertices(const double& numberOfInnerVertices);
            
            /**
             * Generated
             */
            double getNumberOfBoundaryVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
            
            /**
             * Generated
             */
            double getNumberOfOuterVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfOuterVertices(const double& numberOfOuterVertices);
            
            /**
             * Generated
             */
            double getNumberOfInnerCells() const;
            
            /**
             * Generated
             */
            void setNumberOfInnerCells(const double& numberOfInnerCells);
            
            /**
             * Generated
             */
            double getNumberOfOuterCells() const;
            
            /**
             * Generated
             */
            void setNumberOfOuterCells(const double& numberOfOuterCells);
            
            /**
             * Generated
             */
            int getMaxLevel() const;
            
            /**
             * Generated
             */
            void setMaxLevel(const int& maxLevel);
            
            /**
             * Generated
             */
            bool getHasRefined() const;
            
            /**
             * Generated
             */
            void setHasRefined(const bool& hasRefined);
            
            /**
             * Generated
             */
            bool getHasTriggeredRefinementForNextIteration() const;
            
            /**
             * Generated
             */
            void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
            
            /**
             * Generated
             */
            bool getHasCoarsened() const;
            
            /**
             * Generated
             */
            void setHasCoarsened(const bool& hasCoarsened);
            
            /**
             * Generated
             */
            bool getHasTriggeredCoarseningForNextIteration() const;
            
            /**
             * Generated
             */
            void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
            
            /**
             * Generated
             */
            bool getHasChangedVertexOrCellState() const;
            
            /**
             * Generated
             */
            void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
            
            /**
             * Generated
             */
            bool getIsTraversalInverted() const;
            
            /**
             * Generated
             */
            void setIsTraversalInverted(const bool& isTraversalInverted);
            
            /**
             * Generated
             */
            bool getDeriveAdjacencyInformation() const;
            
            /**
             * Generated
             */
            void setDeriveAdjacencyInformation(const bool& deriveAdjacencyInformation);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit();
         
         /**
          * Generated
          */
         SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted, const bool& deriveAdjacencyInformation);
         
         /**
          * Generated
          */
         virtual ~SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit();
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
         
         /**
          * Generated
          */
         void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
         
         /**
          * Generated
          */
         double getMinMeshWidth(int elementIndex) const;
         
         /**
          * Generated
          */
         void setMinMeshWidth(int elementIndex, const double& minMeshWidth);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
         
         /**
          * Generated
          */
         void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
         
         /**
          * Generated
          */
         double getMaxMeshWidth(int elementIndex) const;
         
         /**
          * Generated
          */
         void setMaxMeshWidth(int elementIndex, const double& maxMeshWidth);
         
         /**
          * Generated
          */
         double getNumberOfInnerVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfInnerVertices(const double& numberOfInnerVertices);
         
         /**
          * Generated
          */
         double getNumberOfBoundaryVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
         
         /**
          * Generated
          */
         double getNumberOfOuterVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfOuterVertices(const double& numberOfOuterVertices);
         
         /**
          * Generated
          */
         double getNumberOfInnerCells() const;
         
         /**
          * Generated
          */
         void setNumberOfInnerCells(const double& numberOfInnerCells);
         
         /**
          * Generated
          */
         double getNumberOfOuterCells() const;
         
         /**
          * Generated
          */
         void setNumberOfOuterCells(const double& numberOfOuterCells);
         
         /**
          * Generated
          */
         int getMaxLevel() const;
         
         /**
          * Generated
          */
         void setMaxLevel(const int& maxLevel);
         
         /**
          * Generated
          */
         bool getHasRefined() const;
         
         /**
          * Generated
          */
         void setHasRefined(const bool& hasRefined);
         
         /**
          * Generated
          */
         bool getHasTriggeredRefinementForNextIteration() const;
         
         /**
          * Generated
          */
         void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
         
         /**
          * Generated
          */
         bool getHasCoarsened() const;
         
         /**
          * Generated
          */
         void setHasCoarsened(const bool& hasCoarsened);
         
         /**
          * Generated
          */
         bool getHasTriggeredCoarseningForNextIteration() const;
         
         /**
          * Generated
          */
         void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
         
         /**
          * Generated
          */
         bool getHasChangedVertexOrCellState() const;
         
         /**
          * Generated
          */
         void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
         
         /**
          * Generated
          */
         bool getIsTraversalInverted() const;
         
         /**
          * Generated
          */
         void setIsTraversalInverted(const bool& isTraversalInverted);
         
         /**
          * Generated
          */
         bool getDeriveAdjacencyInformation() const;
         
         /**
          * Generated
          */
         void setDeriveAdjacencyInformation(const bool& deriveAdjacencyInformation);
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      /**
       * @author This class was autogenerated by DaStGen
       * 		   DataStructureGenerator (DaStGen), 2007-2009,
       * 		   by Wolfgang Eckhardt
       *
       * 		   build date: 10-11-2010 16:05
       *
       * @date   31/01/2011 09:45
       */
      class peano::applications::navierstokes::prototype2::records::SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked { 
         
         public:
            
            struct PersistentRecords {
               tarch::la::Vector<DIMENSIONS,double> _minMeshWidth;
               tarch::la::Vector<DIMENSIONS,double> _maxMeshWidth;
               double _numberOfInnerVertices;
               double _numberOfBoundaryVertices;
               double _numberOfOuterVertices;
               double _numberOfInnerCells;
               double _numberOfOuterCells;
               int _maxLevel;
               bool _isTraversalInverted;
               bool _deriveAdjacencyInformation;
               
               /** mapping of records:
               || Member 	|| startbit 	|| length
                |  hasRefined	| startbit 0	| #bits 1
                |  hasTriggeredRefinementForNextIteration	| startbit 1	| #bits 1
                |  hasCoarsened	| startbit 2	| #bits 1
                |  hasTriggeredCoarseningForNextIteration	| startbit 3	| #bits 1
                |  hasChangedVertexOrCellState	| startbit 4	| #bits 1
                */
               short int _packedRecords0;
               
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted, const bool& deriveAdjacencyInformation);
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
               
               /**
                * Generated
                */
               void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
               
               /**
                * Generated
                */
               void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
               
               /**
                * Generated
                */
               double getNumberOfInnerVertices() const;
               
               /**
                * Generated
                */
               void setNumberOfInnerVertices(const double& numberOfInnerVertices);
               
               /**
                * Generated
                */
               double getNumberOfBoundaryVertices() const;
               
               /**
                * Generated
                */
               void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
               
               /**
                * Generated
                */
               double getNumberOfOuterVertices() const;
               
               /**
                * Generated
                */
               void setNumberOfOuterVertices(const double& numberOfOuterVertices);
               
               /**
                * Generated
                */
               double getNumberOfInnerCells() const;
               
               /**
                * Generated
                */
               void setNumberOfInnerCells(const double& numberOfInnerCells);
               
               /**
                * Generated
                */
               double getNumberOfOuterCells() const;
               
               /**
                * Generated
                */
               void setNumberOfOuterCells(const double& numberOfOuterCells);
               
               /**
                * Generated
                */
               int getMaxLevel() const;
               
               /**
                * Generated
                */
               void setMaxLevel(const int& maxLevel);
               
               /**
                * Generated
                */
               bool getHasRefined() const;
               
               /**
                * Generated
                */
               void setHasRefined(const bool& hasRefined);
               
               /**
                * Generated
                */
               bool getHasTriggeredRefinementForNextIteration() const;
               
               /**
                * Generated
                */
               void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
               
               /**
                * Generated
                */
               bool getHasCoarsened() const;
               
               /**
                * Generated
                */
               void setHasCoarsened(const bool& hasCoarsened);
               
               /**
                * Generated
                */
               bool getHasTriggeredCoarseningForNextIteration() const;
               
               /**
                * Generated
                */
               void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
               
               /**
                * Generated
                */
               bool getHasChangedVertexOrCellState() const;
               
               /**
                * Generated
                */
               void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
               
               /**
                * Generated
                */
               bool getIsTraversalInverted() const;
               
               /**
                * Generated
                */
               void setIsTraversalInverted(const bool& isTraversalInverted);
               
               /**
                * Generated
                */
               bool getDeriveAdjacencyInformation() const;
               
               /**
                * Generated
                */
               void setDeriveAdjacencyInformation(const bool& deriveAdjacencyInformation);
               
               
            };
            
         private: 
            PersistentRecords _persistentRecords;
            
         public:
            /**
             * Generated
             */
            SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked();
            
            /**
             * Generated
             */
            SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted, const bool& deriveAdjacencyInformation);
            
            /**
             * Generated
             */
            virtual ~SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked();
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
            
            /**
             * Generated
             */
            void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
            
            /**
             * Generated
             */
            double getMinMeshWidth(int elementIndex) const;
            
            /**
             * Generated
             */
            void setMinMeshWidth(int elementIndex, const double& minMeshWidth);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
            
            /**
             * Generated
             */
            void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
            
            /**
             * Generated
             */
            double getMaxMeshWidth(int elementIndex) const;
            
            /**
             * Generated
             */
            void setMaxMeshWidth(int elementIndex, const double& maxMeshWidth);
            
            /**
             * Generated
             */
            double getNumberOfInnerVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfInnerVertices(const double& numberOfInnerVertices);
            
            /**
             * Generated
             */
            double getNumberOfBoundaryVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
            
            /**
             * Generated
             */
            double getNumberOfOuterVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfOuterVertices(const double& numberOfOuterVertices);
            
            /**
             * Generated
             */
            double getNumberOfInnerCells() const;
            
            /**
             * Generated
             */
            void setNumberOfInnerCells(const double& numberOfInnerCells);
            
            /**
             * Generated
             */
            double getNumberOfOuterCells() const;
            
            /**
             * Generated
             */
            void setNumberOfOuterCells(const double& numberOfOuterCells);
            
            /**
             * Generated
             */
            int getMaxLevel() const;
            
            /**
             * Generated
             */
            void setMaxLevel(const int& maxLevel);
            
            /**
             * Generated
             */
            bool getHasRefined() const;
            
            /**
             * Generated
             */
            void setHasRefined(const bool& hasRefined);
            
            /**
             * Generated
             */
            bool getHasTriggeredRefinementForNextIteration() const;
            
            /**
             * Generated
             */
            void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
            
            /**
             * Generated
             */
            bool getHasCoarsened() const;
            
            /**
             * Generated
             */
            void setHasCoarsened(const bool& hasCoarsened);
            
            /**
             * Generated
             */
            bool getHasTriggeredCoarseningForNextIteration() const;
            
            /**
             * Generated
             */
            void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
            
            /**
             * Generated
             */
            bool getHasChangedVertexOrCellState() const;
            
            /**
             * Generated
             */
            void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
            
            /**
             * Generated
             */
            bool getIsTraversalInverted() const;
            
            /**
             * Generated
             */
            void setIsTraversalInverted(const bool& isTraversalInverted);
            
            /**
             * Generated
             */
            bool getDeriveAdjacencyInformation() const;
            
            /**
             * Generated
             */
            void setDeriveAdjacencyInformation(const bool& deriveAdjacencyInformation);
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                */
               static MPI_Datatype Datatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               void send(int destination, int tag);
               
               void receive(int source, int tag);
               
               static bool isMessageInQueue(int tag);
               
               int getSenderRank() const;
               
         #endif
            
         };
         
         
      #elif !defined(Parallel)
         /**
          * @author This class was autogenerated by DaStGen
          * 		   DataStructureGenerator (DaStGen), 2007-2009,
          * 		   by Wolfgang Eckhardt
          *
          * 		   build date: 10-11-2010 16:05
          *
          * @date   31/01/2011 09:45
          */
         class peano::applications::navierstokes::prototype2::records::SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit { 
            
            public:
               
               typedef peano::applications::navierstokes::prototype2::records::SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked Packed;
               
               struct PersistentRecords {
                  tarch::la::Vector<DIMENSIONS,double> _minMeshWidth;
                  tarch::la::Vector<DIMENSIONS,double> _maxMeshWidth;
                  double _numberOfInnerVertices;
                  double _numberOfBoundaryVertices;
                  double _numberOfOuterVertices;
                  double _numberOfInnerCells;
                  double _numberOfOuterCells;
                  int _maxLevel;
                  bool _hasRefined;
                  bool _hasTriggeredRefinementForNextIteration;
                  bool _hasCoarsened;
                  bool _hasTriggeredCoarseningForNextIteration;
                  bool _hasChangedVertexOrCellState;
                  bool _isTraversalInverted;
                  /**
                   * Generated
                   */
                  PersistentRecords();
                  
                  /**
                   * Generated
                   */
                  PersistentRecords(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
                  
                  /**
                   * Generated
                   */
                  void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
                  
                  /**
                   * Generated
                   */
                  void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfInnerVertices() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfInnerVertices(const double& numberOfInnerVertices);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfBoundaryVertices() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfOuterVertices() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfOuterVertices(const double& numberOfOuterVertices);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfInnerCells() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfInnerCells(const double& numberOfInnerCells);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfOuterCells() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfOuterCells(const double& numberOfOuterCells);
                  
                  /**
                   * Generated
                   */
                  int getMaxLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setMaxLevel(const int& maxLevel);
                  
                  /**
                   * Generated
                   */
                  bool getHasRefined() const;
                  
                  /**
                   * Generated
                   */
                  void setHasRefined(const bool& hasRefined);
                  
                  /**
                   * Generated
                   */
                  bool getHasTriggeredRefinementForNextIteration() const;
                  
                  /**
                   * Generated
                   */
                  void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
                  
                  /**
                   * Generated
                   */
                  bool getHasCoarsened() const;
                  
                  /**
                   * Generated
                   */
                  void setHasCoarsened(const bool& hasCoarsened);
                  
                  /**
                   * Generated
                   */
                  bool getHasTriggeredCoarseningForNextIteration() const;
                  
                  /**
                   * Generated
                   */
                  void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
                  
                  /**
                   * Generated
                   */
                  bool getHasChangedVertexOrCellState() const;
                  
                  /**
                   * Generated
                   */
                  void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
                  
                  /**
                   * Generated
                   */
                  bool getIsTraversalInverted() const;
                  
                  /**
                   * Generated
                   */
                  void setIsTraversalInverted(const bool& isTraversalInverted);
                  
                  
               };
               
            private: 
               PersistentRecords _persistentRecords;
               
            public:
               /**
                * Generated
                */
               SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit();
               
               /**
                * Generated
                */
               SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted);
               
               /**
                * Generated
                */
               virtual ~SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit();
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
               
               /**
                * Generated
                */
               void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
               
               /**
                * Generated
                */
               double getMinMeshWidth(int elementIndex) const;
               
               /**
                * Generated
                */
               void setMinMeshWidth(int elementIndex, const double& minMeshWidth);
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
               
               /**
                * Generated
                */
               void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
               
               /**
                * Generated
                */
               double getMaxMeshWidth(int elementIndex) const;
               
               /**
                * Generated
                */
               void setMaxMeshWidth(int elementIndex, const double& maxMeshWidth);
               
               /**
                * Generated
                */
               double getNumberOfInnerVertices() const;
               
               /**
                * Generated
                */
               void setNumberOfInnerVertices(const double& numberOfInnerVertices);
               
               /**
                * Generated
                */
               double getNumberOfBoundaryVertices() const;
               
               /**
                * Generated
                */
               void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
               
               /**
                * Generated
                */
               double getNumberOfOuterVertices() const;
               
               /**
                * Generated
                */
               void setNumberOfOuterVertices(const double& numberOfOuterVertices);
               
               /**
                * Generated
                */
               double getNumberOfInnerCells() const;
               
               /**
                * Generated
                */
               void setNumberOfInnerCells(const double& numberOfInnerCells);
               
               /**
                * Generated
                */
               double getNumberOfOuterCells() const;
               
               /**
                * Generated
                */
               void setNumberOfOuterCells(const double& numberOfOuterCells);
               
               /**
                * Generated
                */
               int getMaxLevel() const;
               
               /**
                * Generated
                */
               void setMaxLevel(const int& maxLevel);
               
               /**
                * Generated
                */
               bool getHasRefined() const;
               
               /**
                * Generated
                */
               void setHasRefined(const bool& hasRefined);
               
               /**
                * Generated
                */
               bool getHasTriggeredRefinementForNextIteration() const;
               
               /**
                * Generated
                */
               void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
               
               /**
                * Generated
                */
               bool getHasCoarsened() const;
               
               /**
                * Generated
                */
               void setHasCoarsened(const bool& hasCoarsened);
               
               /**
                * Generated
                */
               bool getHasTriggeredCoarseningForNextIteration() const;
               
               /**
                * Generated
                */
               void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
               
               /**
                * Generated
                */
               bool getHasChangedVertexOrCellState() const;
               
               /**
                * Generated
                */
               void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
               
               /**
                * Generated
                */
               bool getIsTraversalInverted() const;
               
               /**
                * Generated
                */
               void setIsTraversalInverted(const bool& isTraversalInverted);
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   */
                  static MPI_Datatype Datatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  void send(int destination, int tag);
                  
                  void receive(int source, int tag);
                  
                  static bool isMessageInQueue(int tag);
                  
                  int getSenderRank() const;
                  
            #endif
               
            };
            
            /**
             * @author This class was autogenerated by DaStGen
             * 		   DataStructureGenerator (DaStGen), 2007-2009,
             * 		   by Wolfgang Eckhardt
             *
             * 		   build date: 10-11-2010 16:05
             *
             * @date   31/01/2011 09:45
             */
            class peano::applications::navierstokes::prototype2::records::SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked { 
               
               public:
                  
                  struct PersistentRecords {
                     tarch::la::Vector<DIMENSIONS,double> _minMeshWidth;
                     tarch::la::Vector<DIMENSIONS,double> _maxMeshWidth;
                     double _numberOfInnerVertices;
                     double _numberOfBoundaryVertices;
                     double _numberOfOuterVertices;
                     double _numberOfInnerCells;
                     double _numberOfOuterCells;
                     int _maxLevel;
                     bool _isTraversalInverted;
                     
                     /** mapping of records:
                     || Member 	|| startbit 	|| length
                      |  hasRefined	| startbit 0	| #bits 1
                      |  hasTriggeredRefinementForNextIteration	| startbit 1	| #bits 1
                      |  hasCoarsened	| startbit 2	| #bits 1
                      |  hasTriggeredCoarseningForNextIteration	| startbit 3	| #bits 1
                      |  hasChangedVertexOrCellState	| startbit 4	| #bits 1
                      */
                     short int _packedRecords0;
                     
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
                     
                     /**
                      * Generated
                      */
                     void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
                     
                     /**
                      * Generated
                      */
                     void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
                     
                     /**
                      * Generated
                      */
                     double getNumberOfInnerVertices() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfInnerVertices(const double& numberOfInnerVertices);
                     
                     /**
                      * Generated
                      */
                     double getNumberOfBoundaryVertices() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
                     
                     /**
                      * Generated
                      */
                     double getNumberOfOuterVertices() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfOuterVertices(const double& numberOfOuterVertices);
                     
                     /**
                      * Generated
                      */
                     double getNumberOfInnerCells() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfInnerCells(const double& numberOfInnerCells);
                     
                     /**
                      * Generated
                      */
                     double getNumberOfOuterCells() const;
                     
                     /**
                      * Generated
                      */
                     void setNumberOfOuterCells(const double& numberOfOuterCells);
                     
                     /**
                      * Generated
                      */
                     int getMaxLevel() const;
                     
                     /**
                      * Generated
                      */
                     void setMaxLevel(const int& maxLevel);
                     
                     /**
                      * Generated
                      */
                     bool getHasRefined() const;
                     
                     /**
                      * Generated
                      */
                     void setHasRefined(const bool& hasRefined);
                     
                     /**
                      * Generated
                      */
                     bool getHasTriggeredRefinementForNextIteration() const;
                     
                     /**
                      * Generated
                      */
                     void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
                     
                     /**
                      * Generated
                      */
                     bool getHasCoarsened() const;
                     
                     /**
                      * Generated
                      */
                     void setHasCoarsened(const bool& hasCoarsened);
                     
                     /**
                      * Generated
                      */
                     bool getHasTriggeredCoarseningForNextIteration() const;
                     
                     /**
                      * Generated
                      */
                     void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
                     
                     /**
                      * Generated
                      */
                     bool getHasChangedVertexOrCellState() const;
                     
                     /**
                      * Generated
                      */
                     void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
                     
                     /**
                      * Generated
                      */
                     bool getIsTraversalInverted() const;
                     
                     /**
                      * Generated
                      */
                     void setIsTraversalInverted(const bool& isTraversalInverted);
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked();
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const int& maxLevel, const bool& hasRefined, const bool& hasTriggeredRefinementForNextIteration, const bool& hasCoarsened, const bool& hasTriggeredCoarseningForNextIteration, const bool& hasChangedVertexOrCellState, const bool& isTraversalInverted);
                  
                  /**
                   * Generated
                   */
                  virtual ~SpacetreeGridFluidStateEnhancedDivFreeEulerExplicitPacked();
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getMinMeshWidth() const;
                  
                  /**
                   * Generated
                   */
                  void setMinMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& minMeshWidth);
                  
                  /**
                   * Generated
                   */
                  double getMinMeshWidth(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setMinMeshWidth(int elementIndex, const double& minMeshWidth);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS,double> getMaxMeshWidth() const;
                  
                  /**
                   * Generated
                   */
                  void setMaxMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& maxMeshWidth);
                  
                  /**
                   * Generated
                   */
                  double getMaxMeshWidth(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setMaxMeshWidth(int elementIndex, const double& maxMeshWidth);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfInnerVertices() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfInnerVertices(const double& numberOfInnerVertices);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfBoundaryVertices() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfOuterVertices() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfOuterVertices(const double& numberOfOuterVertices);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfInnerCells() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfInnerCells(const double& numberOfInnerCells);
                  
                  /**
                   * Generated
                   */
                  double getNumberOfOuterCells() const;
                  
                  /**
                   * Generated
                   */
                  void setNumberOfOuterCells(const double& numberOfOuterCells);
                  
                  /**
                   * Generated
                   */
                  int getMaxLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setMaxLevel(const int& maxLevel);
                  
                  /**
                   * Generated
                   */
                  bool getHasRefined() const;
                  
                  /**
                   * Generated
                   */
                  void setHasRefined(const bool& hasRefined);
                  
                  /**
                   * Generated
                   */
                  bool getHasTriggeredRefinementForNextIteration() const;
                  
                  /**
                   * Generated
                   */
                  void setHasTriggeredRefinementForNextIteration(const bool& hasTriggeredRefinementForNextIteration);
                  
                  /**
                   * Generated
                   */
                  bool getHasCoarsened() const;
                  
                  /**
                   * Generated
                   */
                  void setHasCoarsened(const bool& hasCoarsened);
                  
                  /**
                   * Generated
                   */
                  bool getHasTriggeredCoarseningForNextIteration() const;
                  
                  /**
                   * Generated
                   */
                  void setHasTriggeredCoarseningForNextIteration(const bool& hasTriggeredCoarseningForNextIteration);
                  
                  /**
                   * Generated
                   */
                  bool getHasChangedVertexOrCellState() const;
                  
                  /**
                   * Generated
                   */
                  void setHasChangedVertexOrCellState(const bool& hasChangedVertexOrCellState);
                  
                  /**
                   * Generated
                   */
                  bool getIsTraversalInverted() const;
                  
                  /**
                   * Generated
                   */
                  void setIsTraversalInverted(const bool& isTraversalInverted);
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  SpacetreeGridFluidStateEnhancedDivFreeEulerExplicit convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      */
                     static MPI_Datatype Datatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag);
                     
                     void receive(int source, int tag);
                     
                     static bool isMessageInQueue(int tag);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               
            
         #endif
         
         #endif
         
