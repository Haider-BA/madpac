#ifndef _PEANO_APPLICATIONS_NAVIERSTOKES_PROTOTYPE1_RECORDS_REGULARGRIDFLUIDCELLENHANCEDDIVFREEEULEREXPLICIT_H
#define _PEANO_APPLICATIONS_NAVIERSTOKES_PROTOTYPE1_RECORDS_REGULARGRIDFLUIDCELLENHANCEDDIVFREEEULEREXPLICIT_H

#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>
#include "peano/utils/Globals.h"
#include "peano/applications/navierstokes/prototype1/NSEGlobals.h"

namespace peano {
   namespace applications {
      namespace navierstokes {
         namespace prototype1 {
            namespace records {
               class RegularGridFluidCellEnhancedDivFreeEulerExplicit;
               class RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked;
            }
         }
      }
   }
}

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 09-12-2010 17:47
 *
 * @date   11/07/2011 10:57
 */
class peano::applications::navierstokes::prototype1::records::RegularGridFluidCellEnhancedDivFreeEulerExplicit { 
   
   public:
      
      typedef peano::applications::navierstokes::prototype1::records::RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked Packed;
      
      enum FluidCellType {
         INNER = 0, NOT_INNER = 1
      };
      
      struct PersistentRecords {
         FluidCellType _fluidCellType;
         double _p;
         double _rhsPPE;
         double _residuum;
         bool _isInside;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const FluidCellType& fluidCellType, const double& p, const double& rhsPPE, const double& residuum, const bool& isInside);
         
         /**
          * Generated
          */
         FluidCellType getFluidCellType() const;
         
         /**
          * Generated
          */
         void setFluidCellType(const FluidCellType& fluidCellType);
         
         /**
          * Generated
          */
         double getP() const;
         
         /**
          * Generated
          */
         void setP(const double& p);
         
         /**
          * Generated
          */
         double getRhsPPE() const;
         
         /**
          * Generated
          */
         void setRhsPPE(const double& rhsPPE);
         
         /**
          * Generated
          */
         double getResiduum() const;
         
         /**
          * Generated
          */
         void setResiduum(const double& residuum);
         
         /**
          * Generated
          */
         bool getIsInside() const;
         
         /**
          * Generated
          */
         void setIsInside(const bool& isInside);
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      RegularGridFluidCellEnhancedDivFreeEulerExplicit();
      
      /**
       * Generated
       */
      RegularGridFluidCellEnhancedDivFreeEulerExplicit(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      RegularGridFluidCellEnhancedDivFreeEulerExplicit(const FluidCellType& fluidCellType, const double& p, const double& rhsPPE, const double& residuum, const bool& isInside);
      
      /**
       * Generated
       */
      virtual ~RegularGridFluidCellEnhancedDivFreeEulerExplicit();
      
      /**
       * Generated
       */
      FluidCellType getFluidCellType() const;
      
      /**
       * Generated
       */
      void setFluidCellType(const FluidCellType& fluidCellType);
      
      /**
       * Generated
       */
      double getP() const;
      
      /**
       * Generated
       */
      void setP(const double& p);
      
      /**
       * Generated
       */
      double getRhsPPE() const;
      
      /**
       * Generated
       */
      void setRhsPPE(const double& rhsPPE);
      
      /**
       * Generated
       */
      double getResiduum() const;
      
      /**
       * Generated
       */
      void setResiduum(const double& residuum);
      
      /**
       * Generated
       */
      bool getIsInside() const;
      
      /**
       * Generated
       */
      void setIsInside(const bool& isInside);
      
      /**
       * Generated
       */
      static std::string toString(const FluidCellType& param);
      
      /**
       * Generated
       */
      static std::string getFluidCellTypeMapping();
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          */
         static MPI_Datatype Datatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag);
         
         void receive(int source, int tag);
         
         static bool isMessageInQueue(int tag);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 09-12-2010 17:47
    *
    * @date   11/07/2011 10:57
    */
   class peano::applications::navierstokes::prototype1::records::RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked { 
      
      public:
         
         typedef peano::applications::navierstokes::prototype1::records::RegularGridFluidCellEnhancedDivFreeEulerExplicit::FluidCellType FluidCellType;
         
         struct PersistentRecords {
            double _p;
            double _rhsPPE;
            double _residuum;
            
            /** mapping of records:
            || Member 	|| startbit 	|| length
             |  fluidCellType	| startbit 0	| #bits 1
             |  isInside	| startbit 1	| #bits 1
             */
            short int _packedRecords0;
            
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const FluidCellType& fluidCellType, const double& p, const double& rhsPPE, const double& residuum, const bool& isInside);
            
            /**
             * Generated
             */
            FluidCellType getFluidCellType() const;
            
            /**
             * Generated
             */
            void setFluidCellType(const FluidCellType& fluidCellType);
            
            /**
             * Generated
             */
            double getP() const;
            
            /**
             * Generated
             */
            void setP(const double& p);
            
            /**
             * Generated
             */
            double getRhsPPE() const;
            
            /**
             * Generated
             */
            void setRhsPPE(const double& rhsPPE);
            
            /**
             * Generated
             */
            double getResiduum() const;
            
            /**
             * Generated
             */
            void setResiduum(const double& residuum);
            
            /**
             * Generated
             */
            bool getIsInside() const;
            
            /**
             * Generated
             */
            void setIsInside(const bool& isInside);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked();
         
         /**
          * Generated
          */
         RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked(const FluidCellType& fluidCellType, const double& p, const double& rhsPPE, const double& residuum, const bool& isInside);
         
         /**
          * Generated
          */
         virtual ~RegularGridFluidCellEnhancedDivFreeEulerExplicitPacked();
         
         /**
          * Generated
          */
         FluidCellType getFluidCellType() const;
         
         /**
          * Generated
          */
         void setFluidCellType(const FluidCellType& fluidCellType);
         
         /**
          * Generated
          */
         double getP() const;
         
         /**
          * Generated
          */
         void setP(const double& p);
         
         /**
          * Generated
          */
         double getRhsPPE() const;
         
         /**
          * Generated
          */
         void setRhsPPE(const double& rhsPPE);
         
         /**
          * Generated
          */
         double getResiduum() const;
         
         /**
          * Generated
          */
         void setResiduum(const double& residuum);
         
         /**
          * Generated
          */
         bool getIsInside() const;
         
         /**
          * Generated
          */
         void setIsInside(const bool& isInside);
         
         /**
          * Generated
          */
         static std::string toString(const FluidCellType& param);
         
         /**
          * Generated
          */
         static std::string getFluidCellTypeMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         RegularGridFluidCellEnhancedDivFreeEulerExplicit convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
