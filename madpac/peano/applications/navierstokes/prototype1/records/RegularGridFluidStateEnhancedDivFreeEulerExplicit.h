#ifndef _PEANO_APPLICATIONS_NAVIERSTOKES_PROTOTYPE1_RECORDS_REGULARGRIDFLUIDSTATEENHANCEDDIVFREEEULEREXPLICIT_H
#define _PEANO_APPLICATIONS_NAVIERSTOKES_PROTOTYPE1_RECORDS_REGULARGRIDFLUIDSTATEENHANCEDDIVFREEEULEREXPLICIT_H

#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>
#include "peano/utils/Globals.h"
#include "peano/applications/navierstokes/prototype1/NSEGlobals.h"

namespace peano {
   namespace applications {
      namespace navierstokes {
         namespace prototype1 {
            namespace records {
               class RegularGridFluidStateEnhancedDivFreeEulerExplicit;
               class RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked;
            }
         }
      }
   }
}

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 25-07-2011 09:43
 *
 * @date   25/07/2011 10:23
 */
class peano::applications::navierstokes::prototype1::records::RegularGridFluidStateEnhancedDivFreeEulerExplicit { 
   
   public:
      
      typedef peano::applications::navierstokes::prototype1::records::RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked Packed;
      
      typedef peano::applications::navierstokes::prototype1::ElementType DebugElementType;
      
      struct PersistentRecords {
         DebugElementType _elementType;
         int _LGSMaxIterations;
         double _LGSResidual;
         int _odeTimestepnumber;
         double _odeTime;
         double _odeTau;
         tarch::la::Vector<DIMENSIONS,int> _numberOfVertices;
         tarch::la::Vector<DIMENSIONS,double> _offset;
         tarch::la::Vector<DIMENSIONS,double> _size;
         bool _plotterPlotDebugInfo;
         bool _plotVTKFiles;
         double _scenarioRe;
         double _scenarioEta;
         double _scenarioRho;
         double _scenarioCharacteristicLength;
         double _pL2h;
         double _pMax;
         double _pImprovementL2h;
         double _pImprovementMax;
         double _uL2h;
         double _uMax;
         double _uImprovementL2h;
         double _uImprovementMax;
         tarch::la::Vector<DIMENSIONS,double> _uMaxPerDimension;
         tarch::la::Vector<DIMENSIONS,double> _meshWidth;
         double _numberOfInnerVertices;
         double _numberOfBoundaryVertices;
         double _numberOfOuterVertices;
         double _numberOfInnerCells;
         double _numberOfOuterCells;
         bool _gridIsStationary;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const ElementType& elementType, const int& LGSMaxIterations, const double& LGSResidual, const int& odeTimestepnumber, const double& odeTime, const double& odeTau, const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices, const tarch::la::Vector<DIMENSIONS,double>& offset, const tarch::la::Vector<DIMENSIONS,double>& size, const bool& plotterPlotDebugInfo, const bool& plotVTKFiles, const double& scenarioRe, const double& scenarioEta, const double& scenarioRho, const double& scenarioCharacteristicLength, const double& pL2h, const double& pMax, const double& pImprovementL2h, const double& pImprovementMax, const double& uL2h, const double& uMax, const double& uImprovementL2h, const double& uImprovementMax, const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension, const tarch::la::Vector<DIMENSIONS,double>& meshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const bool& gridIsStationary);
         
         /**
          * Generated
          */
         DebugElementType getElementType() const;
         
         /**
          * Generated
          */
         void setElementType(const DebugElementType& elementType);
         
         /**
          * Generated
          */
         int getLGSMaxIterations() const;
         
         /**
          * Generated
          */
         void setLGSMaxIterations(const int& LGSMaxIterations);
         
         /**
          * Generated
          */
         double getLGSResidual() const;
         
         /**
          * Generated
          */
         void setLGSResidual(const double& LGSResidual);
         
         /**
          * Generated
          */
         int getOdeTimestepnumber() const;
         
         /**
          * Generated
          */
         void setOdeTimestepnumber(const int& odeTimestepnumber);
         
         /**
          * Generated
          */
         double getOdeTime() const;
         
         /**
          * Generated
          */
         void setOdeTime(const double& odeTime);
         
         /**
          * Generated
          */
         double getOdeTau() const;
         
         /**
          * Generated
          */
         void setOdeTau(const double& odeTau);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getNumberOfVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfVertices(const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getOffset() const;
         
         /**
          * Generated
          */
         void setOffset(const tarch::la::Vector<DIMENSIONS,double>& offset);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getSize() const;
         
         /**
          * Generated
          */
         void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
         
         /**
          * Generated
          */
         bool getPlotterPlotDebugInfo() const;
         
         /**
          * Generated
          */
         void setPlotterPlotDebugInfo(const bool& plotterPlotDebugInfo);
         
         /**
          * Generated
          */
         bool getPlotVTKFiles() const;
         
         /**
          * Generated
          */
         void setPlotVTKFiles(const bool& plotVTKFiles);
         
         /**
          * Generated
          */
         double getScenarioRe() const;
         
         /**
          * Generated
          */
         void setScenarioRe(const double& scenarioRe);
         
         /**
          * Generated
          */
         double getScenarioEta() const;
         
         /**
          * Generated
          */
         void setScenarioEta(const double& scenarioEta);
         
         /**
          * Generated
          */
         double getScenarioRho() const;
         
         /**
          * Generated
          */
         void setScenarioRho(const double& scenarioRho);
         
         /**
          * Generated
          */
         double getScenarioCharacteristicLength() const;
         
         /**
          * Generated
          */
         void setScenarioCharacteristicLength(const double& scenarioCharacteristicLength);
         
         /**
          * Generated
          */
         double getPL2h() const;
         
         /**
          * Generated
          */
         void setPL2h(const double& pL2h);
         
         /**
          * Generated
          */
         double getPMax() const;
         
         /**
          * Generated
          */
         void setPMax(const double& pMax);
         
         /**
          * Generated
          */
         double getPImprovementL2h() const;
         
         /**
          * Generated
          */
         void setPImprovementL2h(const double& pImprovementL2h);
         
         /**
          * Generated
          */
         double getPImprovementMax() const;
         
         /**
          * Generated
          */
         void setPImprovementMax(const double& pImprovementMax);
         
         /**
          * Generated
          */
         double getUL2h() const;
         
         /**
          * Generated
          */
         void setUL2h(const double& uL2h);
         
         /**
          * Generated
          */
         double getUMax() const;
         
         /**
          * Generated
          */
         void setUMax(const double& uMax);
         
         /**
          * Generated
          */
         double getUImprovementL2h() const;
         
         /**
          * Generated
          */
         void setUImprovementL2h(const double& uImprovementL2h);
         
         /**
          * Generated
          */
         double getUImprovementMax() const;
         
         /**
          * Generated
          */
         void setUImprovementMax(const double& uImprovementMax);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getUMaxPerDimension() const;
         
         /**
          * Generated
          */
         void setUMaxPerDimension(const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getMeshWidth() const;
         
         /**
          * Generated
          */
         void setMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& meshWidth);
         
         /**
          * Generated
          */
         double getNumberOfInnerVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfInnerVertices(const double& numberOfInnerVertices);
         
         /**
          * Generated
          */
         double getNumberOfBoundaryVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
         
         /**
          * Generated
          */
         double getNumberOfOuterVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfOuterVertices(const double& numberOfOuterVertices);
         
         /**
          * Generated
          */
         double getNumberOfInnerCells() const;
         
         /**
          * Generated
          */
         void setNumberOfInnerCells(const double& numberOfInnerCells);
         
         /**
          * Generated
          */
         double getNumberOfOuterCells() const;
         
         /**
          * Generated
          */
         void setNumberOfOuterCells(const double& numberOfOuterCells);
         
         /**
          * Generated
          */
         bool getGridIsStationary() const;
         
         /**
          * Generated
          */
         void setGridIsStationary(const bool& gridIsStationary);
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      RegularGridFluidStateEnhancedDivFreeEulerExplicit();
      
      /**
       * Generated
       */
      RegularGridFluidStateEnhancedDivFreeEulerExplicit(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      RegularGridFluidStateEnhancedDivFreeEulerExplicit(const ElementType& elementType, const int& LGSMaxIterations, const double& LGSResidual, const int& odeTimestepnumber, const double& odeTime, const double& odeTau, const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices, const tarch::la::Vector<DIMENSIONS,double>& offset, const tarch::la::Vector<DIMENSIONS,double>& size, const bool& plotterPlotDebugInfo, const bool& plotVTKFiles, const double& scenarioRe, const double& scenarioEta, const double& scenarioRho, const double& scenarioCharacteristicLength, const double& pL2h, const double& pMax, const double& pImprovementL2h, const double& pImprovementMax, const double& uL2h, const double& uMax, const double& uImprovementL2h, const double& uImprovementMax, const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension, const tarch::la::Vector<DIMENSIONS,double>& meshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const bool& gridIsStationary);
      
      /**
       * Generated
       */
      virtual ~RegularGridFluidStateEnhancedDivFreeEulerExplicit();
      
      /**
       * Generated
       */
      DebugElementType getElementType() const;
      
      /**
       * Generated
       */
      void setElementType(const DebugElementType& elementType);
      
      /**
       * Generated
       */
      int getLGSMaxIterations() const;
      
      /**
       * Generated
       */
      void setLGSMaxIterations(const int& LGSMaxIterations);
      
      /**
       * Generated
       */
      double getLGSResidual() const;
      
      /**
       * Generated
       */
      void setLGSResidual(const double& LGSResidual);
      
      /**
       * Generated
       */
      int getOdeTimestepnumber() const;
      
      /**
       * Generated
       */
      void setOdeTimestepnumber(const int& odeTimestepnumber);
      
      /**
       * Generated
       */
      double getOdeTime() const;
      
      /**
       * Generated
       */
      void setOdeTime(const double& odeTime);
      
      /**
       * Generated
       */
      double getOdeTau() const;
      
      /**
       * Generated
       */
      void setOdeTau(const double& odeTau);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,int> getNumberOfVertices() const;
      
      /**
       * Generated
       */
      void setNumberOfVertices(const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices);
      
      /**
       * Generated
       */
      int getNumberOfVertices(int elementIndex) const;
      
      /**
       * Generated
       */
      void setNumberOfVertices(int elementIndex, const int& numberOfVertices);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getOffset() const;
      
      /**
       * Generated
       */
      void setOffset(const tarch::la::Vector<DIMENSIONS,double>& offset);
      
      /**
       * Generated
       */
      double getOffset(int elementIndex) const;
      
      /**
       * Generated
       */
      void setOffset(int elementIndex, const double& offset);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getSize() const;
      
      /**
       * Generated
       */
      void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
      
      /**
       * Generated
       */
      double getSize(int elementIndex) const;
      
      /**
       * Generated
       */
      void setSize(int elementIndex, const double& size);
      
      /**
       * Generated
       */
      bool getPlotterPlotDebugInfo() const;
      
      /**
       * Generated
       */
      void setPlotterPlotDebugInfo(const bool& plotterPlotDebugInfo);
      
      /**
       * Generated
       */
      bool getPlotVTKFiles() const;
      
      /**
       * Generated
       */
      void setPlotVTKFiles(const bool& plotVTKFiles);
      
      /**
       * Generated
       */
      double getScenarioRe() const;
      
      /**
       * Generated
       */
      void setScenarioRe(const double& scenarioRe);
      
      /**
       * Generated
       */
      double getScenarioEta() const;
      
      /**
       * Generated
       */
      void setScenarioEta(const double& scenarioEta);
      
      /**
       * Generated
       */
      double getScenarioRho() const;
      
      /**
       * Generated
       */
      void setScenarioRho(const double& scenarioRho);
      
      /**
       * Generated
       */
      double getScenarioCharacteristicLength() const;
      
      /**
       * Generated
       */
      void setScenarioCharacteristicLength(const double& scenarioCharacteristicLength);
      
      /**
       * Generated
       */
      double getPL2h() const;
      
      /**
       * Generated
       */
      void setPL2h(const double& pL2h);
      
      /**
       * Generated
       */
      double getPMax() const;
      
      /**
       * Generated
       */
      void setPMax(const double& pMax);
      
      /**
       * Generated
       */
      double getPImprovementL2h() const;
      
      /**
       * Generated
       */
      void setPImprovementL2h(const double& pImprovementL2h);
      
      /**
       * Generated
       */
      double getPImprovementMax() const;
      
      /**
       * Generated
       */
      void setPImprovementMax(const double& pImprovementMax);
      
      /**
       * Generated
       */
      double getUL2h() const;
      
      /**
       * Generated
       */
      void setUL2h(const double& uL2h);
      
      /**
       * Generated
       */
      double getUMax() const;
      
      /**
       * Generated
       */
      void setUMax(const double& uMax);
      
      /**
       * Generated
       */
      double getUImprovementL2h() const;
      
      /**
       * Generated
       */
      void setUImprovementL2h(const double& uImprovementL2h);
      
      /**
       * Generated
       */
      double getUImprovementMax() const;
      
      /**
       * Generated
       */
      void setUImprovementMax(const double& uImprovementMax);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getUMaxPerDimension() const;
      
      /**
       * Generated
       */
      void setUMaxPerDimension(const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension);
      
      /**
       * Generated
       */
      double getUMaxPerDimension(int elementIndex) const;
      
      /**
       * Generated
       */
      void setUMaxPerDimension(int elementIndex, const double& uMaxPerDimension);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getMeshWidth() const;
      
      /**
       * Generated
       */
      void setMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& meshWidth);
      
      /**
       * Generated
       */
      double getMeshWidth(int elementIndex) const;
      
      /**
       * Generated
       */
      void setMeshWidth(int elementIndex, const double& meshWidth);
      
      /**
       * Generated
       */
      double getNumberOfInnerVertices() const;
      
      /**
       * Generated
       */
      void setNumberOfInnerVertices(const double& numberOfInnerVertices);
      
      /**
       * Generated
       */
      double getNumberOfBoundaryVertices() const;
      
      /**
       * Generated
       */
      void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
      
      /**
       * Generated
       */
      double getNumberOfOuterVertices() const;
      
      /**
       * Generated
       */
      void setNumberOfOuterVertices(const double& numberOfOuterVertices);
      
      /**
       * Generated
       */
      double getNumberOfInnerCells() const;
      
      /**
       * Generated
       */
      void setNumberOfInnerCells(const double& numberOfInnerCells);
      
      /**
       * Generated
       */
      double getNumberOfOuterCells() const;
      
      /**
       * Generated
       */
      void setNumberOfOuterCells(const double& numberOfOuterCells);
      
      /**
       * Generated
       */
      bool getGridIsStationary() const;
      
      /**
       * Generated
       */
      void setGridIsStationary(const bool& gridIsStationary);
      
      /**
       * Generated
       */
      static std::string toString(const DebugElementType& param);
      
      /**
       * Generated
       */
      static std::string getDebugElementTypeMapping();
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          */
         static MPI_Datatype Datatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag);
         
         void receive(int source, int tag);
         
         static bool isMessageInQueue(int tag);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 25-07-2011 09:43
    *
    * @date   25/07/2011 10:23
    */
   class peano::applications::navierstokes::prototype1::records::RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked { 
      
      public:
         
         typedef peano::applications::navierstokes::prototype1::records::RegularGridFluidStateEnhancedDivFreeEulerExplicit::DebugElementType DebugElementType;
         
         struct PersistentRecords {
            DebugElementType _elementType;
            int _LGSMaxIterations;
            double _LGSResidual;
            int _odeTimestepnumber;
            double _odeTime;
            double _odeTau;
            tarch::la::Vector<DIMENSIONS,int> _numberOfVertices;
            tarch::la::Vector<DIMENSIONS,double> _offset;
            tarch::la::Vector<DIMENSIONS,double> _size;
            bool _plotterPlotDebugInfo;
            bool _plotVTKFiles;
            double _scenarioRe;
            double _scenarioEta;
            double _scenarioRho;
            double _scenarioCharacteristicLength;
            double _pL2h;
            double _pMax;
            double _pImprovementL2h;
            double _pImprovementMax;
            double _uL2h;
            double _uMax;
            double _uImprovementL2h;
            double _uImprovementMax;
            tarch::la::Vector<DIMENSIONS,double> _uMaxPerDimension;
            tarch::la::Vector<DIMENSIONS,double> _meshWidth;
            double _numberOfInnerVertices;
            double _numberOfBoundaryVertices;
            double _numberOfOuterVertices;
            double _numberOfInnerCells;
            double _numberOfOuterCells;
            
            /** mapping of records:
            || Member 	|| startbit 	|| length
             |  gridIsStationary	| startbit 0	| #bits 1
             */
            short int _packedRecords0;
            
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const ElementType& elementType, const int& LGSMaxIterations, const double& LGSResidual, const int& odeTimestepnumber, const double& odeTime, const double& odeTau, const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices, const tarch::la::Vector<DIMENSIONS,double>& offset, const tarch::la::Vector<DIMENSIONS,double>& size, const bool& plotterPlotDebugInfo, const bool& plotVTKFiles, const double& scenarioRe, const double& scenarioEta, const double& scenarioRho, const double& scenarioCharacteristicLength, const double& pL2h, const double& pMax, const double& pImprovementL2h, const double& pImprovementMax, const double& uL2h, const double& uMax, const double& uImprovementL2h, const double& uImprovementMax, const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension, const tarch::la::Vector<DIMENSIONS,double>& meshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const bool& gridIsStationary);
            
            /**
             * Generated
             */
            DebugElementType getElementType() const;
            
            /**
             * Generated
             */
            void setElementType(const DebugElementType& elementType);
            
            /**
             * Generated
             */
            int getLGSMaxIterations() const;
            
            /**
             * Generated
             */
            void setLGSMaxIterations(const int& LGSMaxIterations);
            
            /**
             * Generated
             */
            double getLGSResidual() const;
            
            /**
             * Generated
             */
            void setLGSResidual(const double& LGSResidual);
            
            /**
             * Generated
             */
            int getOdeTimestepnumber() const;
            
            /**
             * Generated
             */
            void setOdeTimestepnumber(const int& odeTimestepnumber);
            
            /**
             * Generated
             */
            double getOdeTime() const;
            
            /**
             * Generated
             */
            void setOdeTime(const double& odeTime);
            
            /**
             * Generated
             */
            double getOdeTau() const;
            
            /**
             * Generated
             */
            void setOdeTau(const double& odeTau);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,int> getNumberOfVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfVertices(const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getOffset() const;
            
            /**
             * Generated
             */
            void setOffset(const tarch::la::Vector<DIMENSIONS,double>& offset);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getSize() const;
            
            /**
             * Generated
             */
            void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
            
            /**
             * Generated
             */
            bool getPlotterPlotDebugInfo() const;
            
            /**
             * Generated
             */
            void setPlotterPlotDebugInfo(const bool& plotterPlotDebugInfo);
            
            /**
             * Generated
             */
            bool getPlotVTKFiles() const;
            
            /**
             * Generated
             */
            void setPlotVTKFiles(const bool& plotVTKFiles);
            
            /**
             * Generated
             */
            double getScenarioRe() const;
            
            /**
             * Generated
             */
            void setScenarioRe(const double& scenarioRe);
            
            /**
             * Generated
             */
            double getScenarioEta() const;
            
            /**
             * Generated
             */
            void setScenarioEta(const double& scenarioEta);
            
            /**
             * Generated
             */
            double getScenarioRho() const;
            
            /**
             * Generated
             */
            void setScenarioRho(const double& scenarioRho);
            
            /**
             * Generated
             */
            double getScenarioCharacteristicLength() const;
            
            /**
             * Generated
             */
            void setScenarioCharacteristicLength(const double& scenarioCharacteristicLength);
            
            /**
             * Generated
             */
            double getPL2h() const;
            
            /**
             * Generated
             */
            void setPL2h(const double& pL2h);
            
            /**
             * Generated
             */
            double getPMax() const;
            
            /**
             * Generated
             */
            void setPMax(const double& pMax);
            
            /**
             * Generated
             */
            double getPImprovementL2h() const;
            
            /**
             * Generated
             */
            void setPImprovementL2h(const double& pImprovementL2h);
            
            /**
             * Generated
             */
            double getPImprovementMax() const;
            
            /**
             * Generated
             */
            void setPImprovementMax(const double& pImprovementMax);
            
            /**
             * Generated
             */
            double getUL2h() const;
            
            /**
             * Generated
             */
            void setUL2h(const double& uL2h);
            
            /**
             * Generated
             */
            double getUMax() const;
            
            /**
             * Generated
             */
            void setUMax(const double& uMax);
            
            /**
             * Generated
             */
            double getUImprovementL2h() const;
            
            /**
             * Generated
             */
            void setUImprovementL2h(const double& uImprovementL2h);
            
            /**
             * Generated
             */
            double getUImprovementMax() const;
            
            /**
             * Generated
             */
            void setUImprovementMax(const double& uImprovementMax);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getUMaxPerDimension() const;
            
            /**
             * Generated
             */
            void setUMaxPerDimension(const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getMeshWidth() const;
            
            /**
             * Generated
             */
            void setMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& meshWidth);
            
            /**
             * Generated
             */
            double getNumberOfInnerVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfInnerVertices(const double& numberOfInnerVertices);
            
            /**
             * Generated
             */
            double getNumberOfBoundaryVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
            
            /**
             * Generated
             */
            double getNumberOfOuterVertices() const;
            
            /**
             * Generated
             */
            void setNumberOfOuterVertices(const double& numberOfOuterVertices);
            
            /**
             * Generated
             */
            double getNumberOfInnerCells() const;
            
            /**
             * Generated
             */
            void setNumberOfInnerCells(const double& numberOfInnerCells);
            
            /**
             * Generated
             */
            double getNumberOfOuterCells() const;
            
            /**
             * Generated
             */
            void setNumberOfOuterCells(const double& numberOfOuterCells);
            
            /**
             * Generated
             */
            bool getGridIsStationary() const;
            
            /**
             * Generated
             */
            void setGridIsStationary(const bool& gridIsStationary);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked();
         
         /**
          * Generated
          */
         RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked(const ElementType& elementType, const int& LGSMaxIterations, const double& LGSResidual, const int& odeTimestepnumber, const double& odeTime, const double& odeTau, const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices, const tarch::la::Vector<DIMENSIONS,double>& offset, const tarch::la::Vector<DIMENSIONS,double>& size, const bool& plotterPlotDebugInfo, const bool& plotVTKFiles, const double& scenarioRe, const double& scenarioEta, const double& scenarioRho, const double& scenarioCharacteristicLength, const double& pL2h, const double& pMax, const double& pImprovementL2h, const double& pImprovementMax, const double& uL2h, const double& uMax, const double& uImprovementL2h, const double& uImprovementMax, const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension, const tarch::la::Vector<DIMENSIONS,double>& meshWidth, const double& numberOfInnerVertices, const double& numberOfBoundaryVertices, const double& numberOfOuterVertices, const double& numberOfInnerCells, const double& numberOfOuterCells, const bool& gridIsStationary);
         
         /**
          * Generated
          */
         virtual ~RegularGridFluidStateEnhancedDivFreeEulerExplicitPacked();
         
         /**
          * Generated
          */
         DebugElementType getElementType() const;
         
         /**
          * Generated
          */
         void setElementType(const DebugElementType& elementType);
         
         /**
          * Generated
          */
         int getLGSMaxIterations() const;
         
         /**
          * Generated
          */
         void setLGSMaxIterations(const int& LGSMaxIterations);
         
         /**
          * Generated
          */
         double getLGSResidual() const;
         
         /**
          * Generated
          */
         void setLGSResidual(const double& LGSResidual);
         
         /**
          * Generated
          */
         int getOdeTimestepnumber() const;
         
         /**
          * Generated
          */
         void setOdeTimestepnumber(const int& odeTimestepnumber);
         
         /**
          * Generated
          */
         double getOdeTime() const;
         
         /**
          * Generated
          */
         void setOdeTime(const double& odeTime);
         
         /**
          * Generated
          */
         double getOdeTau() const;
         
         /**
          * Generated
          */
         void setOdeTau(const double& odeTau);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getNumberOfVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfVertices(const tarch::la::Vector<DIMENSIONS,int>& numberOfVertices);
         
         /**
          * Generated
          */
         int getNumberOfVertices(int elementIndex) const;
         
         /**
          * Generated
          */
         void setNumberOfVertices(int elementIndex, const int& numberOfVertices);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getOffset() const;
         
         /**
          * Generated
          */
         void setOffset(const tarch::la::Vector<DIMENSIONS,double>& offset);
         
         /**
          * Generated
          */
         double getOffset(int elementIndex) const;
         
         /**
          * Generated
          */
         void setOffset(int elementIndex, const double& offset);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getSize() const;
         
         /**
          * Generated
          */
         void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
         
         /**
          * Generated
          */
         double getSize(int elementIndex) const;
         
         /**
          * Generated
          */
         void setSize(int elementIndex, const double& size);
         
         /**
          * Generated
          */
         bool getPlotterPlotDebugInfo() const;
         
         /**
          * Generated
          */
         void setPlotterPlotDebugInfo(const bool& plotterPlotDebugInfo);
         
         /**
          * Generated
          */
         bool getPlotVTKFiles() const;
         
         /**
          * Generated
          */
         void setPlotVTKFiles(const bool& plotVTKFiles);
         
         /**
          * Generated
          */
         double getScenarioRe() const;
         
         /**
          * Generated
          */
         void setScenarioRe(const double& scenarioRe);
         
         /**
          * Generated
          */
         double getScenarioEta() const;
         
         /**
          * Generated
          */
         void setScenarioEta(const double& scenarioEta);
         
         /**
          * Generated
          */
         double getScenarioRho() const;
         
         /**
          * Generated
          */
         void setScenarioRho(const double& scenarioRho);
         
         /**
          * Generated
          */
         double getScenarioCharacteristicLength() const;
         
         /**
          * Generated
          */
         void setScenarioCharacteristicLength(const double& scenarioCharacteristicLength);
         
         /**
          * Generated
          */
         double getPL2h() const;
         
         /**
          * Generated
          */
         void setPL2h(const double& pL2h);
         
         /**
          * Generated
          */
         double getPMax() const;
         
         /**
          * Generated
          */
         void setPMax(const double& pMax);
         
         /**
          * Generated
          */
         double getPImprovementL2h() const;
         
         /**
          * Generated
          */
         void setPImprovementL2h(const double& pImprovementL2h);
         
         /**
          * Generated
          */
         double getPImprovementMax() const;
         
         /**
          * Generated
          */
         void setPImprovementMax(const double& pImprovementMax);
         
         /**
          * Generated
          */
         double getUL2h() const;
         
         /**
          * Generated
          */
         void setUL2h(const double& uL2h);
         
         /**
          * Generated
          */
         double getUMax() const;
         
         /**
          * Generated
          */
         void setUMax(const double& uMax);
         
         /**
          * Generated
          */
         double getUImprovementL2h() const;
         
         /**
          * Generated
          */
         void setUImprovementL2h(const double& uImprovementL2h);
         
         /**
          * Generated
          */
         double getUImprovementMax() const;
         
         /**
          * Generated
          */
         void setUImprovementMax(const double& uImprovementMax);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getUMaxPerDimension() const;
         
         /**
          * Generated
          */
         void setUMaxPerDimension(const tarch::la::Vector<DIMENSIONS,double>& uMaxPerDimension);
         
         /**
          * Generated
          */
         double getUMaxPerDimension(int elementIndex) const;
         
         /**
          * Generated
          */
         void setUMaxPerDimension(int elementIndex, const double& uMaxPerDimension);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getMeshWidth() const;
         
         /**
          * Generated
          */
         void setMeshWidth(const tarch::la::Vector<DIMENSIONS,double>& meshWidth);
         
         /**
          * Generated
          */
         double getMeshWidth(int elementIndex) const;
         
         /**
          * Generated
          */
         void setMeshWidth(int elementIndex, const double& meshWidth);
         
         /**
          * Generated
          */
         double getNumberOfInnerVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfInnerVertices(const double& numberOfInnerVertices);
         
         /**
          * Generated
          */
         double getNumberOfBoundaryVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfBoundaryVertices(const double& numberOfBoundaryVertices);
         
         /**
          * Generated
          */
         double getNumberOfOuterVertices() const;
         
         /**
          * Generated
          */
         void setNumberOfOuterVertices(const double& numberOfOuterVertices);
         
         /**
          * Generated
          */
         double getNumberOfInnerCells() const;
         
         /**
          * Generated
          */
         void setNumberOfInnerCells(const double& numberOfInnerCells);
         
         /**
          * Generated
          */
         double getNumberOfOuterCells() const;
         
         /**
          * Generated
          */
         void setNumberOfOuterCells(const double& numberOfOuterCells);
         
         /**
          * Generated
          */
         bool getGridIsStationary() const;
         
         /**
          * Generated
          */
         void setGridIsStationary(const bool& gridIsStationary);
         
         /**
          * Generated
          */
         static std::string toString(const DebugElementType& param);
         
         /**
          * Generated
          */
         static std::string getDebugElementTypeMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         RegularGridFluidStateEnhancedDivFreeEulerExplicit convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
