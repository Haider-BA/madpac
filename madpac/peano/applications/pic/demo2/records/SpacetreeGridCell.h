#ifndef _PEANO_APPLICATIONS_PIC_DEMO2_RECORDS_SPACETREEGRIDCELL_H
#define _PEANO_APPLICATIONS_PIC_DEMO2_RECORDS_SPACETREEGRIDCELL_H

#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>
#include "peano/utils/Globals.h"

namespace peano {
   namespace applications {
      namespace pic {
         namespace demo2 {
            namespace records {
               class SpacetreeGridCell;
               class SpacetreeGridCellPacked;
            }
         }
      }
   }
}

#if !defined(Debug) && !defined(Parallel)
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 09-12-2010 17:47
    *
    * @date   17/06/2011 15:45
    */
   class peano::applications::pic::demo2::records::SpacetreeGridCell { 
      
      public:
         
         typedef peano::applications::pic::demo2::records::SpacetreeGridCellPacked Packed;
         
         enum State {
            Leaf = 0, Refined = 1, Root = 2
         };
         
         struct PersistentRecords {
            double _p;
            bool _isInside;
            State _state;
            std::bitset<DIMENSIONS> _evenFlags;
            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const double& p, const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
            
            /**
             * Generated
             */
            double getP() const;
            
            /**
             * Generated
             */
            void setP(const double& p);
            
            /**
             * Generated
             */
            bool getIsInside() const;
            
            /**
             * Generated
             */
            void setIsInside(const bool& isInside);
            
            /**
             * Generated
             */
            State getState() const;
            
            /**
             * Generated
             */
            void setState(const State& state);
            
            /**
             * Generated
             */
            std::bitset<DIMENSIONS> getEvenFlags() const;
            
            /**
             * Generated
             */
            void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
            
            /**
             * Generated
             */
            void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         SpacetreeGridCell();
         
         /**
          * Generated
          */
         SpacetreeGridCell(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         SpacetreeGridCell(const double& p, const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
         
         /**
          * Generated
          */
         virtual ~SpacetreeGridCell();
         
         /**
          * Generated
          */
         double getP() const;
         
         /**
          * Generated
          */
         void setP(const double& p);
         
         /**
          * Generated
          */
         bool getIsInside() const;
         
         /**
          * Generated
          */
         void setIsInside(const bool& isInside);
         
         /**
          * Generated
          */
         State getState() const;
         
         /**
          * Generated
          */
         void setState(const State& state);
         
         /**
          * Generated
          */
         std::bitset<DIMENSIONS> getEvenFlags() const;
         
         /**
          * Generated
          */
         void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
         
         /**
          * Generated
          */
         bool getEvenFlags(int elementIndex) const;
         
         /**
          * Generated
          */
         void setEvenFlags(int elementIndex, const bool& evenFlags);
         
         /**
          * Generated
          */
         void flipEvenFlags(int elementIndex);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
         
         /**
          * Generated
          */
         void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
         
         /**
          * Generated
          */
         short int getAccessNumber(int elementIndex) const;
         
         /**
          * Generated
          */
         void setAccessNumber(int elementIndex, const short int& accessNumber);
         
         /**
          * Generated
          */
         static std::string toString(const State& param);
         
         /**
          * Generated
          */
         static std::string getStateMapping();
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         SpacetreeGridCellPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      /**
       * @author This class was autogenerated by DaStGen
       * 		   DataStructureGenerator (DaStGen), 2007-2009,
       * 		   by Wolfgang Eckhardt
       *
       * 		   build date: 09-12-2010 17:47
       *
       * @date   17/06/2011 15:45
       */
      class peano::applications::pic::demo2::records::SpacetreeGridCellPacked { 
         
         public:
            
            typedef peano::applications::pic::demo2::records::SpacetreeGridCell::State State;
            
            struct PersistentRecords {
               double _p;
               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
               
               /** mapping of records:
               || Member 	|| startbit 	|| length
                |  isInside	| startbit 0	| #bits 1
                |  state	| startbit 1	| #bits 2
                |  evenFlags	| startbit 3	| #bits DIMENSIONS
                */
               long int _packedRecords0;
               
               /**
                * Generated
                */
               PersistentRecords();
               
               /**
                * Generated
                */
               PersistentRecords(const double& p, const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
               
               /**
                * Generated
                */
               double getP() const;
               
               /**
                * Generated
                */
               void setP(const double& p);
               
               /**
                * Generated
                */
               bool getIsInside() const;
               
               /**
                * Generated
                */
               void setIsInside(const bool& isInside);
               
               /**
                * Generated
                */
               State getState() const;
               
               /**
                * Generated
                */
               void setState(const State& state);
               
               /**
                * Generated
                */
               std::bitset<DIMENSIONS> getEvenFlags() const;
               
               /**
                * Generated
                */
               void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
               
               /**
                * Generated
                */
               void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
               
               
            };
            
         private: 
            PersistentRecords _persistentRecords;
            
         public:
            /**
             * Generated
             */
            SpacetreeGridCellPacked();
            
            /**
             * Generated
             */
            SpacetreeGridCellPacked(const PersistentRecords& persistentRecords);
            
            /**
             * Generated
             */
            SpacetreeGridCellPacked(const double& p, const bool& isInside, const State& state, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
            
            /**
             * Generated
             */
            virtual ~SpacetreeGridCellPacked();
            
            /**
             * Generated
             */
            double getP() const;
            
            /**
             * Generated
             */
            void setP(const double& p);
            
            /**
             * Generated
             */
            bool getIsInside() const;
            
            /**
             * Generated
             */
            void setIsInside(const bool& isInside);
            
            /**
             * Generated
             */
            State getState() const;
            
            /**
             * Generated
             */
            void setState(const State& state);
            
            /**
             * Generated
             */
            std::bitset<DIMENSIONS> getEvenFlags() const;
            
            /**
             * Generated
             */
            void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
            
            /**
             * Generated
             */
            bool getEvenFlags(int elementIndex) const;
            
            /**
             * Generated
             */
            void setEvenFlags(int elementIndex, const bool& evenFlags);
            
            /**
             * Generated
             */
            void flipEvenFlags(int elementIndex);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
            
            /**
             * Generated
             */
            void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
            
            /**
             * Generated
             */
            short int getAccessNumber(int elementIndex) const;
            
            /**
             * Generated
             */
            void setAccessNumber(int elementIndex, const short int& accessNumber);
            
            /**
             * Generated
             */
            static std::string toString(const State& param);
            
            /**
             * Generated
             */
            static std::string getStateMapping();
            
            /**
             * Generated
             */
            std::string toString() const;
            
            /**
             * Generated
             */
            void toString(std::ostream& out) const;
            
            
            PersistentRecords getPersistentRecords() const;
            /**
             * Generated
             */
            SpacetreeGridCell convert() const;
            
            
         #ifdef Parallel
            protected:
               static tarch::logging::Log _log;
               
               int _senderRank;
               
            public:
               
               /**
                * Global that represents the mpi datatype.
                */
               static MPI_Datatype Datatype;
               
               /**
                * Initializes the data type for the mpi operations. Has to be called
                * before the very first send or receive operation is called.
                */
               static void initDatatype();
               
               static void shutdownDatatype();
               
               void send(int destination, int tag);
               
               void receive(int source, int tag);
               
               static bool isMessageInQueue(int tag);
               
               int getSenderRank() const;
               
         #endif
            
         };
         
         
      #elif !defined(Parallel) && defined(Debug)
         /**
          * @author This class was autogenerated by DaStGen
          * 		   DataStructureGenerator (DaStGen), 2007-2009,
          * 		   by Wolfgang Eckhardt
          *
          * 		   build date: 09-12-2010 17:47
          *
          * @date   17/06/2011 15:45
          */
         class peano::applications::pic::demo2::records::SpacetreeGridCell { 
            
            public:
               
               typedef peano::applications::pic::demo2::records::SpacetreeGridCellPacked Packed;
               
               enum State {
                  Leaf = 0, Refined = 1, Root = 2
               };
               
               struct PersistentRecords {
                  double _p;
                  bool _isInside;
                  State _state;
                  int _level;
                  std::bitset<DIMENSIONS> _evenFlags;
                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                  /**
                   * Generated
                   */
                  PersistentRecords();
                  
                  /**
                   * Generated
                   */
                  PersistentRecords(const double& p, const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                  double getP() const;
                  
                  /**
                   * Generated
                   */
                  void setP(const double& p);
                  
                  /**
                   * Generated
                   */
                  bool getIsInside() const;
                  
                  /**
                   * Generated
                   */
                  void setIsInside(const bool& isInside);
                  
                  /**
                   * Generated
                   */
                  State getState() const;
                  
                  /**
                   * Generated
                   */
                  void setState(const State& state);
                  
                  /**
                   * Generated
                   */
                  int getLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setLevel(const int& level);
                  
                  /**
                   * Generated
                   */
                  std::bitset<DIMENSIONS> getEvenFlags() const;
                  
                  /**
                   * Generated
                   */
                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                  
                  /**
                   * Generated
                   */
                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  
               };
               
            private: 
               PersistentRecords _persistentRecords;
               
            public:
               /**
                * Generated
                */
               SpacetreeGridCell();
               
               /**
                * Generated
                */
               SpacetreeGridCell(const PersistentRecords& persistentRecords);
               
               /**
                * Generated
                */
               SpacetreeGridCell(const double& p, const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
               
               /**
                * Generated
                */
               virtual ~SpacetreeGridCell();
               
               /**
                * Generated
                */
               double getP() const;
               
               /**
                * Generated
                */
               void setP(const double& p);
               
               /**
                * Generated
                */
               bool getIsInside() const;
               
               /**
                * Generated
                */
               void setIsInside(const bool& isInside);
               
               /**
                * Generated
                */
               State getState() const;
               
               /**
                * Generated
                */
               void setState(const State& state);
               
               /**
                * Generated
                */
               int getLevel() const;
               
               /**
                * Generated
                */
               void setLevel(const int& level);
               
               /**
                * Generated
                */
               std::bitset<DIMENSIONS> getEvenFlags() const;
               
               /**
                * Generated
                */
               void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
               
               /**
                * Generated
                */
               bool getEvenFlags(int elementIndex) const;
               
               /**
                * Generated
                */
               void setEvenFlags(int elementIndex, const bool& evenFlags);
               
               /**
                * Generated
                */
               void flipEvenFlags(int elementIndex);
               
               /**
                * Generated
                */
               tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
               
               /**
                * Generated
                */
               void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
               
               /**
                * Generated
                */
               short int getAccessNumber(int elementIndex) const;
               
               /**
                * Generated
                */
               void setAccessNumber(int elementIndex, const short int& accessNumber);
               
               /**
                * Generated
                */
               static std::string toString(const State& param);
               
               /**
                * Generated
                */
               static std::string getStateMapping();
               
               /**
                * Generated
                */
               std::string toString() const;
               
               /**
                * Generated
                */
               void toString(std::ostream& out) const;
               
               
               PersistentRecords getPersistentRecords() const;
               /**
                * Generated
                */
               SpacetreeGridCellPacked convert() const;
               
               
            #ifdef Parallel
               protected:
                  static tarch::logging::Log _log;
                  
                  int _senderRank;
                  
               public:
                  
                  /**
                   * Global that represents the mpi datatype.
                   */
                  static MPI_Datatype Datatype;
                  
                  /**
                   * Initializes the data type for the mpi operations. Has to be called
                   * before the very first send or receive operation is called.
                   */
                  static void initDatatype();
                  
                  static void shutdownDatatype();
                  
                  void send(int destination, int tag);
                  
                  void receive(int source, int tag);
                  
                  static bool isMessageInQueue(int tag);
                  
                  int getSenderRank() const;
                  
            #endif
               
            };
            
            /**
             * @author This class was autogenerated by DaStGen
             * 		   DataStructureGenerator (DaStGen), 2007-2009,
             * 		   by Wolfgang Eckhardt
             *
             * 		   build date: 09-12-2010 17:47
             *
             * @date   17/06/2011 15:45
             */
            class peano::applications::pic::demo2::records::SpacetreeGridCellPacked { 
               
               public:
                  
                  typedef peano::applications::pic::demo2::records::SpacetreeGridCell::State State;
                  
                  struct PersistentRecords {
                     double _p;
                     int _level;
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                     
                     /** mapping of records:
                     || Member 	|| startbit 	|| length
                      |  isInside	| startbit 0	| #bits 1
                      |  state	| startbit 1	| #bits 2
                      |  evenFlags	| startbit 3	| #bits DIMENSIONS
                      */
                     long int _packedRecords0;
                     
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const double& p, const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     double getP() const;
                     
                     /**
                      * Generated
                      */
                     void setP(const double& p);
                     
                     /**
                      * Generated
                      */
                     bool getIsInside() const;
                     
                     /**
                      * Generated
                      */
                     void setIsInside(const bool& isInside);
                     
                     /**
                      * Generated
                      */
                     State getState() const;
                     
                     /**
                      * Generated
                      */
                     void setState(const State& state);
                     
                     /**
                      * Generated
                      */
                     int getLevel() const;
                     
                     /**
                      * Generated
                      */
                     void setLevel(const int& level);
                     
                     /**
                      * Generated
                      */
                     std::bitset<DIMENSIONS> getEvenFlags() const;
                     
                     /**
                      * Generated
                      */
                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                     
                     /**
                      * Generated
                      */
                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  SpacetreeGridCellPacked();
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridCellPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridCellPacked(const double& p, const bool& isInside, const State& state, const int& level, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                  virtual ~SpacetreeGridCellPacked();
                  
                  /**
                   * Generated
                   */
                  double getP() const;
                  
                  /**
                   * Generated
                   */
                  void setP(const double& p);
                  
                  /**
                   * Generated
                   */
                  bool getIsInside() const;
                  
                  /**
                   * Generated
                   */
                  void setIsInside(const bool& isInside);
                  
                  /**
                   * Generated
                   */
                  State getState() const;
                  
                  /**
                   * Generated
                   */
                  void setState(const State& state);
                  
                  /**
                   * Generated
                   */
                  int getLevel() const;
                  
                  /**
                   * Generated
                   */
                  void setLevel(const int& level);
                  
                  /**
                   * Generated
                   */
                  std::bitset<DIMENSIONS> getEvenFlags() const;
                  
                  /**
                   * Generated
                   */
                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                  
                  /**
                   * Generated
                   */
                  bool getEvenFlags(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setEvenFlags(int elementIndex, const bool& evenFlags);
                  
                  /**
                   * Generated
                   */
                  void flipEvenFlags(int elementIndex);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                  
                  /**
                   * Generated
                   */
                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                  short int getAccessNumber(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setAccessNumber(int elementIndex, const short int& accessNumber);
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const State& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getStateMapping();
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  SpacetreeGridCell convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      */
                     static MPI_Datatype Datatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag);
                     
                     void receive(int source, int tag);
                     
                     static bool isMessageInQueue(int tag);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               
            
         #elif defined(Parallel) && !defined(Debug)
            /**
             * @author This class was autogenerated by DaStGen
             * 		   DataStructureGenerator (DaStGen), 2007-2009,
             * 		   by Wolfgang Eckhardt
             *
             * 		   build date: 09-12-2010 17:47
             *
             * @date   17/06/2011 15:45
             */
            class peano::applications::pic::demo2::records::SpacetreeGridCell { 
               
               public:
                  
                  typedef peano::applications::pic::demo2::records::SpacetreeGridCellPacked Packed;
                  
                  enum State {
                     Leaf = 0, Refined = 1, Root = 2
                  };
                  
                  struct PersistentRecords {
                     double _p;
                     bool _isInside;
                     State _state;
                     int _delta;
                     int _rankOfActiveNode;
                     double _maxChildWeight;
                     double _accumulatedWeight;
                     std::bitset<DIMENSIONS> _evenFlags;
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const double& p, const bool& isInside, const State& state, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     double getP() const;
                     
                     /**
                      * Generated
                      */
                     void setP(const double& p);
                     
                     /**
                      * Generated
                      */
                     bool getIsInside() const;
                     
                     /**
                      * Generated
                      */
                     void setIsInside(const bool& isInside);
                     
                     /**
                      * Generated
                      */
                     State getState() const;
                     
                     /**
                      * Generated
                      */
                     void setState(const State& state);
                     
                     /**
                      * Generated
                      */
                     int getDelta() const;
                     
                     /**
                      * Generated
                      */
                     void setDelta(const int& delta);
                     
                     /**
                      * Generated
                      */
                     int getRankOfActiveNode() const;
                     
                     /**
                      * Generated
                      */
                     void setRankOfActiveNode(const int& rankOfActiveNode);
                     
                     /**
                      * Generated
                      */
                     double getMaxChildWeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaxChildWeight(const double& maxChildWeight);
                     
                     /**
                      * Generated
                      */
                     double getAccumulatedWeight() const;
                     
                     /**
                      * Generated
                      */
                     void setAccumulatedWeight(const double& accumulatedWeight);
                     
                     /**
                      * Generated
                      */
                     std::bitset<DIMENSIONS> getEvenFlags() const;
                     
                     /**
                      * Generated
                      */
                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                     
                     /**
                      * Generated
                      */
                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  SpacetreeGridCell();
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridCell(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  SpacetreeGridCell(const double& p, const bool& isInside, const State& state, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                  virtual ~SpacetreeGridCell();
                  
                  /**
                   * Generated
                   */
                  double getP() const;
                  
                  /**
                   * Generated
                   */
                  void setP(const double& p);
                  
                  /**
                   * Generated
                   */
                  bool getIsInside() const;
                  
                  /**
                   * Generated
                   */
                  void setIsInside(const bool& isInside);
                  
                  /**
                   * Generated
                   */
                  State getState() const;
                  
                  /**
                   * Generated
                   */
                  void setState(const State& state);
                  
                  /**
                   * Generated
                   */
                  int getDelta() const;
                  
                  /**
                   * Generated
                   */
                  void setDelta(const int& delta);
                  
                  /**
                   * Generated
                   */
                  int getRankOfActiveNode() const;
                  
                  /**
                   * Generated
                   */
                  void setRankOfActiveNode(const int& rankOfActiveNode);
                  
                  /**
                   * Generated
                   */
                  double getMaxChildWeight() const;
                  
                  /**
                   * Generated
                   */
                  void setMaxChildWeight(const double& maxChildWeight);
                  
                  /**
                   * Generated
                   */
                  double getAccumulatedWeight() const;
                  
                  /**
                   * Generated
                   */
                  void setAccumulatedWeight(const double& accumulatedWeight);
                  
                  /**
                   * Generated
                   */
                  std::bitset<DIMENSIONS> getEvenFlags() const;
                  
                  /**
                   * Generated
                   */
                  void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                  
                  /**
                   * Generated
                   */
                  bool getEvenFlags(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setEvenFlags(int elementIndex, const bool& evenFlags);
                  
                  /**
                   * Generated
                   */
                  void flipEvenFlags(int elementIndex);
                  
                  /**
                   * Generated
                   */
                  tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                  
                  /**
                   * Generated
                   */
                  void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                  
                  /**
                   * Generated
                   */
                  short int getAccessNumber(int elementIndex) const;
                  
                  /**
                   * Generated
                   */
                  void setAccessNumber(int elementIndex, const short int& accessNumber);
                  
                  /**
                   * Generated
                   */
                  static std::string toString(const State& param);
                  
                  /**
                   * Generated
                   */
                  static std::string getStateMapping();
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  SpacetreeGridCellPacked convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                     int _senderRank;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      */
                     static MPI_Datatype Datatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag);
                     
                     void receive(int source, int tag);
                     
                     static bool isMessageInQueue(int tag);
                     
                     int getSenderRank() const;
                     
               #endif
                  
               };
               
               /**
                * @author This class was autogenerated by DaStGen
                * 		   DataStructureGenerator (DaStGen), 2007-2009,
                * 		   by Wolfgang Eckhardt
                *
                * 		   build date: 09-12-2010 17:47
                *
                * @date   17/06/2011 15:45
                */
               class peano::applications::pic::demo2::records::SpacetreeGridCellPacked { 
                  
                  public:
                     
                     typedef peano::applications::pic::demo2::records::SpacetreeGridCell::State State;
                     
                     struct PersistentRecords {
                        double _p;
                        int _delta;
                        int _rankOfActiveNode;
                        double _maxChildWeight;
                        double _accumulatedWeight;
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                        
                        /** mapping of records:
                        || Member 	|| startbit 	|| length
                         |  isInside	| startbit 0	| #bits 1
                         |  state	| startbit 1	| #bits 2
                         |  evenFlags	| startbit 3	| #bits DIMENSIONS
                         */
                        long int _packedRecords0;
                        
                        /**
                         * Generated
                         */
                        PersistentRecords();
                        
                        /**
                         * Generated
                         */
                        PersistentRecords(const double& p, const bool& isInside, const State& state, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        /**
                         * Generated
                         */
                        double getP() const;
                        
                        /**
                         * Generated
                         */
                        void setP(const double& p);
                        
                        /**
                         * Generated
                         */
                        bool getIsInside() const;
                        
                        /**
                         * Generated
                         */
                        void setIsInside(const bool& isInside);
                        
                        /**
                         * Generated
                         */
                        State getState() const;
                        
                        /**
                         * Generated
                         */
                        void setState(const State& state);
                        
                        /**
                         * Generated
                         */
                        int getDelta() const;
                        
                        /**
                         * Generated
                         */
                        void setDelta(const int& delta);
                        
                        /**
                         * Generated
                         */
                        int getRankOfActiveNode() const;
                        
                        /**
                         * Generated
                         */
                        void setRankOfActiveNode(const int& rankOfActiveNode);
                        
                        /**
                         * Generated
                         */
                        double getMaxChildWeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaxChildWeight(const double& maxChildWeight);
                        
                        /**
                         * Generated
                         */
                        double getAccumulatedWeight() const;
                        
                        /**
                         * Generated
                         */
                        void setAccumulatedWeight(const double& accumulatedWeight);
                        
                        /**
                         * Generated
                         */
                        std::bitset<DIMENSIONS> getEvenFlags() const;
                        
                        /**
                         * Generated
                         */
                        void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                        
                        /**
                         * Generated
                         */
                        void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        
                     };
                     
                  private: 
                     PersistentRecords _persistentRecords;
                     
                  public:
                     /**
                      * Generated
                      */
                     SpacetreeGridCellPacked();
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridCellPacked(const PersistentRecords& persistentRecords);
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridCellPacked(const double& p, const bool& isInside, const State& state, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     virtual ~SpacetreeGridCellPacked();
                     
                     /**
                      * Generated
                      */
                     double getP() const;
                     
                     /**
                      * Generated
                      */
                     void setP(const double& p);
                     
                     /**
                      * Generated
                      */
                     bool getIsInside() const;
                     
                     /**
                      * Generated
                      */
                     void setIsInside(const bool& isInside);
                     
                     /**
                      * Generated
                      */
                     State getState() const;
                     
                     /**
                      * Generated
                      */
                     void setState(const State& state);
                     
                     /**
                      * Generated
                      */
                     int getDelta() const;
                     
                     /**
                      * Generated
                      */
                     void setDelta(const int& delta);
                     
                     /**
                      * Generated
                      */
                     int getRankOfActiveNode() const;
                     
                     /**
                      * Generated
                      */
                     void setRankOfActiveNode(const int& rankOfActiveNode);
                     
                     /**
                      * Generated
                      */
                     double getMaxChildWeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaxChildWeight(const double& maxChildWeight);
                     
                     /**
                      * Generated
                      */
                     double getAccumulatedWeight() const;
                     
                     /**
                      * Generated
                      */
                     void setAccumulatedWeight(const double& accumulatedWeight);
                     
                     /**
                      * Generated
                      */
                     std::bitset<DIMENSIONS> getEvenFlags() const;
                     
                     /**
                      * Generated
                      */
                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                     
                     /**
                      * Generated
                      */
                     bool getEvenFlags(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setEvenFlags(int elementIndex, const bool& evenFlags);
                     
                     /**
                      * Generated
                      */
                     void flipEvenFlags(int elementIndex);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                     
                     /**
                      * Generated
                      */
                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     short int getAccessNumber(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setAccessNumber(int elementIndex, const short int& accessNumber);
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const State& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getStateMapping();
                     
                     /**
                      * Generated
                      */
                     std::string toString() const;
                     
                     /**
                      * Generated
                      */
                     void toString(std::ostream& out) const;
                     
                     
                     PersistentRecords getPersistentRecords() const;
                     /**
                      * Generated
                      */
                     SpacetreeGridCell convert() const;
                     
                     
                  #ifdef Parallel
                     protected:
                        static tarch::logging::Log _log;
                        
                        int _senderRank;
                        
                     public:
                        
                        /**
                         * Global that represents the mpi datatype.
                         */
                        static MPI_Datatype Datatype;
                        
                        /**
                         * Initializes the data type for the mpi operations. Has to be called
                         * before the very first send or receive operation is called.
                         */
                        static void initDatatype();
                        
                        static void shutdownDatatype();
                        
                        void send(int destination, int tag);
                        
                        void receive(int source, int tag);
                        
                        static bool isMessageInQueue(int tag);
                        
                        int getSenderRank() const;
                        
                  #endif
                     
                  };
                  
                  
               
            #elif defined(Parallel) && defined(Debug)
               /**
                * @author This class was autogenerated by DaStGen
                * 		   DataStructureGenerator (DaStGen), 2007-2009,
                * 		   by Wolfgang Eckhardt
                *
                * 		   build date: 09-12-2010 17:47
                *
                * @date   17/06/2011 15:45
                */
               class peano::applications::pic::demo2::records::SpacetreeGridCell { 
                  
                  public:
                     
                     typedef peano::applications::pic::demo2::records::SpacetreeGridCellPacked Packed;
                     
                     enum State {
                        Leaf = 0, Refined = 1, Root = 2
                     };
                     
                     struct PersistentRecords {
                        double _p;
                        bool _isInside;
                        State _state;
                        int _level;
                        int _delta;
                        int _rankOfActiveNode;
                        double _maxChildWeight;
                        double _accumulatedWeight;
                        std::bitset<DIMENSIONS> _evenFlags;
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                        /**
                         * Generated
                         */
                        PersistentRecords();
                        
                        /**
                         * Generated
                         */
                        PersistentRecords(const double& p, const bool& isInside, const State& state, const int& level, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        /**
                         * Generated
                         */
                        double getP() const;
                        
                        /**
                         * Generated
                         */
                        void setP(const double& p);
                        
                        /**
                         * Generated
                         */
                        bool getIsInside() const;
                        
                        /**
                         * Generated
                         */
                        void setIsInside(const bool& isInside);
                        
                        /**
                         * Generated
                         */
                        State getState() const;
                        
                        /**
                         * Generated
                         */
                        void setState(const State& state);
                        
                        /**
                         * Generated
                         */
                        int getLevel() const;
                        
                        /**
                         * Generated
                         */
                        void setLevel(const int& level);
                        
                        /**
                         * Generated
                         */
                        int getDelta() const;
                        
                        /**
                         * Generated
                         */
                        void setDelta(const int& delta);
                        
                        /**
                         * Generated
                         */
                        int getRankOfActiveNode() const;
                        
                        /**
                         * Generated
                         */
                        void setRankOfActiveNode(const int& rankOfActiveNode);
                        
                        /**
                         * Generated
                         */
                        double getMaxChildWeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaxChildWeight(const double& maxChildWeight);
                        
                        /**
                         * Generated
                         */
                        double getAccumulatedWeight() const;
                        
                        /**
                         * Generated
                         */
                        void setAccumulatedWeight(const double& accumulatedWeight);
                        
                        /**
                         * Generated
                         */
                        std::bitset<DIMENSIONS> getEvenFlags() const;
                        
                        /**
                         * Generated
                         */
                        void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                        
                        /**
                         * Generated
                         */
                        void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        
                     };
                     
                  private: 
                     PersistentRecords _persistentRecords;
                     
                  public:
                     /**
                      * Generated
                      */
                     SpacetreeGridCell();
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridCell(const PersistentRecords& persistentRecords);
                     
                     /**
                      * Generated
                      */
                     SpacetreeGridCell(const double& p, const bool& isInside, const State& state, const int& level, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     virtual ~SpacetreeGridCell();
                     
                     /**
                      * Generated
                      */
                     double getP() const;
                     
                     /**
                      * Generated
                      */
                     void setP(const double& p);
                     
                     /**
                      * Generated
                      */
                     bool getIsInside() const;
                     
                     /**
                      * Generated
                      */
                     void setIsInside(const bool& isInside);
                     
                     /**
                      * Generated
                      */
                     State getState() const;
                     
                     /**
                      * Generated
                      */
                     void setState(const State& state);
                     
                     /**
                      * Generated
                      */
                     int getLevel() const;
                     
                     /**
                      * Generated
                      */
                     void setLevel(const int& level);
                     
                     /**
                      * Generated
                      */
                     int getDelta() const;
                     
                     /**
                      * Generated
                      */
                     void setDelta(const int& delta);
                     
                     /**
                      * Generated
                      */
                     int getRankOfActiveNode() const;
                     
                     /**
                      * Generated
                      */
                     void setRankOfActiveNode(const int& rankOfActiveNode);
                     
                     /**
                      * Generated
                      */
                     double getMaxChildWeight() const;
                     
                     /**
                      * Generated
                      */
                     void setMaxChildWeight(const double& maxChildWeight);
                     
                     /**
                      * Generated
                      */
                     double getAccumulatedWeight() const;
                     
                     /**
                      * Generated
                      */
                     void setAccumulatedWeight(const double& accumulatedWeight);
                     
                     /**
                      * Generated
                      */
                     std::bitset<DIMENSIONS> getEvenFlags() const;
                     
                     /**
                      * Generated
                      */
                     void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                     
                     /**
                      * Generated
                      */
                     bool getEvenFlags(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setEvenFlags(int elementIndex, const bool& evenFlags);
                     
                     /**
                      * Generated
                      */
                     void flipEvenFlags(int elementIndex);
                     
                     /**
                      * Generated
                      */
                     tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                     
                     /**
                      * Generated
                      */
                     void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                     
                     /**
                      * Generated
                      */
                     short int getAccessNumber(int elementIndex) const;
                     
                     /**
                      * Generated
                      */
                     void setAccessNumber(int elementIndex, const short int& accessNumber);
                     
                     /**
                      * Generated
                      */
                     static std::string toString(const State& param);
                     
                     /**
                      * Generated
                      */
                     static std::string getStateMapping();
                     
                     /**
                      * Generated
                      */
                     std::string toString() const;
                     
                     /**
                      * Generated
                      */
                     void toString(std::ostream& out) const;
                     
                     
                     PersistentRecords getPersistentRecords() const;
                     /**
                      * Generated
                      */
                     SpacetreeGridCellPacked convert() const;
                     
                     
                  #ifdef Parallel
                     protected:
                        static tarch::logging::Log _log;
                        
                        int _senderRank;
                        
                     public:
                        
                        /**
                         * Global that represents the mpi datatype.
                         */
                        static MPI_Datatype Datatype;
                        
                        /**
                         * Initializes the data type for the mpi operations. Has to be called
                         * before the very first send or receive operation is called.
                         */
                        static void initDatatype();
                        
                        static void shutdownDatatype();
                        
                        void send(int destination, int tag);
                        
                        void receive(int source, int tag);
                        
                        static bool isMessageInQueue(int tag);
                        
                        int getSenderRank() const;
                        
                  #endif
                     
                  };
                  
                  /**
                   * @author This class was autogenerated by DaStGen
                   * 		   DataStructureGenerator (DaStGen), 2007-2009,
                   * 		   by Wolfgang Eckhardt
                   *
                   * 		   build date: 09-12-2010 17:47
                   *
                   * @date   17/06/2011 15:45
                   */
                  class peano::applications::pic::demo2::records::SpacetreeGridCellPacked { 
                     
                     public:
                        
                        typedef peano::applications::pic::demo2::records::SpacetreeGridCell::State State;
                        
                        struct PersistentRecords {
                           double _p;
                           int _level;
                           int _delta;
                           int _rankOfActiveNode;
                           double _maxChildWeight;
                           double _accumulatedWeight;
                           tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> _accessNumber;
                           
                           /** mapping of records:
                           || Member 	|| startbit 	|| length
                            |  isInside	| startbit 0	| #bits 1
                            |  state	| startbit 1	| #bits 2
                            |  evenFlags	| startbit 3	| #bits DIMENSIONS
                            */
                           long int _packedRecords0;
                           
                           /**
                            * Generated
                            */
                           PersistentRecords();
                           
                           /**
                            * Generated
                            */
                           PersistentRecords(const double& p, const bool& isInside, const State& state, const int& level, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                           
                           /**
                            * Generated
                            */
                           double getP() const;
                           
                           /**
                            * Generated
                            */
                           void setP(const double& p);
                           
                           /**
                            * Generated
                            */
                           bool getIsInside() const;
                           
                           /**
                            * Generated
                            */
                           void setIsInside(const bool& isInside);
                           
                           /**
                            * Generated
                            */
                           State getState() const;
                           
                           /**
                            * Generated
                            */
                           void setState(const State& state);
                           
                           /**
                            * Generated
                            */
                           int getLevel() const;
                           
                           /**
                            * Generated
                            */
                           void setLevel(const int& level);
                           
                           /**
                            * Generated
                            */
                           int getDelta() const;
                           
                           /**
                            * Generated
                            */
                           void setDelta(const int& delta);
                           
                           /**
                            * Generated
                            */
                           int getRankOfActiveNode() const;
                           
                           /**
                            * Generated
                            */
                           void setRankOfActiveNode(const int& rankOfActiveNode);
                           
                           /**
                            * Generated
                            */
                           double getMaxChildWeight() const;
                           
                           /**
                            * Generated
                            */
                           void setMaxChildWeight(const double& maxChildWeight);
                           
                           /**
                            * Generated
                            */
                           double getAccumulatedWeight() const;
                           
                           /**
                            * Generated
                            */
                           void setAccumulatedWeight(const double& accumulatedWeight);
                           
                           /**
                            * Generated
                            */
                           std::bitset<DIMENSIONS> getEvenFlags() const;
                           
                           /**
                            * Generated
                            */
                           void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                           
                           /**
                            * Generated
                            */
                           tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                           
                           /**
                            * Generated
                            */
                           void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                           
                           
                        };
                        
                     private: 
                        PersistentRecords _persistentRecords;
                        
                     public:
                        /**
                         * Generated
                         */
                        SpacetreeGridCellPacked();
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridCellPacked(const PersistentRecords& persistentRecords);
                        
                        /**
                         * Generated
                         */
                        SpacetreeGridCellPacked(const double& p, const bool& isInside, const State& state, const int& level, const int& delta, const int& rankOfActiveNode, const double& maxChildWeight, const double& accumulatedWeight, const std::bitset<DIMENSIONS>& evenFlags, const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        /**
                         * Generated
                         */
                        virtual ~SpacetreeGridCellPacked();
                        
                        /**
                         * Generated
                         */
                        double getP() const;
                        
                        /**
                         * Generated
                         */
                        void setP(const double& p);
                        
                        /**
                         * Generated
                         */
                        bool getIsInside() const;
                        
                        /**
                         * Generated
                         */
                        void setIsInside(const bool& isInside);
                        
                        /**
                         * Generated
                         */
                        State getState() const;
                        
                        /**
                         * Generated
                         */
                        void setState(const State& state);
                        
                        /**
                         * Generated
                         */
                        int getLevel() const;
                        
                        /**
                         * Generated
                         */
                        void setLevel(const int& level);
                        
                        /**
                         * Generated
                         */
                        int getDelta() const;
                        
                        /**
                         * Generated
                         */
                        void setDelta(const int& delta);
                        
                        /**
                         * Generated
                         */
                        int getRankOfActiveNode() const;
                        
                        /**
                         * Generated
                         */
                        void setRankOfActiveNode(const int& rankOfActiveNode);
                        
                        /**
                         * Generated
                         */
                        double getMaxChildWeight() const;
                        
                        /**
                         * Generated
                         */
                        void setMaxChildWeight(const double& maxChildWeight);
                        
                        /**
                         * Generated
                         */
                        double getAccumulatedWeight() const;
                        
                        /**
                         * Generated
                         */
                        void setAccumulatedWeight(const double& accumulatedWeight);
                        
                        /**
                         * Generated
                         */
                        std::bitset<DIMENSIONS> getEvenFlags() const;
                        
                        /**
                         * Generated
                         */
                        void setEvenFlags(const std::bitset<DIMENSIONS>& evenFlags);
                        
                        /**
                         * Generated
                         */
                        bool getEvenFlags(int elementIndex) const;
                        
                        /**
                         * Generated
                         */
                        void setEvenFlags(int elementIndex, const bool& evenFlags);
                        
                        /**
                         * Generated
                         */
                        void flipEvenFlags(int elementIndex);
                        
                        /**
                         * Generated
                         */
                        tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int> getAccessNumber() const;
                        
                        /**
                         * Generated
                         */
                        void setAccessNumber(const tarch::la::Vector<DIMENSIONS_TIMES_TWO,short int>& accessNumber);
                        
                        /**
                         * Generated
                         */
                        short int getAccessNumber(int elementIndex) const;
                        
                        /**
                         * Generated
                         */
                        void setAccessNumber(int elementIndex, const short int& accessNumber);
                        
                        /**
                         * Generated
                         */
                        static std::string toString(const State& param);
                        
                        /**
                         * Generated
                         */
                        static std::string getStateMapping();
                        
                        /**
                         * Generated
                         */
                        std::string toString() const;
                        
                        /**
                         * Generated
                         */
                        void toString(std::ostream& out) const;
                        
                        
                        PersistentRecords getPersistentRecords() const;
                        /**
                         * Generated
                         */
                        SpacetreeGridCell convert() const;
                        
                        
                     #ifdef Parallel
                        protected:
                           static tarch::logging::Log _log;
                           
                           int _senderRank;
                           
                        public:
                           
                           /**
                            * Global that represents the mpi datatype.
                            */
                           static MPI_Datatype Datatype;
                           
                           /**
                            * Initializes the data type for the mpi operations. Has to be called
                            * before the very first send or receive operation is called.
                            */
                           static void initDatatype();
                           
                           static void shutdownDatatype();
                           
                           void send(int destination, int tag);
                           
                           void receive(int source, int tag);
                           
                           static bool isMessageInQueue(int tag);
                           
                           int getSenderRank() const;
                           
                     #endif
                        
                     };
                     
                     
                  
               #endif
               
               #endif
               
