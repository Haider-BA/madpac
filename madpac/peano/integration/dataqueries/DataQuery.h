// Copyright (C) 2009 Technische Universitaet Muenchen
// This file is part of the Peano project. For conditions of distribution and
// use, please see the copyright notice at www5.in.tum.de/peano
#ifndef _PEANO_INTEGRATION_DATAQUERIES_DATAQUERY_H
#define _PEANO_INTEGRATION_DATAQUERIES_DATAQUERY_H

#include "peano/utils/Dimensions.h"
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>

namespace peano {
   namespace integration {
      namespace dataqueries {
         class DataQuery;
         class DataQueryPacked;
      }
   }
}

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 17-10-2010 09:35
 *
 * @date   03/12/2010 09:05
 */
class peano::integration::dataqueries::DataQuery { 
   
   public:
      
      typedef peano::integration::dataqueries::DataQueryPacked Packed;
      
      struct PersistentRecords {
         int _id;
         int _recordsPerEntry;
         int _scope;
         tarch::la::Vector<DIMENSIONS,double> _boundingBoxOffset;
         tarch::la::Vector<DIMENSIONS,double> _boundingBox;
         tarch::la::Vector<DIMENSIONS,int> _resolution;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const int& id, const int& recordsPerEntry, const int& scope, const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset, const tarch::la::Vector<DIMENSIONS,double>& boundingBox, const tarch::la::Vector<DIMENSIONS,int>& resolution);
         
         /**
          * Generated
          */
         int getId() const;
         
         /**
          * Generated
          */
         void setId(const int& id);
         
         /**
          * Generated
          */
         int getRecordsPerEntry() const;
         
         /**
          * Generated
          */
         void setRecordsPerEntry(const int& recordsPerEntry);
         
         /**
          * Generated
          */
         int getScope() const;
         
         /**
          * Generated
          */
         void setScope(const int& scope);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getBoundingBoxOffset() const;
         
         /**
          * Generated
          */
         void setBoundingBoxOffset(const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getBoundingBox() const;
         
         /**
          * Generated
          */
         void setBoundingBox(const tarch::la::Vector<DIMENSIONS,double>& boundingBox);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getResolution() const;
         
         /**
          * Generated
          */
         void setResolution(const tarch::la::Vector<DIMENSIONS,int>& resolution);
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      DataQuery();
      
      /**
       * Generated
       */
      DataQuery(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      DataQuery(const int& id, const int& recordsPerEntry, const int& scope, const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset, const tarch::la::Vector<DIMENSIONS,double>& boundingBox, const tarch::la::Vector<DIMENSIONS,int>& resolution);
      
      /**
       * Generated
       */
      virtual ~DataQuery();
      
      /**
       * Generated
       */
      int getId() const;
      
      /**
       * Generated
       */
      void setId(const int& id);
      
      /**
       * Generated
       */
      int getRecordsPerEntry() const;
      
      /**
       * Generated
       */
      void setRecordsPerEntry(const int& recordsPerEntry);
      
      /**
       * Generated
       */
      int getScope() const;
      
      /**
       * Generated
       */
      void setScope(const int& scope);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getBoundingBoxOffset() const;
      
      /**
       * Generated
       */
      void setBoundingBoxOffset(const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset);
      
      /**
       * Generated
       */
      double getBoundingBoxOffset(int elementIndex) const;
      
      /**
       * Generated
       */
      void setBoundingBoxOffset(int elementIndex, const double& boundingBoxOffset);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getBoundingBox() const;
      
      /**
       * Generated
       */
      void setBoundingBox(const tarch::la::Vector<DIMENSIONS,double>& boundingBox);
      
      /**
       * Generated
       */
      double getBoundingBox(int elementIndex) const;
      
      /**
       * Generated
       */
      void setBoundingBox(int elementIndex, const double& boundingBox);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,int> getResolution() const;
      
      /**
       * Generated
       */
      void setResolution(const tarch::la::Vector<DIMENSIONS,int>& resolution);
      
      /**
       * Generated
       */
      int getResolution(int elementIndex) const;
      
      /**
       * Generated
       */
      void setResolution(int elementIndex, const int& resolution);
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      DataQueryPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          */
         static MPI_Datatype Datatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag);
         
         void receive(int source, int tag);
         
         static bool isMessageInQueue(int tag);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 17-10-2010 09:35
    *
    * @date   03/12/2010 09:05
    */
   class peano::integration::dataqueries::DataQueryPacked { 
      
      public:
         
         struct PersistentRecords {
            int _id;
            int _recordsPerEntry;
            int _scope;
            tarch::la::Vector<DIMENSIONS,double> _boundingBoxOffset;
            tarch::la::Vector<DIMENSIONS,double> _boundingBox;
            tarch::la::Vector<DIMENSIONS,int> _resolution;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const int& id, const int& recordsPerEntry, const int& scope, const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset, const tarch::la::Vector<DIMENSIONS,double>& boundingBox, const tarch::la::Vector<DIMENSIONS,int>& resolution);
            
            /**
             * Generated
             */
            int getId() const;
            
            /**
             * Generated
             */
            void setId(const int& id);
            
            /**
             * Generated
             */
            int getRecordsPerEntry() const;
            
            /**
             * Generated
             */
            void setRecordsPerEntry(const int& recordsPerEntry);
            
            /**
             * Generated
             */
            int getScope() const;
            
            /**
             * Generated
             */
            void setScope(const int& scope);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getBoundingBoxOffset() const;
            
            /**
             * Generated
             */
            void setBoundingBoxOffset(const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getBoundingBox() const;
            
            /**
             * Generated
             */
            void setBoundingBox(const tarch::la::Vector<DIMENSIONS,double>& boundingBox);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,int> getResolution() const;
            
            /**
             * Generated
             */
            void setResolution(const tarch::la::Vector<DIMENSIONS,int>& resolution);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         DataQueryPacked();
         
         /**
          * Generated
          */
         DataQueryPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         DataQueryPacked(const int& id, const int& recordsPerEntry, const int& scope, const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset, const tarch::la::Vector<DIMENSIONS,double>& boundingBox, const tarch::la::Vector<DIMENSIONS,int>& resolution);
         
         /**
          * Generated
          */
         virtual ~DataQueryPacked();
         
         /**
          * Generated
          */
         int getId() const;
         
         /**
          * Generated
          */
         void setId(const int& id);
         
         /**
          * Generated
          */
         int getRecordsPerEntry() const;
         
         /**
          * Generated
          */
         void setRecordsPerEntry(const int& recordsPerEntry);
         
         /**
          * Generated
          */
         int getScope() const;
         
         /**
          * Generated
          */
         void setScope(const int& scope);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getBoundingBoxOffset() const;
         
         /**
          * Generated
          */
         void setBoundingBoxOffset(const tarch::la::Vector<DIMENSIONS,double>& boundingBoxOffset);
         
         /**
          * Generated
          */
         double getBoundingBoxOffset(int elementIndex) const;
         
         /**
          * Generated
          */
         void setBoundingBoxOffset(int elementIndex, const double& boundingBoxOffset);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getBoundingBox() const;
         
         /**
          * Generated
          */
         void setBoundingBox(const tarch::la::Vector<DIMENSIONS,double>& boundingBox);
         
         /**
          * Generated
          */
         double getBoundingBox(int elementIndex) const;
         
         /**
          * Generated
          */
         void setBoundingBox(int elementIndex, const double& boundingBox);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getResolution() const;
         
         /**
          * Generated
          */
         void setResolution(const tarch::la::Vector<DIMENSIONS,int>& resolution);
         
         /**
          * Generated
          */
         int getResolution(int elementIndex) const;
         
         /**
          * Generated
          */
         void setResolution(int elementIndex, const int& resolution);
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         DataQuery convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
