/**

\dir 

\author Tobias Weinzierl, Tobias Neckel

This directory contains sources for dastgen generation of peano dofs (degrees of 
freedom).

The vertex dofs are modelled via DaStGen, implementing the following rationale 
(in an analogue manner for cells, too):
 
- Every vertex holds one degree of freedom. This degree of freedom depends 
  on the application whereas the vertex data itself are application 
   independent. There's also a void vertex, i.e. a vertex without a degree 
   of freedom.  
- Both vertex and application data are to be modelled via DaStGen. 
- Both vertex and application objects also contain user-written operations. 
   These operations are not to be modelled via DaStGen.
   
 At the beginning of the Peano project, I tried to implement the following 
 target architecture:
 
 \image html architecture_original.png
 
 Unfortunately, this architecture has a substantial drawback: The generator 
 DaStGen is not able to merge the data resulting from vertex modelling and 
 application modelling. Thus, I decided to refactor the architecture: 
 
 \image html architecture_draft.png
 
 - The vertex is modelled via DaStGen resulting in AbstractVertex. 
 - The application data then is modelled via DaStGen, too. This model is called 
   DOMAINVertexDoF. 
 - AbstractVertex defines the grid-specific operations and holds both 
   AbstractVertex and the degree of freedom. The setters and getters of the 
   types generated by DaStGen shall not be visible, thus AbstractVertex acts as 
   a fassade. It is hand-coded. 
 - Each application package has to define a vertex type by its own. This 
   vertex (poisson::PoissonVertex, e.g.) has to extend AbstractVertex passing 
   it the application-specific dof. Furthermore, it adds application-specific 
   operations.
   
 This architecture has a fundamental drawback: The two different records classes 
 are not merged into one class, i.e. DaStGen is not able to pack them together 
 efficiently. This problem is tackled in the next section.
 
 !! Handling trivialgrid
 
 For the peano project there are two different types of grids: The adaptive 
 spacetree grids and the regularly refined Cartesian grids (without any 
 hierarchy). We call the latter trivialgrid. Thus, 
 every application has to generate the vertices twice: First, for the grid 
 the vertex holds both AbstractVertex and the degree of freedom. Second, for 
 trivialgrid the vertex holds the degree of freedom only. This two different 
 options are modelled via grid::AbstractVertex and 
 trivialgrid::AbstractTrivialgridVertex.
  
 \image html architecture_final.png
 
 The class AbstractTrivialgridVertex is just the identity, i.e. contains only 
 proxy-operations.

 !! AbstractVertex
 
 Please note that there are two types called AbstractVertex. One is modelled by 
 DaStGen, the other one is hand-written. The first one never occurs as type as 
 it is always flattened together with another type into an application-specific 
 record type. If no pde is solved the degree of freedom model  
 (application-speficic) is TrivialVertexDoF holding an index for visualisation 
 only.
 
 \code
 \include AbstractVertex.def
 \endcode
 
 !! EventAttributes
 
 For the event attributes the same architecture is used.
 
 \code
 \include AbstractEventAttributes.def
 \endcode


*/

