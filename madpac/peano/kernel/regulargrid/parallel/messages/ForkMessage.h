#ifndef _PEANO_KERNEL_REGULARGRID_PARALLEL_MESSAGES_FORKMESSAGE_H
#define _PEANO_KERNEL_REGULARGRID_PARALLEL_MESSAGES_FORKMESSAGE_H

#include "peano/utils/Globals.h"
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>

namespace peano {
   namespace kernel {
      namespace regulargrid {
         namespace parallel {
            namespace messages {
               class ForkMessage;
               class ForkMessagePacked;
            }
         }
      }
   }
}

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 17-10-2010 09:35
 *
 * @date   22/10/2010 14:02
 */
class peano::kernel::regulargrid::parallel::messages::ForkMessage { 
   
   public:
      
      typedef peano::kernel::regulargrid::parallel::messages::ForkMessagePacked Packed;
      
      struct PersistentRecords {
         tarch::la::Vector<DIMENSIONS,double> _domainOffset;
         tarch::la::Vector<DIMENSIONS,double> _h;
         tarch::la::Vector<DIMENSIONS,int> _numberOfGridPoints;
         tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> _neighbourRanks;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const tarch::la::Vector<DIMENSIONS,double>& domainOffset, const tarch::la::Vector<DIMENSIONS,double>& h, const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getDomainOffset() const;
         
         /**
          * Generated
          */
         void setDomainOffset(const tarch::la::Vector<DIMENSIONS,double>& domainOffset);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getH() const;
         
         /**
          * Generated
          */
         void setH(const tarch::la::Vector<DIMENSIONS,double>& h);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getNumberOfGridPoints() const;
         
         /**
          * Generated
          */
         void setNumberOfGridPoints(const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints);
         
         /**
          * Generated
          */
         tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> getNeighbourRanks() const;
         
         /**
          * Generated
          */
         void setNeighbourRanks(const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      ForkMessage();
      
      /**
       * Generated
       */
      ForkMessage(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      ForkMessage(const tarch::la::Vector<DIMENSIONS,double>& domainOffset, const tarch::la::Vector<DIMENSIONS,double>& h, const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
      
      /**
       * Generated
       */
      virtual ~ForkMessage();
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getDomainOffset() const;
      
      /**
       * Generated
       */
      void setDomainOffset(const tarch::la::Vector<DIMENSIONS,double>& domainOffset);
      
      /**
       * Generated
       */
      double getDomainOffset(int elementIndex) const;
      
      /**
       * Generated
       */
      void setDomainOffset(int elementIndex, const double& domainOffset);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getH() const;
      
      /**
       * Generated
       */
      void setH(const tarch::la::Vector<DIMENSIONS,double>& h);
      
      /**
       * Generated
       */
      double getH(int elementIndex) const;
      
      /**
       * Generated
       */
      void setH(int elementIndex, const double& h);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,int> getNumberOfGridPoints() const;
      
      /**
       * Generated
       */
      void setNumberOfGridPoints(const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints);
      
      /**
       * Generated
       */
      int getNumberOfGridPoints(int elementIndex) const;
      
      /**
       * Generated
       */
      void setNumberOfGridPoints(int elementIndex, const int& numberOfGridPoints);
      
      /**
       * Generated
       */
      tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> getNeighbourRanks() const;
      
      /**
       * Generated
       */
      void setNeighbourRanks(const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
      
      /**
       * Generated
       */
      int getNeighbourRanks(int elementIndex) const;
      
      /**
       * Generated
       */
      void setNeighbourRanks(int elementIndex, const int& neighbourRanks);
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      ForkMessagePacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          */
         static MPI_Datatype Datatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag);
         
         void receive(int source, int tag);
         
         static bool isMessageInQueue(int tag);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 17-10-2010 09:35
    *
    * @date   22/10/2010 14:02
    */
   class peano::kernel::regulargrid::parallel::messages::ForkMessagePacked { 
      
      public:
         
         struct PersistentRecords {
            tarch::la::Vector<DIMENSIONS,double> _domainOffset;
            tarch::la::Vector<DIMENSIONS,double> _h;
            tarch::la::Vector<DIMENSIONS,int> _numberOfGridPoints;
            tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> _neighbourRanks;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const tarch::la::Vector<DIMENSIONS,double>& domainOffset, const tarch::la::Vector<DIMENSIONS,double>& h, const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getDomainOffset() const;
            
            /**
             * Generated
             */
            void setDomainOffset(const tarch::la::Vector<DIMENSIONS,double>& domainOffset);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getH() const;
            
            /**
             * Generated
             */
            void setH(const tarch::la::Vector<DIMENSIONS,double>& h);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,int> getNumberOfGridPoints() const;
            
            /**
             * Generated
             */
            void setNumberOfGridPoints(const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints);
            
            /**
             * Generated
             */
            tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> getNeighbourRanks() const;
            
            /**
             * Generated
             */
            void setNeighbourRanks(const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         ForkMessagePacked();
         
         /**
          * Generated
          */
         ForkMessagePacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         ForkMessagePacked(const tarch::la::Vector<DIMENSIONS,double>& domainOffset, const tarch::la::Vector<DIMENSIONS,double>& h, const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints, const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
         
         /**
          * Generated
          */
         virtual ~ForkMessagePacked();
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getDomainOffset() const;
         
         /**
          * Generated
          */
         void setDomainOffset(const tarch::la::Vector<DIMENSIONS,double>& domainOffset);
         
         /**
          * Generated
          */
         double getDomainOffset(int elementIndex) const;
         
         /**
          * Generated
          */
         void setDomainOffset(int elementIndex, const double& domainOffset);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getH() const;
         
         /**
          * Generated
          */
         void setH(const tarch::la::Vector<DIMENSIONS,double>& h);
         
         /**
          * Generated
          */
         double getH(int elementIndex) const;
         
         /**
          * Generated
          */
         void setH(int elementIndex, const double& h);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getNumberOfGridPoints() const;
         
         /**
          * Generated
          */
         void setNumberOfGridPoints(const tarch::la::Vector<DIMENSIONS,int>& numberOfGridPoints);
         
         /**
          * Generated
          */
         int getNumberOfGridPoints(int elementIndex) const;
         
         /**
          * Generated
          */
         void setNumberOfGridPoints(int elementIndex, const int& numberOfGridPoints);
         
         /**
          * Generated
          */
         tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int> getNeighbourRanks() const;
         
         /**
          * Generated
          */
         void setNeighbourRanks(const tarch::la::Vector<TWO_POWER_D_TIMES_TWO_POWER_D,int>& neighbourRanks);
         
         /**
          * Generated
          */
         int getNeighbourRanks(int elementIndex) const;
         
         /**
          * Generated
          */
         void setNeighbourRanks(int elementIndex, const int& neighbourRanks);
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         ForkMessage convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
