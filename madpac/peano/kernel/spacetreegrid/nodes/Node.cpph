#include "peano/utils/Loop.h"
#include "tarch/Assertions.h"
#include "peano/geometry/GeometryHelper.h"


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
tarch::logging::Log peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::_log( "peano::kernel::spacetreegrid::nodes::Node" );


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::Node(
  VertexStack&                vertexStack,
  CellStack&                  cellStack,
  EventHandle&                eventHandle,
  peano::geometry::Geometry&  geometry
):
  _vertexStack(vertexStack),
  _cellStack(cellStack),
  _eventHandle(eventHandle),
  _geometry(geometry) {
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::~Node() {
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
CellStack& peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::getCellStack() const {
  return _cellStack;
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
VertexStack& peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::getVertexStack() const {
  return _vertexStack;
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
void peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::validatePositionOfVertices(
  Vertex                                    fineGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              fineGridVerticesEnumerator
) {
  #ifdef Asserts
  #ifdef Debug
  dfor2(k)
    assertionEquals3(
      fineGridVerticesEnumerator.getLevel(),
      fineGridVertices[fineGridVerticesEnumerator(k)].getLevel(),
      fineGridVerticesEnumerator.toString(),
      fineGridVertices[fineGridVerticesEnumerator(k)],
      k
    );
    for (int d=0; d<DIMENSIONS; d++) {
      assertionNumericalEquals4(
        fineGridVerticesEnumerator.getVertexPosition(k)(d),
        fineGridVertices[fineGridVerticesEnumerator(k)].getX()(d),
        fineGridVerticesEnumerator.toString(),
        fineGridVertices[fineGridVerticesEnumerator(k)],
        k,d
      )
    }
  enddforx
  #endif
  #endif
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
void peano::kernel::spacetreegrid::nodes::Node<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::updateCellAfterLoad(
  State&                                    state,
  Cell&                                     fineGridCell,
  Vertex                                    fineGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              fineGridVerticesEnumerator,
  Cell&                                     coarseGridCell,
  Vertex                                    coarseGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              coarseGridVerticesEnumerator,
  const tarch::la::Vector<DIMENSIONS,int>&  fineGridPositionOfCell
) {
  switch (
    peano::geometry::GeometryHelper::getCellCommand(
      _geometry.isCompletelyInside( peano::geometry::GeometryHelper::getCellCenter(fineGridVerticesEnumerator.getVertexPosition(),fineGridVerticesEnumerator.getCellSize()),fineGridVerticesEnumerator.getCellSize()/2.0),
      _geometry.isCompletelyOutside( peano::geometry::GeometryHelper::getCellCenter(fineGridVerticesEnumerator.getVertexPosition(),fineGridVerticesEnumerator.getCellSize()),fineGridVerticesEnumerator.getCellSize()/2.0),
      fineGridCell.isInside()
    )
  ) {
    case peano::geometry::GeometryHelper::LeaveCellUnaltered:
      break;
    case peano::geometry::GeometryHelper::CreateInnerCell:
      _eventHandle.createCell(
        fineGridCell,
        fineGridVertices,
        fineGridVerticesEnumerator,
        coarseGridVertices,
        coarseGridVerticesEnumerator,
        coarseGridCell,
        fineGridPositionOfCell
      );
      fineGridCell.switchToInside();
      state.changedCellState();
      logDebug( "updateCellAfterLoad()", "switch cell to inside. cell=" << fineGridCell );
      break;
    case peano::geometry::GeometryHelper::CreateOuterCell:
	  case peano::geometry::GeometryHelper::CreateOuterCellAndDoNotAnalyseItFurtherIfItsRefined:
      _eventHandle.destroyCell(
        fineGridCell,
        fineGridVertices,
        fineGridVerticesEnumerator,
        coarseGridVertices,
        coarseGridVerticesEnumerator,
        coarseGridCell,
        fineGridPositionOfCell
      );
	    fineGridCell.switchToOutside();
	    state.changedCellState();
	    logDebug( "updateCellAfterLoad()", "switch cell to outside. cell=" << fineGridCell );
	    break;
  }
}
