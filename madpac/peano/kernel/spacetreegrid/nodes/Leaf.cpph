#include "peano/kernel/spacetreegrid/nodes/loops/LoadVertexLoopBody.h"
#include "peano/kernel/spacetreegrid/nodes/loops/StoreVertexLoopBody.h"
#include "peano/kernel/spacetreegrid/aspects/CellLocalPeanoCurve.h"
#include "peano/kernel/spacetreegrid/aspects/CellRefinement.h"
#include "peano/kernel/spacetreegrid/aspects/VertexStateAnalysis.h"
#include "peano/kernel/spacetreegrid/nodes/tasks/StoreSubCells.h"
#include "peano/kernel/spacetreegrid/nodes/tasks/InvokeEnterCell.h"
#include "peano/kernel/spacetreegrid/nodes/tasks/InvokeLeaveCell.h"
#include "peano/kernel/datatraversal/ActionSetTraversalLoop.h"
#include "peano/kernel/datatraversal/autotuning/Oracle.h"


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
tarch::logging::Log peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::_log( "peano::kernel::spacetreegrid::nodes::Leaf" );


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::Leaf(
  VertexStack&                vertexStack,
  CellStack&                  cellStack,
  EventHandle&                eventHandle,
  peano::geometry::Geometry&  geometry,
  RefinedNode&                refinedNode
):
  Base(vertexStack,cellStack,eventHandle,geometry),
  _refinedNode( refinedNode ) {
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::~Leaf() {
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
void peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::load(
  State&                                    state,
  Cell&                                     fineGridCell,
  Vertex                                    fineGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              fineGridVerticesEnumerator,
  Cell&                                     coarseGridCell,
  Vertex                                    coarseGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              coarseGridVerticesEnumerator,
  const tarch::la::Vector<DIMENSIONS,int>&  fineGridPositionOfCell,
  int                                       counter[FOUR_POWER_D]
) {
  logTraceInWith6Arguments( "load(...)", fineGridVerticesEnumerator.toString(), state, fineGridCell, coarseGridCell, coarseGridVerticesEnumerator.toString(), fineGridPositionOfCell );

  assertion1( fineGridCell.isLeaf(), fineGridCell );

  typedef loops::LoadVertexLoopBody<Vertex,Cell,State,VertexStack,EventHandle> LoopBody;
  LoopBody loopBody(
    state,
    fineGridVertices,
    fineGridVerticesEnumerator,
    coarseGridCell,
    coarseGridVertices,
    coarseGridVerticesEnumerator,
    fineGridPositionOfCell,
    counter,
    Base::_vertexStack,
    Base::_eventHandle,
    Base::_geometry
  );
  peano::kernel::datatraversal::ActionSetTraversalLoop<LoopBody>(
    peano::kernel::spacetreegrid::aspects::CellLocalPeanoCurve::getReadVertexSequence(fineGridCell,state.isTraversalInverted()),
    loopBody,
    peano::kernel::datatraversal::autotuning::Oracle::getInstance().parallelise(TWO_POWER_D,peano::kernel::datatraversal::autotuning::SpacetreeGridLoadVertices),
    false
  );
  peano::kernel::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::kernel::datatraversal::autotuning::SpacetreeGridLoadVertices);

  Base::validatePositionOfVertices(
    fineGridVertices,
    fineGridVerticesEnumerator
  );
  validateRefinementStateOfVertices(
    fineGridVertices,
    fineGridVerticesEnumerator
  );

  updateCellAfterLoad(
    state,
    fineGridCell,
    fineGridVertices,
    fineGridVerticesEnumerator,
    coarseGridCell,
    coarseGridVertices,
    coarseGridVerticesEnumerator,
    fineGridPositionOfCell
  );

  logTraceOutWith2Arguments( "load(...)", state, fineGridCell );
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
void peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::validateRefinementStateOfVertices(
  Vertex const * const          fineGridVertices,
  const SingleLevelEnumerator&  fineGridVerticesEnumerator
) {
  dfor2(k)
    assertion3(
      fineGridVertices[ fineGridVerticesEnumerator(k) ].isHangingNode() ||
      fineGridVertices[ fineGridVerticesEnumerator(k) ].getRefinementControl() != Vertex::Records::Refined,
      fineGridVertices[ fineGridVerticesEnumerator(k) ].toString(),
      fineGridVerticesEnumerator.toString(),
      k
    );
    assertion3(
      fineGridVertices[ fineGridVerticesEnumerator(k) ].getMaximumSubtreeHeight()<=0,
      fineGridVertices[ fineGridVerticesEnumerator(k) ].toString(),
      fineGridVerticesEnumerator.toString(),
      k
    );
  enddforx
}



template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
void peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::traverse(
  State&                                    state,
  Cell&                                     fineGridCell,
  Vertex* const                             fineGridVertices,
  const SingleLevelEnumerator&              fineGridVerticesEnumerator,
  Cell&                                     coarseGridCell,
  Vertex* const                             coarseGridVertices,
  const SingleLevelEnumerator&              coarseGridVerticesEnumerator,
  const tarch::la::Vector<DIMENSIONS,int>&  fineGridPositionOfCell
) {
  logTraceInWith6Arguments( "traverse(...)", fineGridVerticesEnumerator.toString(), state, fineGridCell, coarseGridCell, coarseGridVerticesEnumerator.toString(), fineGridPositionOfCell );

  peano::kernel::spacetreegrid::nodes::tasks::InvokeEnterCell<Vertex,Cell,State,EventHandle> invokeEnterCell(
    state,
    fineGridCell,
    fineGridVertices,
    fineGridVerticesEnumerator,
    coarseGridCell,
    coarseGridVertices,
    coarseGridVerticesEnumerator,
    fineGridPositionOfCell,
    Base::_eventHandle
  );

  peano::kernel::spacetreegrid::nodes::tasks::InvokeLeaveCell<Vertex,Cell,State,EventHandle> invokeLeaveCell(
    state,
    fineGridCell,
    fineGridVertices,
    fineGridVerticesEnumerator,
    coarseGridCell,
    coarseGridVertices,
    coarseGridVerticesEnumerator,
    fineGridPositionOfCell,
    Base::_eventHandle
  );

  if (peano::kernel::spacetreegrid::aspects::VertexStateAnalysis::doesOneVertexCarryRefinementFlag(fineGridVertices,fineGridVerticesEnumerator,Vertex::Records::Refining)) {
    Cell newFineGridCells[THREE_POWER_D];
    peano::kernel::spacetreegrid::aspects::CellRefinement::refine(fineGridCell,newFineGridCells);

    invokeEnterCell();

    _refinedNode.descend(
      state,
      fineGridCell,
      fineGridVertices,
      fineGridVerticesEnumerator,
      newFineGridCells,
      false
    );

    peano::kernel::spacetreegrid::nodes::tasks::StoreSubCells<Cell,CellStack>  storeSubCells(
      newFineGridCells,
      Base::_cellStack,
      peano::kernel::spacetreegrid::aspects::CellPeanoCurve::getLoopDirection(fineGridCell,state.isTraversalInverted())
    );

    peano::kernel::datatraversal::TaskSet(
      storeSubCells,
      invokeLeaveCell,
      peano::kernel::datatraversal::autotuning::Oracle::getInstance().parallelise(
        2,
        peano::kernel::datatraversal::autotuning::SpacetreeGridCallLeaveCellAndStoreSubCellsWithinTraverse
      )
    );

    peano::kernel::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::kernel::datatraversal::autotuning::SpacetreeGridCallLeaveCellAndStoreSubCellsWithinTraverse);
  }
  else {
    state.updateInLeaf(fineGridVerticesEnumerator.getLevel(), fineGridVerticesEnumerator.getCellSize() );

    invokeEnterCell();
    invokeLeaveCell();
  }

  logTraceOutWith1Argument( "traverse(...)", fineGridCell );
}


template <class Vertex, class Cell, class State, class VertexStack, class CellStack, class EventHandle>
void peano::kernel::spacetreegrid::nodes::Leaf<Vertex,Cell,State,VertexStack,CellStack,EventHandle>::store(
  State&                                    state,
  Cell&                                     fineGridCell,
  Vertex                                    fineGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              fineGridVerticesEnumerator,
  Cell&                                     coarseGridCell,
  Vertex                                    coarseGridVertices[FOUR_POWER_D],
  const SingleLevelEnumerator&              coarseGridVerticesEnumerator,
  const tarch::la::Vector<DIMENSIONS,int>&  fineGridPositionOfCell,
  int                                       counter[FOUR_POWER_D]
) {
  logTraceInWith6Arguments( "store(...)", fineGridVerticesEnumerator.toString(), state, fineGridCell, coarseGridCell, coarseGridVerticesEnumerator.toString(), fineGridPositionOfCell );
  assertion1( fineGridCell.isLeaf(), fineGridCell );

  validateRefinementStateOfVertices(
    fineGridVertices,
    fineGridVerticesEnumerator
  );

  typedef loops::StoreVertexLoopBody<Vertex,Cell,State,VertexStack,EventHandle> LoopBody;
  LoopBody loopBody(
    state,
    fineGridVertices,
    fineGridVerticesEnumerator,
    coarseGridCell,
    coarseGridVertices,
    coarseGridVerticesEnumerator,
    fineGridPositionOfCell,
    counter,
    Base::_vertexStack,
    Base::_eventHandle,
    Base::_geometry
  );
  peano::kernel::datatraversal::ActionSetTraversalLoop<LoopBody>(
    peano::kernel::spacetreegrid::aspects::CellLocalPeanoCurve::getWriteVertexSequence(fineGridCell,state.isTraversalInverted()),
    loopBody,
    0,
    false
  );

  logTraceOutWith2Arguments( "store(...)", state, fineGridCell );
}
