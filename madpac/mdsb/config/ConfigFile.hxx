// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CONFIG_FILE_HXX
#define CONFIG_FILE_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3029951L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class boundaryType;
class coordinate;
class dimension;
class thermostatType;
class materialType;
class cuboidType;
class change;
class config;
class gravity;
class container;
class domain;
class timedata;
class output;
class inputfile;
class inputsphere;
class boundary;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class boundaryType: public ::xml_schema::string
{
  public:
  enum value
  {
    periodic,
    outflow,
    heating,
    reflecting,
    force,
  };

  boundaryType (value v);

  boundaryType (const char* v);

  boundaryType (const ::std::string& v);

  boundaryType (const ::xml_schema::string& v);

  boundaryType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  boundaryType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  boundaryType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  boundaryType (const boundaryType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual boundaryType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  boundaryType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_boundaryType_convert ();
  }

  protected:
  value
  _xsd_boundaryType_convert () const;

  public:
  static const char* const _xsd_boundaryType_literals_[5];
  static const value _xsd_boundaryType_indexes_[5];
};

class coordinate: public ::xml_schema::string
{
  public:
  enum value
  {
    x,
    y,
    z
  };

  coordinate (value v);

  coordinate (const char* v);

  coordinate (const ::std::string& v);

  coordinate (const ::xml_schema::string& v);

  coordinate (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  coordinate (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  coordinate (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  coordinate (const coordinate& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual coordinate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  coordinate&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_coordinate_convert ();
  }

  protected:
  value
  _xsd_coordinate_convert () const;

  public:
  static const char* const _xsd_coordinate_literals_[3];
  static const value _xsd_coordinate_indexes_[3];
};

class dimension: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::int_, char, ::xml_schema::simple_type >
{
  public:
  dimension (::xml_schema::int_ v);

  dimension (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  dimension (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  dimension (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  dimension (const dimension& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual dimension*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;
};

class thermostatType: public ::xml_schema::type
{
  public:
  // change
  // 
  typedef ::change change_type;
  typedef ::xsd::cxx::tree::optional< change_type > change_optional;
  typedef ::xsd::cxx::tree::traits< change_type, char > change_traits;

  const change_optional&
  change () const;

  change_optional&
  change ();

  void
  change (const change_type& x);

  void
  change (const change_optional& x);

  void
  change (::std::auto_ptr< change_type > p);

  // initialTemperature
  // 
  typedef ::xml_schema::double_ initialTemperature_type;
  typedef ::xsd::cxx::tree::traits< initialTemperature_type, char, ::xsd::cxx::tree::schema_type::double_ > initialTemperature_traits;

  const initialTemperature_type&
  initialTemperature () const;

  initialTemperature_type&
  initialTemperature ();

  void
  initialTemperature (const initialTemperature_type& x);

  // frequency
  // 
  typedef ::xml_schema::unsigned_int frequency_type;
  typedef ::xsd::cxx::tree::traits< frequency_type, char > frequency_traits;

  const frequency_type&
  frequency () const;

  frequency_type&
  frequency ();

  void
  frequency (const frequency_type& x);

  // Constructors.
  //
  thermostatType (const initialTemperature_type&,
                  const frequency_type&);

  thermostatType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  thermostatType (const thermostatType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual thermostatType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~thermostatType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  change_optional change_;
  ::xsd::cxx::tree::one< initialTemperature_type > initialTemperature_;
  ::xsd::cxx::tree::one< frequency_type > frequency_;
};

class materialType: public ::xml_schema::type
{
  public:
  // epsilon
  // 
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  // sigma
  // 
  typedef ::xml_schema::double_ sigma_type;
  typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_traits;

  const sigma_type&
  sigma () const;

  sigma_type&
  sigma ();

  void
  sigma (const sigma_type& x);

  // mass
  // 
  typedef ::xml_schema::double_ mass_type;
  typedef ::xsd::cxx::tree::traits< mass_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_traits;

  const mass_type&
  mass () const;

  mass_type&
  mass ();

  void
  mass (const mass_type& x);

  // Constructors.
  //
  materialType (const epsilon_type&,
                const sigma_type&,
                const mass_type&);

  materialType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  materialType (const materialType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual materialType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~materialType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  ::xsd::cxx::tree::one< sigma_type > sigma_;
  ::xsd::cxx::tree::one< mass_type > mass_;
};

class cuboidType: public ::xml_schema::type
{
  public:
  // material
  // 
  typedef ::materialType material_type;
  typedef ::xsd::cxx::tree::traits< material_type, char > material_traits;

  const material_type&
  material () const;

  material_type&
  material ();

  void
  material (const material_type& x);

  void
  material (::std::auto_ptr< material_type > p);

  // x0
  // 
  typedef ::xml_schema::double_ x0_type;
  typedef ::xsd::cxx::tree::traits< x0_type, char, ::xsd::cxx::tree::schema_type::double_ > x0_traits;

  const x0_type&
  x0 () const;

  x0_type&
  x0 ();

  void
  x0 (const x0_type& x);

  // x1
  // 
  typedef ::xml_schema::double_ x1_type;
  typedef ::xsd::cxx::tree::traits< x1_type, char, ::xsd::cxx::tree::schema_type::double_ > x1_traits;

  const x1_type&
  x1 () const;

  x1_type&
  x1 ();

  void
  x1 (const x1_type& x);

  // x2
  // 
  typedef ::xml_schema::double_ x2_type;
  typedef ::xsd::cxx::tree::traits< x2_type, char, ::xsd::cxx::tree::schema_type::double_ > x2_traits;

  const x2_type&
  x2 () const;

  x2_type&
  x2 ();

  void
  x2 (const x2_type& x);

  // v0
  // 
  typedef ::xml_schema::double_ v0_type;
  typedef ::xsd::cxx::tree::traits< v0_type, char, ::xsd::cxx::tree::schema_type::double_ > v0_traits;

  const v0_type&
  v0 () const;

  v0_type&
  v0 ();

  void
  v0 (const v0_type& x);

  // v1
  // 
  typedef ::xml_schema::double_ v1_type;
  typedef ::xsd::cxx::tree::traits< v1_type, char, ::xsd::cxx::tree::schema_type::double_ > v1_traits;

  const v1_type&
  v1 () const;

  v1_type&
  v1 ();

  void
  v1 (const v1_type& x);

  // v2
  // 
  typedef ::xml_schema::double_ v2_type;
  typedef ::xsd::cxx::tree::traits< v2_type, char, ::xsd::cxx::tree::schema_type::double_ > v2_traits;

  const v2_type&
  v2 () const;

  v2_type&
  v2 ();

  void
  v2 (const v2_type& x);

  // n0
  // 
  typedef ::xml_schema::unsigned_int n0_type;
  typedef ::xsd::cxx::tree::traits< n0_type, char > n0_traits;

  const n0_type&
  n0 () const;

  n0_type&
  n0 ();

  void
  n0 (const n0_type& x);

  // n1
  // 
  typedef ::xml_schema::unsigned_int n1_type;
  typedef ::xsd::cxx::tree::traits< n1_type, char > n1_traits;

  const n1_type&
  n1 () const;

  n1_type&
  n1 ();

  void
  n1 (const n1_type& x);

  // n2
  // 
  typedef ::xml_schema::unsigned_int n2_type;
  typedef ::xsd::cxx::tree::traits< n2_type, char > n2_traits;

  const n2_type&
  n2 () const;

  n2_type&
  n2 ();

  void
  n2 (const n2_type& x);

  // h
  // 
  typedef ::xml_schema::double_ h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char, ::xsd::cxx::tree::schema_type::double_ > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  // Constructors.
  //
  cuboidType (const material_type&,
              const x0_type&,
              const x1_type&,
              const x2_type&,
              const v0_type&,
              const v1_type&,
              const v2_type&,
              const n0_type&,
              const n1_type&,
              const n2_type&,
              const h_type&);

  cuboidType (::std::auto_ptr< material_type >&,
              const x0_type&,
              const x1_type&,
              const x2_type&,
              const v0_type&,
              const v1_type&,
              const v2_type&,
              const n0_type&,
              const n1_type&,
              const n2_type&,
              const h_type&);

  cuboidType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  cuboidType (const cuboidType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual cuboidType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~cuboidType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< material_type > material_;
  ::xsd::cxx::tree::one< x0_type > x0_;
  ::xsd::cxx::tree::one< x1_type > x1_;
  ::xsd::cxx::tree::one< x2_type > x2_;
  ::xsd::cxx::tree::one< v0_type > v0_;
  ::xsd::cxx::tree::one< v1_type > v1_;
  ::xsd::cxx::tree::one< v2_type > v2_;
  ::xsd::cxx::tree::one< n0_type > n0_;
  ::xsd::cxx::tree::one< n1_type > n1_;
  ::xsd::cxx::tree::one< n2_type > n2_;
  ::xsd::cxx::tree::one< h_type > h_;
};

class change: public ::xml_schema::type
{
  public:
  // target
  // 
  typedef ::xml_schema::double_ target_type;
  typedef ::xsd::cxx::tree::traits< target_type, char, ::xsd::cxx::tree::schema_type::double_ > target_traits;

  const target_type&
  target () const;

  target_type&
  target ();

  void
  target (const target_type& x);

  // stepping
  // 
  typedef ::xml_schema::double_ stepping_type;
  typedef ::xsd::cxx::tree::traits< stepping_type, char, ::xsd::cxx::tree::schema_type::double_ > stepping_traits;

  const stepping_type&
  stepping () const;

  stepping_type&
  stepping ();

  void
  stepping (const stepping_type& x);

  // steppingFrequency
  // 
  typedef ::xml_schema::unsigned_int steppingFrequency_type;
  typedef ::xsd::cxx::tree::traits< steppingFrequency_type, char > steppingFrequency_traits;

  const steppingFrequency_type&
  steppingFrequency () const;

  steppingFrequency_type&
  steppingFrequency ();

  void
  steppingFrequency (const steppingFrequency_type& x);

  // Constructors.
  //
  change (const target_type&,
          const stepping_type&,
          const steppingFrequency_type&);

  change (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  change (const change& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual change*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~change ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< target_type > target_;
  ::xsd::cxx::tree::one< stepping_type > stepping_;
  ::xsd::cxx::tree::one< steppingFrequency_type > steppingFrequency_;
};

class config: public ::xml_schema::type
{
  public:
  // gravity
  // 
  typedef ::gravity gravity_type;
  typedef ::xsd::cxx::tree::optional< gravity_type > gravity_optional;
  typedef ::xsd::cxx::tree::traits< gravity_type, char > gravity_traits;

  const gravity_optional&
  gravity () const;

  gravity_optional&
  gravity ();

  void
  gravity (const gravity_type& x);

  void
  gravity (const gravity_optional& x);

  void
  gravity (::std::auto_ptr< gravity_type > p);

  // container
  // 
  typedef ::container container_type;
  typedef ::xsd::cxx::tree::traits< container_type, char > container_traits;

  const container_type&
  container () const;

  container_type&
  container ();

  void
  container (const container_type& x);

  void
  container (::std::auto_ptr< container_type > p);

  // domain
  // 
  typedef ::domain domain_type;
  typedef ::xsd::cxx::tree::traits< domain_type, char > domain_traits;

  const domain_type&
  domain () const;

  domain_type&
  domain ();

  void
  domain (const domain_type& x);

  void
  domain (::std::auto_ptr< domain_type > p);

  // timedata
  // 
  typedef ::timedata timedata_type;
  typedef ::xsd::cxx::tree::traits< timedata_type, char > timedata_traits;

  const timedata_type&
  timedata () const;

  timedata_type&
  timedata ();

  void
  timedata (const timedata_type& x);

  void
  timedata (::std::auto_ptr< timedata_type > p);

  // thermostat
  // 
  typedef ::thermostatType thermostat_type;
  typedef ::xsd::cxx::tree::optional< thermostat_type > thermostat_optional;
  typedef ::xsd::cxx::tree::traits< thermostat_type, char > thermostat_traits;

  const thermostat_optional&
  thermostat () const;

  thermostat_optional&
  thermostat ();

  void
  thermostat (const thermostat_type& x);

  void
  thermostat (const thermostat_optional& x);

  void
  thermostat (::std::auto_ptr< thermostat_type > p);

  // output
  // 
  typedef ::output output_type;
  typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

  const output_type&
  output () const;

  output_type&
  output ();

  void
  output (const output_type& x);

  void
  output (::std::auto_ptr< output_type > p);

  // inputfile
  // 
  typedef ::inputfile inputfile_type;
  typedef ::xsd::cxx::tree::sequence< inputfile_type > inputfile_sequence;
  typedef inputfile_sequence::iterator inputfile_iterator;
  typedef inputfile_sequence::const_iterator inputfile_const_iterator;
  typedef ::xsd::cxx::tree::traits< inputfile_type, char > inputfile_traits;

  const inputfile_sequence&
  inputfile () const;

  inputfile_sequence&
  inputfile ();

  void
  inputfile (const inputfile_sequence& s);

  // inputcuboid
  // 
  typedef ::cuboidType inputcuboid_type;
  typedef ::xsd::cxx::tree::sequence< inputcuboid_type > inputcuboid_sequence;
  typedef inputcuboid_sequence::iterator inputcuboid_iterator;
  typedef inputcuboid_sequence::const_iterator inputcuboid_const_iterator;
  typedef ::xsd::cxx::tree::traits< inputcuboid_type, char > inputcuboid_traits;

  const inputcuboid_sequence&
  inputcuboid () const;

  inputcuboid_sequence&
  inputcuboid ();

  void
  inputcuboid (const inputcuboid_sequence& s);

  // inputfcc
  // 
  typedef ::cuboidType inputfcc_type;
  typedef ::xsd::cxx::tree::sequence< inputfcc_type > inputfcc_sequence;
  typedef inputfcc_sequence::iterator inputfcc_iterator;
  typedef inputfcc_sequence::const_iterator inputfcc_const_iterator;
  typedef ::xsd::cxx::tree::traits< inputfcc_type, char > inputfcc_traits;

  const inputfcc_sequence&
  inputfcc () const;

  inputfcc_sequence&
  inputfcc ();

  void
  inputfcc (const inputfcc_sequence& s);

  // inputsphere
  // 
  typedef ::inputsphere inputsphere_type;
  typedef ::xsd::cxx::tree::sequence< inputsphere_type > inputsphere_sequence;
  typedef inputsphere_sequence::iterator inputsphere_iterator;
  typedef inputsphere_sequence::const_iterator inputsphere_const_iterator;
  typedef ::xsd::cxx::tree::traits< inputsphere_type, char > inputsphere_traits;

  const inputsphere_sequence&
  inputsphere () const;

  inputsphere_sequence&
  inputsphere ();

  void
  inputsphere (const inputsphere_sequence& s);

  // boundary
  // 
  typedef ::boundary boundary_type;
  typedef ::xsd::cxx::tree::sequence< boundary_type > boundary_sequence;
  typedef boundary_sequence::iterator boundary_iterator;
  typedef boundary_sequence::const_iterator boundary_const_iterator;
  typedef ::xsd::cxx::tree::traits< boundary_type, char > boundary_traits;

  const boundary_sequence&
  boundary () const;

  boundary_sequence&
  boundary ();

  void
  boundary (const boundary_sequence& s);

  // dim
  // 
  typedef ::dimension dim_type;
  typedef ::xsd::cxx::tree::traits< dim_type, char > dim_traits;

  const dim_type&
  dim () const;

  dim_type&
  dim ();

  void
  dim (const dim_type& x);

  void
  dim (::std::auto_ptr< dim_type > p);

  // statistics
  // 
  typedef ::xml_schema::boolean statistics_type;
  typedef ::xsd::cxx::tree::traits< statistics_type, char > statistics_traits;

  const statistics_type&
  statistics () const;

  statistics_type&
  statistics ();

  void
  statistics (const statistics_type& x);

  // Constructors.
  //
  config (const container_type&,
          const domain_type&,
          const timedata_type&,
          const output_type&,
          const dim_type&,
          const statistics_type&);

  config (::std::auto_ptr< container_type >&,
          ::std::auto_ptr< domain_type >&,
          ::std::auto_ptr< timedata_type >&,
          ::std::auto_ptr< output_type >&,
          const dim_type&,
          const statistics_type&);

  config (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  config (const config& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual config*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~config ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  gravity_optional gravity_;
  ::xsd::cxx::tree::one< container_type > container_;
  ::xsd::cxx::tree::one< domain_type > domain_;
  ::xsd::cxx::tree::one< timedata_type > timedata_;
  thermostat_optional thermostat_;
  ::xsd::cxx::tree::one< output_type > output_;
  inputfile_sequence inputfile_;
  inputcuboid_sequence inputcuboid_;
  inputfcc_sequence inputfcc_;
  inputsphere_sequence inputsphere_;
  boundary_sequence boundary_;
  ::xsd::cxx::tree::one< dim_type > dim_;
  ::xsd::cxx::tree::one< statistics_type > statistics_;
};

class gravity: public ::xml_schema::type
{
  public:
  // factor
  // 
  typedef ::xml_schema::double_ factor_type;
  typedef ::xsd::cxx::tree::traits< factor_type, char, ::xsd::cxx::tree::schema_type::double_ > factor_traits;

  const factor_type&
  factor () const;

  factor_type&
  factor ();

  void
  factor (const factor_type& x);

  // axis
  // 
  typedef ::coordinate axis_type;
  typedef ::xsd::cxx::tree::traits< axis_type, char > axis_traits;

  const axis_type&
  axis () const;

  axis_type&
  axis ();

  void
  axis (const axis_type& x);

  void
  axis (::std::auto_ptr< axis_type > p);

  // Constructors.
  //
  gravity (const factor_type&,
           const axis_type&);

  gravity (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  gravity (const gravity& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual gravity*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~gravity ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< factor_type > factor_;
  ::xsd::cxx::tree::one< axis_type > axis_;
};

class container: public ::xml_schema::type
{
  public:
  // type
  // 
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // cutoff
  // 
  typedef ::xml_schema::double_ cutoff_type;
  typedef ::xsd::cxx::tree::traits< cutoff_type, char, ::xsd::cxx::tree::schema_type::double_ > cutoff_traits;

  const cutoff_type&
  cutoff () const;

  cutoff_type&
  cutoff ();

  void
  cutoff (const cutoff_type& x);

  // Constructors.
  //
  container (const type_type&,
             const cutoff_type&);

  container (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  container (const container& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual container*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~container ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< type_type > type_;
  ::xsd::cxx::tree::one< cutoff_type > cutoff_;
};

class domain: public ::xml_schema::type
{
  public:
  // size-x
  // 
  typedef ::xml_schema::double_ size_x_type;
  typedef ::xsd::cxx::tree::traits< size_x_type, char, ::xsd::cxx::tree::schema_type::double_ > size_x_traits;

  const size_x_type&
  size_x () const;

  size_x_type&
  size_x ();

  void
  size_x (const size_x_type& x);

  // size-y
  // 
  typedef ::xml_schema::double_ size_y_type;
  typedef ::xsd::cxx::tree::traits< size_y_type, char, ::xsd::cxx::tree::schema_type::double_ > size_y_traits;

  const size_y_type&
  size_y () const;

  size_y_type&
  size_y ();

  void
  size_y (const size_y_type& x);

  // size-z
  // 
  typedef ::xml_schema::double_ size_z_type;
  typedef ::xsd::cxx::tree::traits< size_z_type, char, ::xsd::cxx::tree::schema_type::double_ > size_z_traits;

  const size_z_type&
  size_z () const;

  size_z_type&
  size_z ();

  void
  size_z (const size_z_type& x);

  // Constructors.
  //
  domain (const size_x_type&,
          const size_y_type&,
          const size_z_type&);

  domain (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  domain (const domain& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual domain*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~domain ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< size_x_type > size_x_;
  ::xsd::cxx::tree::one< size_y_type > size_y_;
  ::xsd::cxx::tree::one< size_z_type > size_z_;
};

class timedata: public ::xml_schema::type
{
  public:
  // delta
  // 
  typedef ::xml_schema::double_ delta_type;
  typedef ::xsd::cxx::tree::traits< delta_type, char, ::xsd::cxx::tree::schema_type::double_ > delta_traits;

  const delta_type&
  delta () const;

  delta_type&
  delta ();

  void
  delta (const delta_type& x);

  // end
  // 
  typedef ::xml_schema::double_ end_type;
  typedef ::xsd::cxx::tree::traits< end_type, char, ::xsd::cxx::tree::schema_type::double_ > end_traits;

  const end_type&
  end () const;

  end_type&
  end ();

  void
  end (const end_type& x);

  // Constructors.
  //
  timedata (const delta_type&,
            const end_type&);

  timedata (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  timedata (const timedata& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual timedata*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~timedata ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< delta_type > delta_;
  ::xsd::cxx::tree::one< end_type > end_;
};

class output: public ::xml_schema::type
{
  public:
  // filebase
  // 
  typedef ::xml_schema::string filebase_type;
  typedef ::xsd::cxx::tree::traits< filebase_type, char > filebase_traits;

  const filebase_type&
  filebase () const;

  filebase_type&
  filebase ();

  void
  filebase (const filebase_type& x);

  void
  filebase (::std::auto_ptr< filebase_type > p);

  // frequency
  // 
  typedef ::xml_schema::unsigned_int frequency_type;
  typedef ::xsd::cxx::tree::traits< frequency_type, char > frequency_traits;

  const frequency_type&
  frequency () const;

  frequency_type&
  frequency ();

  void
  frequency (const frequency_type& x);

  // Constructors.
  //
  output (const filebase_type&,
          const frequency_type&);

  output (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  output (const output& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual output*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~output ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< filebase_type > filebase_;
  ::xsd::cxx::tree::one< frequency_type > frequency_;
};

class inputfile: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  inputfile (const name_type&);

  inputfile (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  inputfile (const inputfile& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual inputfile*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~inputfile ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
};

class inputsphere: public ::xml_schema::type
{
  public:
  // material
  // 
  typedef ::materialType material_type;
  typedef ::xsd::cxx::tree::traits< material_type, char > material_traits;

  const material_type&
  material () const;

  material_type&
  material ();

  void
  material (const material_type& x);

  void
  material (::std::auto_ptr< material_type > p);

  // x0
  // 
  typedef ::xml_schema::double_ x0_type;
  typedef ::xsd::cxx::tree::traits< x0_type, char, ::xsd::cxx::tree::schema_type::double_ > x0_traits;

  const x0_type&
  x0 () const;

  x0_type&
  x0 ();

  void
  x0 (const x0_type& x);

  // x1
  // 
  typedef ::xml_schema::double_ x1_type;
  typedef ::xsd::cxx::tree::traits< x1_type, char, ::xsd::cxx::tree::schema_type::double_ > x1_traits;

  const x1_type&
  x1 () const;

  x1_type&
  x1 ();

  void
  x1 (const x1_type& x);

  // x2
  // 
  typedef ::xml_schema::double_ x2_type;
  typedef ::xsd::cxx::tree::traits< x2_type, char, ::xsd::cxx::tree::schema_type::double_ > x2_traits;

  const x2_type&
  x2 () const;

  x2_type&
  x2 ();

  void
  x2 (const x2_type& x);

  // v0
  // 
  typedef ::xml_schema::double_ v0_type;
  typedef ::xsd::cxx::tree::traits< v0_type, char, ::xsd::cxx::tree::schema_type::double_ > v0_traits;

  const v0_type&
  v0 () const;

  v0_type&
  v0 ();

  void
  v0 (const v0_type& x);

  // v1
  // 
  typedef ::xml_schema::double_ v1_type;
  typedef ::xsd::cxx::tree::traits< v1_type, char, ::xsd::cxx::tree::schema_type::double_ > v1_traits;

  const v1_type&
  v1 () const;

  v1_type&
  v1 ();

  void
  v1 (const v1_type& x);

  // v2
  // 
  typedef ::xml_schema::double_ v2_type;
  typedef ::xsd::cxx::tree::traits< v2_type, char, ::xsd::cxx::tree::schema_type::double_ > v2_traits;

  const v2_type&
  v2 () const;

  v2_type&
  v2 ();

  void
  v2 (const v2_type& x);

  // n
  // 
  typedef ::xml_schema::unsigned_int n_type;
  typedef ::xsd::cxx::tree::traits< n_type, char > n_traits;

  const n_type&
  n () const;

  n_type&
  n ();

  void
  n (const n_type& x);

  // h
  // 
  typedef ::xml_schema::double_ h_type;
  typedef ::xsd::cxx::tree::traits< h_type, char, ::xsd::cxx::tree::schema_type::double_ > h_traits;

  const h_type&
  h () const;

  h_type&
  h ();

  void
  h (const h_type& x);

  // Constructors.
  //
  inputsphere (const material_type&,
               const x0_type&,
               const x1_type&,
               const x2_type&,
               const v0_type&,
               const v1_type&,
               const v2_type&,
               const n_type&,
               const h_type&);

  inputsphere (::std::auto_ptr< material_type >&,
               const x0_type&,
               const x1_type&,
               const x2_type&,
               const v0_type&,
               const v1_type&,
               const v2_type&,
               const n_type&,
               const h_type&);

  inputsphere (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  inputsphere (const inputsphere& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual inputsphere*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~inputsphere ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< material_type > material_;
  ::xsd::cxx::tree::one< x0_type > x0_;
  ::xsd::cxx::tree::one< x1_type > x1_;
  ::xsd::cxx::tree::one< x2_type > x2_;
  ::xsd::cxx::tree::one< v0_type > v0_;
  ::xsd::cxx::tree::one< v1_type > v1_;
  ::xsd::cxx::tree::one< v2_type > v2_;
  ::xsd::cxx::tree::one< n_type > n_;
  ::xsd::cxx::tree::one< h_type > h_;
};

class boundary: public ::xml_schema::type
{
  public:
  // axis
  // 
  typedef ::coordinate axis_type;
  typedef ::xsd::cxx::tree::traits< axis_type, char > axis_traits;

  const axis_type&
  axis () const;

  axis_type&
  axis ();

  void
  axis (const axis_type& x);

  void
  axis (::std::auto_ptr< axis_type > p);

  // position_up
  // 
  typedef ::xml_schema::boolean position_up_type;
  typedef ::xsd::cxx::tree::traits< position_up_type, char > position_up_traits;

  const position_up_type&
  position_up () const;

  position_up_type&
  position_up ();

  void
  position_up (const position_up_type& x);

  // type
  // 
  typedef ::boundaryType type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  boundary (const axis_type&,
            const position_up_type&,
            const type_type&);

  boundary (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  boundary (const boundary& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual boundary*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~boundary ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< axis_type > axis_;
  ::xsd::cxx::tree::one< position_up_type > position_up_;
  ::xsd::cxx::tree::one< type_type > type_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::config >
config_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::config >
config_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::config >
config_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::config >
config_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::config >
config_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CONFIG_FILE_HXX
