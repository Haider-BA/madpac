/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include <sstream>
#include <iostream>

log4cxx::LoggerPtr Particle::logger = log4cxx::Logger::getLogger("Particle");

#ifdef DEBUG

int Particle::numInstances = 0;

int Particle::getID() const {
	return _id;
}

#endif

Particle::Particle(int type_arg) {
	type = type_arg;
	LOG4CXX_TRACE(logger, "Particle generated!");
	f = 0.0;
	old_f = 0.0;

	_S = 0.0;
	_U = 0.0;
	_stress = 0.0;

#ifdef DEBUG
	_id = numInstances;
	numInstances++;
#endif
}

Particle::Particle(const Particle& other) {
	x = other.x;
	v = other.v;
	f = other.f;
	old_f = other.old_f;
	m = other.m;
	epsilon = other.epsilon;
	sigma = other.sigma;
	type = other.type;
	old_x = other.old_x;
	_S = other._S;
	_U = 0;
	_stress = other._stress;
	LOG4CXX_TRACE(logger, "Particle generated by copy!");

#ifdef DEBUG
	_id = numInstances;
	numInstances++;
#endif
}

// Todo: maybe use initializater list instead of copy?
Particle::Particle(	utils::Vector<double, 3> x_arg,
	        utils::Vector<double, 3> v_arg,
	        double m_arg,
	        double epsilon_arg,
	        double sigma_arg,
	        int type_arg
) {
    x = x_arg;
    v = v_arg;
    m = m_arg;
    epsilon = epsilon_arg;
    sigma = sigma_arg;
    type = type_arg;
    f = 0.0;
    old_f = 0.0;
    _U = 0;

	_S = 0.0;
	_stress = 0.0;
    LOG4CXX_TRACE(logger, "Particle generated!");

#ifdef DEBUG
	_id = numInstances;
	numInstances++;
#endif
}

Particle::~Particle() {
	LOG4CXX_TRACE(logger, "Particle destructed!");
}


std::string Particle::toString() {
	std::stringstream stream;
	stream << "Particle: X:" << x <<  " v: " << v << " f: " << f << " old_f: " << old_f << " type: " << type << " S: " << _S << " u: "<<_U<<" sigma:" << sigma;
#ifdef DEBUG
	stream << " id: " << _id << " oldX: " << old_x;
#endif
	return stream.str();
}

bool Particle::operator ==(Particle& other) {
	if ( (x == other.x) && (v == other.v) && (f == other.f) &&
			(type == other.type) & (m == other.m) && (old_f == other.old_f)) {
		return true;
	}

	return false;
}

std::ostream& operator<<(std::ostream& stream, Particle& p) {
	stream << p.toString();
	return stream;
}
